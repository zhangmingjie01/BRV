{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u672c\u6846\u67b6\u5728\u4e0d\u5f71\u54cdRecyclerView\u7684\u4efb\u4f55\u51fd\u6570\u7ec4\u4ef6\u4f7f\u7528\u57fa\u7840\u4e0a\u5f00\u53d1. \u672c\u6846\u67b6\u4e5f\u5c06\u4e00\u76f4\u4fdd\u6301\u7ef4\u62a4\u72b6\u6001 \u975e\u5e38\u6b22\u8fce\u5171\u540c\u8d21\u732e\u4ee3\u7801/\u4fee\u8ba2\u6587\u6863, \u70b9\u51fb\u6587\u6863\u53f3\u4e0a\u89d2\u5c0f\u94c5\u7b14\u53ef\u76f4\u63a5\u4fee\u8ba2\u6587\u6863 \u2197 \u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5217\u8868 \u00b6 rv . linear (). setup { addType < SimpleModel > ( R . layout . item_simple ) }. models = getData () \u8fd9\u91cc\u51fa\u73b0\u7684 BRV \u5173\u952e\u8bcd\u5373\u672c\u6846\u67b6, RV \u5373RecyclerView\u7b80\u79f0. setup \u51fd\u6570\u4e5f\u53ea\u662f\u7b80\u5316\u521b\u5efaBindingAdapter\u5bf9\u8c61 \u5217\u8868\u586b\u5145\u6570\u636e\u7684\u4e09\u79cd\u65b9\u5f0f \u00b6 BRV\u652f\u6301\u4e09\u79cd\u65b9\u5f0f, \u7075\u6d3b\u4f7f\u7528; \u8fd9\u91cc\u63d0\u53ca\u7684Model\u5c31\u7b49\u540c\u4e8e\u6570\u636e\u7c7b/JavaBean/POJO 1) \u51fd\u6570\u56de\u8c03 \u00b6 \u5728 onBind \u51fd\u6570\u4e2d\u586b\u5145\u6570\u636e rv . linear (). setup { addType < SimpleModel > ( R . layout . item_simple ) onBind { findView < TextView > ( R . id . tv_simple ). text = getModel < SimpleModel > (). name } }. models = getData () 2) \u5b9e\u73b0\u63a5\u53e3 \u00b6 \u901a\u8fc7\u4e3aModel\u5b9e\u73b0\u63a5\u53e3 ItemBind , \u5b9e\u73b0\u51fd\u6570 onBind , \u5728\u8be5\u51fd\u6570\u4e2d\u586b\u5145\u6570\u636e; \u8fd9\u79cd\u65b9\u5f0f\u5728\u5f88\u591a\u6846\u67b6\u4e2d\u88ab\u5e94\u7528, \u4f8b\u5982BRVAH, \u4f46\u662f\u6211\u4e0d\u63a8\u8350\u8fd9\u79cd\u89c6\u56fe\u5728Model\u4e2d\u7ed1\u5b9a\u7684\u65b9\u5f0f, \u56e0\u4e3aModel\u5e94\u5f53\u53ea\u5b58\u50a8\u6570\u636e\u548c\u8ba1\u7b97\u903b\u8f91, \u4e0d\u5e94\u5305\u542b\u4efb\u4f55UI class SimpleModel ( var name : String = \"BRV\" ) : ItemBind { override fun onBind ( holder : BindingAdapter . BindingViewHolder ) { val appName = holder . context . getString ( R . string . app_name ) holder . findView < TextView > ( R . id . tv_simple ). text = appName + itemPosition } } 3) DataBinding \u00b6 \u901a\u8fc7DataBinding\u6570\u636e\u7ed1\u5b9a\u5f62\u5f0f\u81ea\u52a8\u586b\u5145\u6570\u636e, \u63a8\u8350, \u8fd9\u662f\u4ee3\u7801\u91cf\u6700\u5c11\u6700\u7075\u6d3b\u7684\u4e00\u79cd\u65b9\u5f0f. \u7b2c\u4e00\u6b65, \u542f\u7528DataBinding, \u5728module\u4e2d\u7684build.gradle\u6587\u4ef6\u4e2d apply plugin: \"kotlin-kapt\" // kapt\u63d2\u4ef6\u7528\u4e8e\u751f\u6210dataBinding android { /.../ buildFeatures . dataBinding = true } \u7b2c\u4e8c\u6b65, \u5728Item\u7684\u5e03\u5c40\u6587\u4ef6\u4e2d\u521b\u5efa\u53d8\u91cf, \u7136\u540e\u7ed1\u5b9a\u53d8\u91cf\u5230\u89c6\u56fe\u63a7\u4ef6\u4e0a <layout xmlns:android= \"http://schemas.android.com/apk/res/android\" > <data> <variable name= \"m\" type= \"com.drake.brv.sample.model.SimpleModel\" /> </data> <LinearLayout android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" > <FrameLayout android:id= \"@+id/item\" android:layout_width= \"match_parent\" android:layout_height= \"100dp\" android:layout_margin= \"16dp\" android:background= \"@drawable/bg_card\" android:foreground= \"?selectableItemBackgroundBorderless\" > <TextView android:id= \"@+id/tv_simple\" android:text= \"@{String.valueOf(m.name)}\" android:gravity= \"center\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> </FrameLayout> </LinearLayout> </layout> \u9009\u4e2d\u884c\u662fDataBinding\u4f7f\u7528\u65b9\u6cd5 \u7b2c\u4e09\u6b65, \u8d4b\u503c\u4e00\u4e2a\u7528\u4e8e \u81ea\u5b9a\u7ed1\u5b9a\u6570\u636e\u5230XML\u5e03\u5c40\u7684Id (DataBinding\u57fa\u7840\u77e5\u8bc6) rv\u662f\u4e00\u4e2a\u5217\u8868. \u91cc\u9762\u7684models\u662f\u4e00\u4e2alist\u96c6\u5408, \u6bcf\u4e2a\u5143\u7d20\u5bf9\u5e94\u4e00\u4e2aitem. dataBinding\u4f1a\u6839\u636e\u4f60 \u8d4b\u503c\u7684Id \u81ea\u52a8\u7ed1\u5b9amodels\u4e2d\u5143\u7d20\u5230xml\u4e2d\u8d4b\u503c \u6ce8\u610f\u8981\u5148\u5728\u67d0\u4e2a\u5e03\u5c40\u6216Item\u5e03\u5c40\u58f0\u660e <layout> \u5e03\u5c40\u4e2d\u7684\u53d8\u91cf name=\"m\" , BR.m \u624d\u80fd\u88ab\u751f\u6210 \u5bfc\u5305\u6ce8\u610f\u5bfc\u5165\u4f60\u6240\u5728module\u7684BR, \u8fd9\u6837\u6240\u6709\u4f7f\u7528\u8be5Id\u6765\u58f0\u660e\u6570\u636e\u6a21\u578b\u7684\u5e03\u5c40\u90fd\u4f1a\u88abBRV\u81ea\u52a8\u7ed1\u5b9a\u6570\u636e \u5982\u679c\u4f9d\u7136\u6ca1\u6709\u751f\u6210\u8bf7 make project (\u5373\u56fe\u4e2d\u7eff\u8272\u5c0f\u9524\u5b50\u56fe\u6807) m(m\u662fmodel\u7684\u7b80\u79f0)\u53ef\u4ee5\u662f\u4efb\u4f55\u5176\u4ed6\u7684\u540d\u79f0, model\u6216\u8005sb\u90fd\u53ef\u4ee5, \u6bd4\u5982\u4f60 name=\"data\" , \u90a3\u4e48\u4f60\u5c31\u5e94\u8be5\u4f7f\u7528BR.data BR.data\u548cAndroid\u4e2d\u5e38\u89c1\u7684 R.id.data \u90fd\u5c5e\u4e8eId\u5e38\u91cf, \u672c\u8d28\u4e0a\u90fd\u662fInt\u503c. \u4f60\u53ef\u4ee5\u70b9\u51fb\u67e5\u770bBR.m\u6e90\u7801 \u4f46\u662f\u4e00\u65e6\u58f0\u660e BRV.model = BR.m \u4f60\u7684\u6240\u6709BRV\u4f7f\u7528\u7684item\u5e03\u5c40\u90fd\u5f97\u4f7f\u7528 name=\"m\" \u6765\u58f0\u660e\u6570\u636e\u6a21\u578b, \u5426\u5219\u4f1a\u65e0\u6cd5\u81ea\u52a8\u7ed1\u5b9a \u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u5728 onBind \u91cc\u9762\u624b\u52a8\u7ed1\u5b9a, \u4f46\u662f\u80af\u5b9a\u6bd4\u81ea\u52a8\u9ebb\u70e6, \u800c\u4e14\u540d\u79f0\u672c\u8eab\u53ea\u662f\u4ee3\u53f7\u6211\u5efa\u8bae\u90fd\u4f7f\u7528m class App : Application () { override fun onCreate () { super . onCreate () // \u521d\u59cb\u5316BindingAdapter\u7684\u9ed8\u8ba4\u7ed1\u5b9aID, \u5982\u679c\u4e0d\u4f7f\u7528DataBinding\u5e76\u4e0d\u9700\u8981\u521d\u59cb\u5316 BRV . modelId = BR . m } } \u8fd9\u79cd\u65b9\u5f0f\u521b\u5efa\u5217\u8868\u65e0\u9700\u5904\u7406\u6570\u636e rv . linear (). setup { addType < SimpleModel > ( R . layout . item_simple ) }. models = getData () \u522b\u770b\u6587\u6863\u4e2d\u7b2c\u4e09\u79cd\u65b9\u5f0f\u590d\u6742, \u5b9e\u9645\u7b2c\u4e09\u79cd\u65b9\u5f0f\u4ee3\u7801\u91cf\u6700\u5c11, \u540c\u65f6\u6700\u89e3\u8026 \u4f7f\u7528DataBinding\u53ef\u4ee5\u590d\u5236\u6216\u8005\u5f15\u7528\u6211\u7684\u5e38\u7528\u81ea\u5b9a\u4e49\u5c5e\u6027: DataBindingComponent.kt \u5982\u679c\u4f60\u60f3\u66f4\u52a0\u4e86\u89e3DataBinding\u8bf7\u9605\u8bfb DataBinding\u6700\u5168\u4f7f\u7528\u8bf4\u660e","title":"\u4f7f\u7528"},{"location":"#_1","text":"rv . linear (). setup { addType < SimpleModel > ( R . layout . item_simple ) }. models = getData () \u8fd9\u91cc\u51fa\u73b0\u7684 BRV \u5173\u952e\u8bcd\u5373\u672c\u6846\u67b6, RV \u5373RecyclerView\u7b80\u79f0. setup \u51fd\u6570\u4e5f\u53ea\u662f\u7b80\u5316\u521b\u5efaBindingAdapter\u5bf9\u8c61","title":"\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5217\u8868"},{"location":"#_2","text":"BRV\u652f\u6301\u4e09\u79cd\u65b9\u5f0f, \u7075\u6d3b\u4f7f\u7528; \u8fd9\u91cc\u63d0\u53ca\u7684Model\u5c31\u7b49\u540c\u4e8e\u6570\u636e\u7c7b/JavaBean/POJO","title":"\u5217\u8868\u586b\u5145\u6570\u636e\u7684\u4e09\u79cd\u65b9\u5f0f"},{"location":"#1","text":"\u5728 onBind \u51fd\u6570\u4e2d\u586b\u5145\u6570\u636e rv . linear (). setup { addType < SimpleModel > ( R . layout . item_simple ) onBind { findView < TextView > ( R . id . tv_simple ). text = getModel < SimpleModel > (). name } }. models = getData ()","title":"1) \u51fd\u6570\u56de\u8c03"},{"location":"#2","text":"\u901a\u8fc7\u4e3aModel\u5b9e\u73b0\u63a5\u53e3 ItemBind , \u5b9e\u73b0\u51fd\u6570 onBind , \u5728\u8be5\u51fd\u6570\u4e2d\u586b\u5145\u6570\u636e; \u8fd9\u79cd\u65b9\u5f0f\u5728\u5f88\u591a\u6846\u67b6\u4e2d\u88ab\u5e94\u7528, \u4f8b\u5982BRVAH, \u4f46\u662f\u6211\u4e0d\u63a8\u8350\u8fd9\u79cd\u89c6\u56fe\u5728Model\u4e2d\u7ed1\u5b9a\u7684\u65b9\u5f0f, \u56e0\u4e3aModel\u5e94\u5f53\u53ea\u5b58\u50a8\u6570\u636e\u548c\u8ba1\u7b97\u903b\u8f91, \u4e0d\u5e94\u5305\u542b\u4efb\u4f55UI class SimpleModel ( var name : String = \"BRV\" ) : ItemBind { override fun onBind ( holder : BindingAdapter . BindingViewHolder ) { val appName = holder . context . getString ( R . string . app_name ) holder . findView < TextView > ( R . id . tv_simple ). text = appName + itemPosition } }","title":"2) \u5b9e\u73b0\u63a5\u53e3"},{"location":"#3-databinding","text":"\u901a\u8fc7DataBinding\u6570\u636e\u7ed1\u5b9a\u5f62\u5f0f\u81ea\u52a8\u586b\u5145\u6570\u636e, \u63a8\u8350, \u8fd9\u662f\u4ee3\u7801\u91cf\u6700\u5c11\u6700\u7075\u6d3b\u7684\u4e00\u79cd\u65b9\u5f0f. \u7b2c\u4e00\u6b65, \u542f\u7528DataBinding, \u5728module\u4e2d\u7684build.gradle\u6587\u4ef6\u4e2d apply plugin: \"kotlin-kapt\" // kapt\u63d2\u4ef6\u7528\u4e8e\u751f\u6210dataBinding android { /.../ buildFeatures . dataBinding = true } \u7b2c\u4e8c\u6b65, \u5728Item\u7684\u5e03\u5c40\u6587\u4ef6\u4e2d\u521b\u5efa\u53d8\u91cf, \u7136\u540e\u7ed1\u5b9a\u53d8\u91cf\u5230\u89c6\u56fe\u63a7\u4ef6\u4e0a <layout xmlns:android= \"http://schemas.android.com/apk/res/android\" > <data> <variable name= \"m\" type= \"com.drake.brv.sample.model.SimpleModel\" /> </data> <LinearLayout android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" > <FrameLayout android:id= \"@+id/item\" android:layout_width= \"match_parent\" android:layout_height= \"100dp\" android:layout_margin= \"16dp\" android:background= \"@drawable/bg_card\" android:foreground= \"?selectableItemBackgroundBorderless\" > <TextView android:id= \"@+id/tv_simple\" android:text= \"@{String.valueOf(m.name)}\" android:gravity= \"center\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> </FrameLayout> </LinearLayout> </layout> \u9009\u4e2d\u884c\u662fDataBinding\u4f7f\u7528\u65b9\u6cd5 \u7b2c\u4e09\u6b65, \u8d4b\u503c\u4e00\u4e2a\u7528\u4e8e \u81ea\u5b9a\u7ed1\u5b9a\u6570\u636e\u5230XML\u5e03\u5c40\u7684Id (DataBinding\u57fa\u7840\u77e5\u8bc6) rv\u662f\u4e00\u4e2a\u5217\u8868. \u91cc\u9762\u7684models\u662f\u4e00\u4e2alist\u96c6\u5408, \u6bcf\u4e2a\u5143\u7d20\u5bf9\u5e94\u4e00\u4e2aitem. dataBinding\u4f1a\u6839\u636e\u4f60 \u8d4b\u503c\u7684Id \u81ea\u52a8\u7ed1\u5b9amodels\u4e2d\u5143\u7d20\u5230xml\u4e2d\u8d4b\u503c \u6ce8\u610f\u8981\u5148\u5728\u67d0\u4e2a\u5e03\u5c40\u6216Item\u5e03\u5c40\u58f0\u660e <layout> \u5e03\u5c40\u4e2d\u7684\u53d8\u91cf name=\"m\" , BR.m \u624d\u80fd\u88ab\u751f\u6210 \u5bfc\u5305\u6ce8\u610f\u5bfc\u5165\u4f60\u6240\u5728module\u7684BR, \u8fd9\u6837\u6240\u6709\u4f7f\u7528\u8be5Id\u6765\u58f0\u660e\u6570\u636e\u6a21\u578b\u7684\u5e03\u5c40\u90fd\u4f1a\u88abBRV\u81ea\u52a8\u7ed1\u5b9a\u6570\u636e \u5982\u679c\u4f9d\u7136\u6ca1\u6709\u751f\u6210\u8bf7 make project (\u5373\u56fe\u4e2d\u7eff\u8272\u5c0f\u9524\u5b50\u56fe\u6807) m(m\u662fmodel\u7684\u7b80\u79f0)\u53ef\u4ee5\u662f\u4efb\u4f55\u5176\u4ed6\u7684\u540d\u79f0, model\u6216\u8005sb\u90fd\u53ef\u4ee5, \u6bd4\u5982\u4f60 name=\"data\" , \u90a3\u4e48\u4f60\u5c31\u5e94\u8be5\u4f7f\u7528BR.data BR.data\u548cAndroid\u4e2d\u5e38\u89c1\u7684 R.id.data \u90fd\u5c5e\u4e8eId\u5e38\u91cf, \u672c\u8d28\u4e0a\u90fd\u662fInt\u503c. \u4f60\u53ef\u4ee5\u70b9\u51fb\u67e5\u770bBR.m\u6e90\u7801 \u4f46\u662f\u4e00\u65e6\u58f0\u660e BRV.model = BR.m \u4f60\u7684\u6240\u6709BRV\u4f7f\u7528\u7684item\u5e03\u5c40\u90fd\u5f97\u4f7f\u7528 name=\"m\" \u6765\u58f0\u660e\u6570\u636e\u6a21\u578b, \u5426\u5219\u4f1a\u65e0\u6cd5\u81ea\u52a8\u7ed1\u5b9a \u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u5728 onBind \u91cc\u9762\u624b\u52a8\u7ed1\u5b9a, \u4f46\u662f\u80af\u5b9a\u6bd4\u81ea\u52a8\u9ebb\u70e6, \u800c\u4e14\u540d\u79f0\u672c\u8eab\u53ea\u662f\u4ee3\u53f7\u6211\u5efa\u8bae\u90fd\u4f7f\u7528m class App : Application () { override fun onCreate () { super . onCreate () // \u521d\u59cb\u5316BindingAdapter\u7684\u9ed8\u8ba4\u7ed1\u5b9aID, \u5982\u679c\u4e0d\u4f7f\u7528DataBinding\u5e76\u4e0d\u9700\u8981\u521d\u59cb\u5316 BRV . modelId = BR . m } } \u8fd9\u79cd\u65b9\u5f0f\u521b\u5efa\u5217\u8868\u65e0\u9700\u5904\u7406\u6570\u636e rv . linear (). setup { addType < SimpleModel > ( R . layout . item_simple ) }. models = getData () \u522b\u770b\u6587\u6863\u4e2d\u7b2c\u4e09\u79cd\u65b9\u5f0f\u590d\u6742, \u5b9e\u9645\u7b2c\u4e09\u79cd\u65b9\u5f0f\u4ee3\u7801\u91cf\u6700\u5c11, \u540c\u65f6\u6700\u89e3\u8026 \u4f7f\u7528DataBinding\u53ef\u4ee5\u590d\u5236\u6216\u8005\u5f15\u7528\u6211\u7684\u5e38\u7528\u81ea\u5b9a\u4e49\u5c5e\u6027: DataBindingComponent.kt \u5982\u679c\u4f60\u60f3\u66f4\u52a0\u4e86\u89e3DataBinding\u8bf7\u9605\u8bfb DataBinding\u6700\u5168\u4f7f\u7528\u8bf4\u660e","title":"3) DataBinding"},{"location":"animation/","text":"\u5217\u8868\u52a8\u753b\u53ea\u662f\u5b9e\u73b0\u5217\u8868Item\u51fa\u73b0\u7684\u52a8\u753b \u52a8\u753b\u7c7b\u578b \u00b6 \u901a\u8fc7\u51fd\u6570\u5feb\u901f\u8bbe\u7f6eBRV\u81ea\u5e26\u7684\u51e0\u79cd\u52a8\u753b\u7c7b\u578b fun setAnimation ( animationType : AnimationType ) \u4f7f\u7528 AnimationType \u679a\u4e3e \u679a\u4e3e \u52a8\u753b\u63cf\u8ff0 ALPHA \u6e10\u53d8 SCALE \u7f29\u653e\u52a8 SLIDE_BOTTOM \u5e95\u90e8\u6ed1\u5165 SLIDE_LEFT \u5de6\u4fa7\u6ed1\u5165 SLIDE_RIGHT \u53f3\u4fa7\u6ed1\u5165 \u81ea\u5b9a\u4e49\u5217\u8868\u52a8\u753b \u00b6 \u5982\u679c\u9ed8\u8ba4\u7684\u52a8\u753b\u65e0\u6cd5\u6ee1\u8db3\u4f60, \u4f60\u53ef\u4ee5\u53c2\u8003\u81ea\u5e26\u7684 ItemAnimation \u5b50\u7c7b\u52a8\u753b\u6765\u81ea\u5b9a\u4e49\u4f60\u8981\u7684\u52a8\u753b\u6548\u679c fun setAnimation ( itemAnimation : ItemAnimation ) \u8fd9\u91cc\u4ee5 AlphaItemAnimation \u6e90\u7801\u793a\u4f8b class AlphaItemAnimation @JvmOverloads constructor ( private val mFrom : Float = DEFAULT_ALPHA_FROM ) : ItemAnimation { override fun onItemEnterAnimation ( view : View ) { ObjectAnimator . ofFloat ( view , \"alpha\" , mFrom , 1f ). setDuration ( 300 ). start () // \u6e10\u53d8\u52a8\u753b } companion object { private val DEFAULT_ALPHA_FROM = 0f // \u521d\u59cb\u900f\u660e\u5ea6 } }","title":"\u5217\u8868\u52a8\u753b"},{"location":"animation/#_1","text":"\u901a\u8fc7\u51fd\u6570\u5feb\u901f\u8bbe\u7f6eBRV\u81ea\u5e26\u7684\u51e0\u79cd\u52a8\u753b\u7c7b\u578b fun setAnimation ( animationType : AnimationType ) \u4f7f\u7528 AnimationType \u679a\u4e3e \u679a\u4e3e \u52a8\u753b\u63cf\u8ff0 ALPHA \u6e10\u53d8 SCALE \u7f29\u653e\u52a8 SLIDE_BOTTOM \u5e95\u90e8\u6ed1\u5165 SLIDE_LEFT \u5de6\u4fa7\u6ed1\u5165 SLIDE_RIGHT \u53f3\u4fa7\u6ed1\u5165","title":"\u52a8\u753b\u7c7b\u578b"},{"location":"animation/#_2","text":"\u5982\u679c\u9ed8\u8ba4\u7684\u52a8\u753b\u65e0\u6cd5\u6ee1\u8db3\u4f60, \u4f60\u53ef\u4ee5\u53c2\u8003\u81ea\u5e26\u7684 ItemAnimation \u5b50\u7c7b\u52a8\u753b\u6765\u81ea\u5b9a\u4e49\u4f60\u8981\u7684\u52a8\u753b\u6548\u679c fun setAnimation ( itemAnimation : ItemAnimation ) \u8fd9\u91cc\u4ee5 AlphaItemAnimation \u6e90\u7801\u793a\u4f8b class AlphaItemAnimation @JvmOverloads constructor ( private val mFrom : Float = DEFAULT_ALPHA_FROM ) : ItemAnimation { override fun onItemEnterAnimation ( view : View ) { ObjectAnimator . ofFloat ( view , \"alpha\" , mFrom , 1f ). setDuration ( 300 ). start () // \u6e10\u53d8\u52a8\u753b } companion object { private val DEFAULT_ALPHA_FROM = 0f // \u521d\u59cb\u900f\u660e\u5ea6 } }","title":"\u81ea\u5b9a\u4e49\u5217\u8868\u52a8\u753b"},{"location":"checked/","text":"\u53ef\u7f16\u8f91/\u591a\u9009\u5217\u8868\u5728\u5f00\u53d1\u4e2d\u5f88\u5e38\u89c1, BRV\u53ef\u4ee5\u77ed\u77ed\u51e0\u884c\u4ee3\u7801\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u9009\u62e9\u6a21\u5f0f: Demo \u591a\u9009\u5217\u8868 \u00b6 \u521b\u5efa\u5217\u8868 rv . linear (). setup { addType < CheckModel > ( R . layout . item_check_mode ) }. models = getData \u4e3aModel\u521b\u5efa\u4e00\u4e2a\u5b57\u6bb5\u7528\u4e8e\u4fdd\u5b58\u9009\u62e9\u7684\u72b6\u6001 data class CheckModel ( var checked : Boolean = false , var visibility : Boolean = false ) : BaseObservable () // BaseObservable \u8fd9\u662fDataBinding\u7684\u6570\u636e\u7ed1\u5b9a\u5199\u6cd5 \u76d1\u542c\u9009\u62e9\u4e8b\u4ef6 rv . linear (). setup { addType < CheckModel > ( R . layout . item_check_mode ) onChecked { position , isChecked , isAllChecked -> val model = getModel < CheckModel > ( position ) model . checked = isChecked model . notifyChange () // \u901a\u77e5UI\u8ddf\u968f\u6570\u636e\u53d8\u5316 } }. models = getData \u89e6\u53d1\u9009\u62e9\u4e8b\u4ef6 rv . linear (). setup { addType < CheckModel > ( R . layout . item_check_mode ) onChecked { position , isChecked , isAllChecked -> val model = getModel < CheckModel > ( position ) model . checked = isChecked model . notifyChange () // \u901a\u77e5UI\u8ddf\u968f\u6570\u636e\u53d8\u5316 } onClick ( R . id . cb , R . id . item ) { var checked = ( getModel () as CheckModel ). checked setChecked ( adapterPosition , checked ) // \u5728\u70b9\u51fb\u4e8b\u4ef6\u4e2d\u89e6\u53d1\u9009\u62e9\u4e8b\u4ef6, \u5373\u70b9\u51fb\u5217\u8868\u6761\u76ee\u5c31\u9009\u4e2d } }. models = getData \u9ed8\u8ba4\u9009\u62e9 \u00b6 \u5982\u679c\u4f60\u60f3\u9ed8\u8ba4\u9009\u4e2d\u67d0\u4e9bItem, \u5e94\u5f53\u4f7f\u7528 setChecked \u51fd\u6570\u53bb\u8bbe\u7f6e, \u800c\u4e0d\u662f\u76f4\u63a5\u5728Model\u4e2d\u8bbe\u7f6e isChecked \u5c5e\u6027\u4e3atrue(\u8fd9\u662f\u4e0d\u4f1a\u89e6\u53d1\u9009\u4e2d\u56de\u8c03\u7684) \u4f8b\u5982\u5728Demo\u4e2d\u5c31\u6709\u8fd9\u4e48\u4e00\u884c\u4ee3\u7801\u9ed8\u8ba4\u9009\u4e2d\u7b2c\u4e00\u4e2aItem // \u5207\u6362\u9009\u62e9\u6a21\u5f0f tv_manage . setOnClickListener { adapter . toggle () rv . bindingAdapter . setChecked ( 0 , true ) // \u4e00\u5f00\u59cb\u5c31\u9009\u4e2d\u7b2c\u4e00\u4e2a } \u51fd\u6570 \u00b6 \u652f\u6301\u9009\u62e9\u6a21\u5f0f\u7684\u5e38\u7528\u51fd\u6570 \u51fd\u6570 \u63cf\u8ff0 allChecked \u5168\u9009\u6216\u8005\u5168\u90e8\u53d6\u6d88\u5168\u9009 singleMode \u662f\u5426\u4e3a\u5355\u9009\u6a21\u5f0f isCheckedAll \u662f\u5426\u88ab\u5168\u9009 checkedReverse \u53cd\u9009 setChecked \u6307\u5b9a\u4f4d\u7f6e\u7684\u6761\u76ee\u662f\u5426\u9009\u4e2d checkedSwitch \u5207\u6362\u9009\u4e2d\u72b6\u6001 setCheckableType \u6307\u5b9a\u7684type\u624d\u5141\u8bb8\u9009\u4e2d getCheckedModels \u5f97\u5230\u9009\u62e9\u7684\u6570\u636e\u6a21\u578b\u96c6\u5408 checkedPosition \u88ab\u9009\u62e9\u7684item\u7684position\u96c6\u5408 checkedCount \u5df2\u9009\u62e9\u6570\u91cf onChecked \u9009\u62e9\u56de\u8c03","title":"\u9009\u62e9\u6a21\u5f0f"},{"location":"checked/#_1","text":"\u521b\u5efa\u5217\u8868 rv . linear (). setup { addType < CheckModel > ( R . layout . item_check_mode ) }. models = getData \u4e3aModel\u521b\u5efa\u4e00\u4e2a\u5b57\u6bb5\u7528\u4e8e\u4fdd\u5b58\u9009\u62e9\u7684\u72b6\u6001 data class CheckModel ( var checked : Boolean = false , var visibility : Boolean = false ) : BaseObservable () // BaseObservable \u8fd9\u662fDataBinding\u7684\u6570\u636e\u7ed1\u5b9a\u5199\u6cd5 \u76d1\u542c\u9009\u62e9\u4e8b\u4ef6 rv . linear (). setup { addType < CheckModel > ( R . layout . item_check_mode ) onChecked { position , isChecked , isAllChecked -> val model = getModel < CheckModel > ( position ) model . checked = isChecked model . notifyChange () // \u901a\u77e5UI\u8ddf\u968f\u6570\u636e\u53d8\u5316 } }. models = getData \u89e6\u53d1\u9009\u62e9\u4e8b\u4ef6 rv . linear (). setup { addType < CheckModel > ( R . layout . item_check_mode ) onChecked { position , isChecked , isAllChecked -> val model = getModel < CheckModel > ( position ) model . checked = isChecked model . notifyChange () // \u901a\u77e5UI\u8ddf\u968f\u6570\u636e\u53d8\u5316 } onClick ( R . id . cb , R . id . item ) { var checked = ( getModel () as CheckModel ). checked setChecked ( adapterPosition , checked ) // \u5728\u70b9\u51fb\u4e8b\u4ef6\u4e2d\u89e6\u53d1\u9009\u62e9\u4e8b\u4ef6, \u5373\u70b9\u51fb\u5217\u8868\u6761\u76ee\u5c31\u9009\u4e2d } }. models = getData","title":"\u591a\u9009\u5217\u8868"},{"location":"checked/#_2","text":"\u5982\u679c\u4f60\u60f3\u9ed8\u8ba4\u9009\u4e2d\u67d0\u4e9bItem, \u5e94\u5f53\u4f7f\u7528 setChecked \u51fd\u6570\u53bb\u8bbe\u7f6e, \u800c\u4e0d\u662f\u76f4\u63a5\u5728Model\u4e2d\u8bbe\u7f6e isChecked \u5c5e\u6027\u4e3atrue(\u8fd9\u662f\u4e0d\u4f1a\u89e6\u53d1\u9009\u4e2d\u56de\u8c03\u7684) \u4f8b\u5982\u5728Demo\u4e2d\u5c31\u6709\u8fd9\u4e48\u4e00\u884c\u4ee3\u7801\u9ed8\u8ba4\u9009\u4e2d\u7b2c\u4e00\u4e2aItem // \u5207\u6362\u9009\u62e9\u6a21\u5f0f tv_manage . setOnClickListener { adapter . toggle () rv . bindingAdapter . setChecked ( 0 , true ) // \u4e00\u5f00\u59cb\u5c31\u9009\u4e2d\u7b2c\u4e00\u4e2a }","title":"\u9ed8\u8ba4\u9009\u62e9"},{"location":"checked/#_3","text":"\u652f\u6301\u9009\u62e9\u6a21\u5f0f\u7684\u5e38\u7528\u51fd\u6570 \u51fd\u6570 \u63cf\u8ff0 allChecked \u5168\u9009\u6216\u8005\u5168\u90e8\u53d6\u6d88\u5168\u9009 singleMode \u662f\u5426\u4e3a\u5355\u9009\u6a21\u5f0f isCheckedAll \u662f\u5426\u88ab\u5168\u9009 checkedReverse \u53cd\u9009 setChecked \u6307\u5b9a\u4f4d\u7f6e\u7684\u6761\u76ee\u662f\u5426\u9009\u4e2d checkedSwitch \u5207\u6362\u9009\u4e2d\u72b6\u6001 setCheckableType \u6307\u5b9a\u7684type\u624d\u5141\u8bb8\u9009\u4e2d getCheckedModels \u5f97\u5230\u9009\u62e9\u7684\u6570\u636e\u6a21\u578b\u96c6\u5408 checkedPosition \u88ab\u9009\u62e9\u7684item\u7684position\u96c6\u5408 checkedCount \u5df2\u9009\u62e9\u6570\u91cf onChecked \u9009\u62e9\u56de\u8c03","title":"\u51fd\u6570"},{"location":"click/","text":"\u51fd\u6570 \u00b6 \u51fd\u6570 \u63cf\u8ff0 onFastClick \u4e3a\u6307\u5b9a\u7684Id\u6dfb\u52a0\u4e8b\u4ef6\u76d1\u542c\u5668 onClick \u4e3a\u6307\u5b9a\u7684Id\u6dfb\u52a0\u70b9\u51fb\u4e8b\u4ef6\u76d1\u542c\u5668, \u4f46\u5305\u542b\u9632\u6296\u52a8(\u9ed8\u8ba4500\u6beb\u79d2\u5185\u4e0d\u5141\u8bb8\u91cd\u590d\u70b9\u51fb). \u4e5f\u53ef\u4ee5 \u8bbe\u7f6e\u95f4\u9694 onLongClick \u4e3a\u6307\u5b9a\u7684Id\u6dfb\u52a0\u957f\u6309\u4e8b\u4ef6\u76d1\u542c\u5668 \u901a\u8fc7\u4f7f\u7528Item\u7684\u5e03\u5c40\u6587\u4ef6\u4e2d\u7684\u63a7\u4ef6id\u53ef\u4ee5\u4e3a\u4efb\u4f55\u89c6\u56fe\u8bbe\u7f6e\u70b9\u51fb\u4e8b\u4ef6\u6216\u8005\u957f\u6309\u4e8b\u4ef6, Item\u7684\u70b9\u51fb\u4e8b\u4ef6\u5c31\u662f\u7ed9Item\u7684\u6839\u5e03\u5c40\u6dfb\u52a0Id. \u591a\u5bf9\u4e00\u70b9\u51fb\u4e8b\u4ef6 \u00b6 \u8fd9\u79cd\u4f7f\u7528\u9002\u7528\u4e8e\u591a\u4e2aid\u5904\u7406\u540c\u4e00\u4e2a\u70b9\u51fb\u4e1a\u52a1\u903b\u8f91 rv . linear (). setup { addType < SimpleModel > ( R . layout . item_simple ) onClick ( R . id . item ) { // Item\u8bbe\u7f6e\u70b9\u51fb\u4e8b\u4ef6, \u5c31\u8981\u7ed9Item\u7684\u6839\u5e03\u5c40\u8bbe\u7f6e\u4e00\u4e2aid, \u8fd9\u91cc\u8bbe\u7f6e\u7684\u662fR.id.item } }. models = getData () onClick\u53c2\u6570\u662f\u53ef\u53d8\u957f\u5ea6. \u53ef\u4ee5\u6307\u5b9a\u591a\u4e2aId, \u5e76\u4e14\u5b58\u5728\u8986\u76d6\u884c\u4e3a. onFastClick / onLongClick\u540c\u7406 rv . linear (). setup { addType < NormalModel > ( R . layout . item_multi_type_normal ) onLongClick ( R . id . item ) { } onClick ( R . id . btn_submit ) { // it\u5c31\u662f\u4f60\u8bbe\u7f6e\u7684id } onClick ( R . id . btn_submit ) { // \u8fd9\u4f1a\u8986\u76d6\u4e0a\u9762\u7684\u56de\u8c03\u903b\u8f91, \u56e0\u4e3a\u4e24\u8005\u8bbe\u7f6e\u7684Id\u76f8\u540c } }. models = getData () \u4e00\u5bf9\u4e00\u70b9\u51fb\u4e8b\u4ef6 \u00b6 \u65e2\u4e00\u4e2aId\u5bf9\u5e94\u4e00\u4e2a\u70b9\u51fb\u4e8b\u4ef6\u56de\u8c03. \u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u66f4\u52a0\u7b80\u6d01\u7684\u7528\u6cd5 rv . linear (). setup { addType < SimpleModel > ( R . layout . item_simple ) R . id . tv_simple . onClick { toast ( \"\u70b9\u51fbText\" ) } R . id . item . onLongClick { toast ( \"\u70b9\u51fbItem\" ) } }. models = getData () \u70b9\u51fb\u9632\u6296\u52a8 \u00b6 \u9632\u6296\u52a8 : \u4e00\u5b9a\u95f4\u9694\u65f6\u95f4\u5185\u53ea\u4f1a\u54cd\u5e94\u7b2c\u4e00\u6b21\u7684\u70b9\u51fb. \u907f\u514d\u7528\u6237\u5feb\u901f\u70b9\u51fb\u5bfc\u81f4\u91cd\u590d\u54cd\u5e94\u70b9\u51fb\u4e8b\u4ef6 BRV\u652f\u6301\u9632\u6296\u52a8\u5f88\u7b80\u5355, \u4f7f\u7528 onClick \u51fd\u6570\u8bbe\u7f6e\u76d1\u542c\u4e8b\u4ef6\u5373\u53ef, onFastClick \u5373\u4e0d\u5305\u542b\u9632\u6296\u52a8\u7684\u70b9\u51fb\u4e8b\u4ef6. \u4ee5\u4e0b\u4ee3\u7801\u53ef\u4ee5\u4fee\u6539\u9632\u6296\u52a8\u95f4\u9694\u65f6\u95f4(\u9ed8\u8ba4\u4e3a500\u6beb\u79d2) \u5168\u5c40 BRV . clickThrottle = 1000 // \u5355\u4f4d\u6beb\u79d2 \u5355\u4f8b binding . rv . linear (). setup { clickThrottle = 1000 // \u8986\u76d6\u5168\u5c40\u8bbe\u7f6e addType < SimpleModel > ( R . layout . item_simple ) R . id . item . onClick { toast ( \"\u70b9\u51fb\u6587\u672c\" ) } }. models = getData ()","title":"\u70b9\u51fb\u4e8b\u4ef6"},{"location":"click/#_1","text":"\u51fd\u6570 \u63cf\u8ff0 onFastClick \u4e3a\u6307\u5b9a\u7684Id\u6dfb\u52a0\u4e8b\u4ef6\u76d1\u542c\u5668 onClick \u4e3a\u6307\u5b9a\u7684Id\u6dfb\u52a0\u70b9\u51fb\u4e8b\u4ef6\u76d1\u542c\u5668, \u4f46\u5305\u542b\u9632\u6296\u52a8(\u9ed8\u8ba4500\u6beb\u79d2\u5185\u4e0d\u5141\u8bb8\u91cd\u590d\u70b9\u51fb). \u4e5f\u53ef\u4ee5 \u8bbe\u7f6e\u95f4\u9694 onLongClick \u4e3a\u6307\u5b9a\u7684Id\u6dfb\u52a0\u957f\u6309\u4e8b\u4ef6\u76d1\u542c\u5668 \u901a\u8fc7\u4f7f\u7528Item\u7684\u5e03\u5c40\u6587\u4ef6\u4e2d\u7684\u63a7\u4ef6id\u53ef\u4ee5\u4e3a\u4efb\u4f55\u89c6\u56fe\u8bbe\u7f6e\u70b9\u51fb\u4e8b\u4ef6\u6216\u8005\u957f\u6309\u4e8b\u4ef6, Item\u7684\u70b9\u51fb\u4e8b\u4ef6\u5c31\u662f\u7ed9Item\u7684\u6839\u5e03\u5c40\u6dfb\u52a0Id.","title":"\u51fd\u6570"},{"location":"click/#_2","text":"\u8fd9\u79cd\u4f7f\u7528\u9002\u7528\u4e8e\u591a\u4e2aid\u5904\u7406\u540c\u4e00\u4e2a\u70b9\u51fb\u4e1a\u52a1\u903b\u8f91 rv . linear (). setup { addType < SimpleModel > ( R . layout . item_simple ) onClick ( R . id . item ) { // Item\u8bbe\u7f6e\u70b9\u51fb\u4e8b\u4ef6, \u5c31\u8981\u7ed9Item\u7684\u6839\u5e03\u5c40\u8bbe\u7f6e\u4e00\u4e2aid, \u8fd9\u91cc\u8bbe\u7f6e\u7684\u662fR.id.item } }. models = getData () onClick\u53c2\u6570\u662f\u53ef\u53d8\u957f\u5ea6. \u53ef\u4ee5\u6307\u5b9a\u591a\u4e2aId, \u5e76\u4e14\u5b58\u5728\u8986\u76d6\u884c\u4e3a. onFastClick / onLongClick\u540c\u7406 rv . linear (). setup { addType < NormalModel > ( R . layout . item_multi_type_normal ) onLongClick ( R . id . item ) { } onClick ( R . id . btn_submit ) { // it\u5c31\u662f\u4f60\u8bbe\u7f6e\u7684id } onClick ( R . id . btn_submit ) { // \u8fd9\u4f1a\u8986\u76d6\u4e0a\u9762\u7684\u56de\u8c03\u903b\u8f91, \u56e0\u4e3a\u4e24\u8005\u8bbe\u7f6e\u7684Id\u76f8\u540c } }. models = getData ()","title":"\u591a\u5bf9\u4e00\u70b9\u51fb\u4e8b\u4ef6"},{"location":"click/#_3","text":"\u65e2\u4e00\u4e2aId\u5bf9\u5e94\u4e00\u4e2a\u70b9\u51fb\u4e8b\u4ef6\u56de\u8c03. \u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u66f4\u52a0\u7b80\u6d01\u7684\u7528\u6cd5 rv . linear (). setup { addType < SimpleModel > ( R . layout . item_simple ) R . id . tv_simple . onClick { toast ( \"\u70b9\u51fbText\" ) } R . id . item . onLongClick { toast ( \"\u70b9\u51fbItem\" ) } }. models = getData ()","title":"\u4e00\u5bf9\u4e00\u70b9\u51fb\u4e8b\u4ef6"},{"location":"click/#_4","text":"\u9632\u6296\u52a8 : \u4e00\u5b9a\u95f4\u9694\u65f6\u95f4\u5185\u53ea\u4f1a\u54cd\u5e94\u7b2c\u4e00\u6b21\u7684\u70b9\u51fb. \u907f\u514d\u7528\u6237\u5feb\u901f\u70b9\u51fb\u5bfc\u81f4\u91cd\u590d\u54cd\u5e94\u70b9\u51fb\u4e8b\u4ef6 BRV\u652f\u6301\u9632\u6296\u52a8\u5f88\u7b80\u5355, \u4f7f\u7528 onClick \u51fd\u6570\u8bbe\u7f6e\u76d1\u542c\u4e8b\u4ef6\u5373\u53ef, onFastClick \u5373\u4e0d\u5305\u542b\u9632\u6296\u52a8\u7684\u70b9\u51fb\u4e8b\u4ef6. \u4ee5\u4e0b\u4ee3\u7801\u53ef\u4ee5\u4fee\u6539\u9632\u6296\u52a8\u95f4\u9694\u65f6\u95f4(\u9ed8\u8ba4\u4e3a500\u6beb\u79d2) \u5168\u5c40 BRV . clickThrottle = 1000 // \u5355\u4f4d\u6beb\u79d2 \u5355\u4f8b binding . rv . linear (). setup { clickThrottle = 1000 // \u8986\u76d6\u5168\u5c40\u8bbe\u7f6e addType < SimpleModel > ( R . layout . item_simple ) R . id . item . onClick { toast ( \"\u70b9\u51fb\u6587\u672c\" ) } }. models = getData ()","title":"\u70b9\u51fb\u9632\u6296\u52a8"},{"location":"component/","text":"BRV\u6846\u67b6\u5e76\u4e0d\u5f71\u54cd\u539f\u6709rv\u529f\u80fd\u548c\u7ec4\u4ef6\u4f7f\u7528. \u8fd9\u91cc\u5217\u4e3e\u4e00\u4e9b\u5e38\u7528\u6216\u8005\u63a8\u8350\u7684\u7b2c\u4e09\u65b9\u6846\u67b6\u4f7f\u7528\u6848\u4f8b \u975e\u5e38\u6b22\u8fce\u7f16\u8f91\u8d21\u732e\u66f4\u597d\u7684\u6269\u5c55\u6846\u67b6, \u70b9\u51fb\u6587\u6863\u53f3\u4e0a\u89d2\u5c0f\u94c5\u7b14\u53ef\u76f4\u63a5\u4fee\u8ba2\u672c\u9875\u9762 \u2197 \u6846\u67b6 \u63cf\u8ff0 looping-layout \u5faa\u73af\u6eda\u52a8\u5217\u8868 PathLayoutManager \u81ea\u5b9a\u4e49\u5217\u8868\u6eda\u52a8\u8f68\u8ff9 ZLayoutManager \u4eff\u63a2\u63a2\u5361\u7247\u5806\u53e0\u5207\u6362 CarouselLayoutManager \u5361\u7247\u5782\u76f4/\u6c34\u5e73\u5806\u53e0\u5207\u6362 FanLayoutManager \u5c01\u9762\u5217\u8868 PagerGridLayoutManager \u7f51\u683c\u5206\u9875\u5217\u8868 ZoomRecylerLayout \u6ed1\u52a8\u65f6\u7f29\u653e\u6548\u679c\u5217\u8868 Linkage-RecyclerView \u4e8c\u7ea7\u8054\u52a8\u5217\u8868 SwipeToActionLayout \u5217\u8868\u4fa7\u6ed1\u6309\u94ae flexbox-layout \u8c37\u6b4c\u51fa\u54c1\u7684FlexBox\u6d41\u5f0f\u5e03\u5c40(\u4f38\u7f29\u5e03\u5c40)","title":"\u7b2c\u4e09\u65b9\u7ec4\u4ef6"},{"location":"divider-grid/","text":"\u652f\u6301 GridLayoutManager \u7684\u7f51\u683c\u5e03\u5c40\u7684\u5206\u5272\u7ebf \u7531\u4e8e\u7f51\u683c\u5206\u5272\u7ebf\u662f\u52a8\u6001\u8ba1\u7b97\u7684, \u6240\u4ee5\u5728RecyclerView\u4e2d\u5047\u8bbe\u4f60\u6dfb\u52a0\u65b0\u7684\u6570\u636e\u4f7f\u7528\u5c40\u90e8\u5237\u65b0\u51fd\u6570(notifyItem*\u7b49\u51fd\u6570)\u4ee5\u540e\u53ef\u80fd\u9700\u8981\u4f7f\u7528 rv.invalidateItemDecorations() \u5237\u65b0\u5206\u9694\u7269, \u5426\u5219\u53ef\u80fd\u4f1a\u5206\u5272\u7ebf\u5bbd\u9ad8\u9519\u4e71 \u6c34\u5e73\u5206\u5272\u7ebf \u00b6 rv . grid ( 3 ). divider ( R . drawable . divider_horizontal ). setup { addType < DividerModel > ( R . layout . item_divider_horizontal ) }. models = getData () \u5782\u76f4\u5206\u5272\u7ebf \u00b6 rv . grid ( 3 , RecyclerView . HORIZONTAL ) . divider ( R . drawable . divider_vertical , DividerOrientation . VERTICAL ) . setup { addType < DividerModel > ( R . layout . item_divider_vertical ) }. models = getData () \u7f51\u683c\u5206\u5272\u7ebf \u00b6 rv . grid ( 3 ). divider { setDrawable ( R . drawable . divider_horizontal ) orientation = DividerOrientation . GRID }. setup { addType < DividerModel > ( R . layout . item_divider_horizontal ) }. models = getData () \u8fb9\u7f18\u5206\u5272\u7ebf \u00b6 \u901a\u8fc7\u4e24\u4e2a\u5b57\u6bb5\u53ef\u4ee5\u63a7\u5236\u8fb9\u7f18\u5206\u5272\u7ebf\u662f\u5426\u663e\u793a \u5b57\u6bb5 \u63cf\u8ff0 startVisible \u662f\u5426\u663e\u793a\u4e0a\u4e0b\u8fb9\u7f18\u5206\u5272\u7ebf endVisible \u662f\u5426\u663e\u793a\u5de6\u53f3\u8fb9\u7f18\u5206\u5272\u7ebf includeVisible \u662f\u5426\u663e\u793a\u5468\u56f4\u5206\u5272\u7ebf 1) \u4e0a\u4e0b \u00b6 rv . grid ( 3 ). divider { setDrawable ( R . drawable . divider_horizontal ) orientation = DividerOrientation . GRID startVisible = true }. setup { addType < DividerModel > ( R . layout . item_divider_horizontal ) }. models = getData () 2) \u5de6\u53f3 \u00b6 rv . grid ( 3 ). divider { setDrawable ( R . drawable . divider_horizontal ) orientation = DividerOrientation . GRID endVisible = true }. setup { addType < DividerModel > ( R . layout . item_divider_horizontal ) }. models = getData () 3) \u56db\u5468 \u00b6 rv . grid ( 3 ). divider { setDrawable ( R . drawable . divider_horizontal ) orientation = DividerOrientation . GRID startVisible = true endVisible = true }. setup { addType < DividerModel > ( R . layout . item_divider_horizontal ) }. models = getData () \u7f51\u683c\u60ac\u505c\u5747\u5e03\u95f4\u9694 \u00b6 \u8fd9\u91cc\u5efa\u8bae\u4f7f\u7528\u5d4c\u5957\u5217\u8868\u5b8c\u6210, \u907f\u514d\u5206\u5272\u7ebf\u51fa\u73b0\u95ee\u9898. \u8fd9\u79cd\u9700\u6c42\u6bd4\u8f83\u5e38\u89c1\u6240\u4ee5\u6f14\u793a\u5b9e\u73b0\u601d\u8def binding . rv . linear (). setup { onCreate { if ( it == R . layout . item_simple_list ) { // \u6784\u5efa\u5d4c\u5957\u7f51\u683c\u5217\u8868 findView < RecyclerView > ( R . id . rv ). divider { // \u6784\u5efa\u95f4\u8ddd setDivider ( 20 ) includeVisible = true orientation = DividerOrientation . GRID }. grid ( 2 ). setup { addType < Model > ( R . layout . item_multi_type_simple_none_margin ) } } } onBind { if ( itemViewType == R . layout . item_simple_list ) { // \u4e3a\u5d4c\u5957\u7684\u7f51\u683c\u5217\u8868\u8d4b\u503c\u6570\u636e findView < RecyclerView > ( R . id . rv ). models = getModel < NestedGroupModel > (). itemSublist } } addType < NestedGroupModel > ( R . layout . item_simple_list ) addType < HoverHeaderModel > ( R . layout . item_hover_header ) }. models = getData ()","title":"\u7f51\u683c\u5217\u8868"},{"location":"divider-grid/#_1","text":"rv . grid ( 3 ). divider ( R . drawable . divider_horizontal ). setup { addType < DividerModel > ( R . layout . item_divider_horizontal ) }. models = getData ()","title":"\u6c34\u5e73\u5206\u5272\u7ebf"},{"location":"divider-grid/#_2","text":"rv . grid ( 3 , RecyclerView . HORIZONTAL ) . divider ( R . drawable . divider_vertical , DividerOrientation . VERTICAL ) . setup { addType < DividerModel > ( R . layout . item_divider_vertical ) }. models = getData ()","title":"\u5782\u76f4\u5206\u5272\u7ebf"},{"location":"divider-grid/#_3","text":"rv . grid ( 3 ). divider { setDrawable ( R . drawable . divider_horizontal ) orientation = DividerOrientation . GRID }. setup { addType < DividerModel > ( R . layout . item_divider_horizontal ) }. models = getData ()","title":"\u7f51\u683c\u5206\u5272\u7ebf"},{"location":"divider-grid/#_4","text":"\u901a\u8fc7\u4e24\u4e2a\u5b57\u6bb5\u53ef\u4ee5\u63a7\u5236\u8fb9\u7f18\u5206\u5272\u7ebf\u662f\u5426\u663e\u793a \u5b57\u6bb5 \u63cf\u8ff0 startVisible \u662f\u5426\u663e\u793a\u4e0a\u4e0b\u8fb9\u7f18\u5206\u5272\u7ebf endVisible \u662f\u5426\u663e\u793a\u5de6\u53f3\u8fb9\u7f18\u5206\u5272\u7ebf includeVisible \u662f\u5426\u663e\u793a\u5468\u56f4\u5206\u5272\u7ebf","title":"\u8fb9\u7f18\u5206\u5272\u7ebf"},{"location":"divider-grid/#1","text":"rv . grid ( 3 ). divider { setDrawable ( R . drawable . divider_horizontal ) orientation = DividerOrientation . GRID startVisible = true }. setup { addType < DividerModel > ( R . layout . item_divider_horizontal ) }. models = getData ()","title":"1) \u4e0a\u4e0b"},{"location":"divider-grid/#2","text":"rv . grid ( 3 ). divider { setDrawable ( R . drawable . divider_horizontal ) orientation = DividerOrientation . GRID endVisible = true }. setup { addType < DividerModel > ( R . layout . item_divider_horizontal ) }. models = getData ()","title":"2) \u5de6\u53f3"},{"location":"divider-grid/#3","text":"rv . grid ( 3 ). divider { setDrawable ( R . drawable . divider_horizontal ) orientation = DividerOrientation . GRID startVisible = true endVisible = true }. setup { addType < DividerModel > ( R . layout . item_divider_horizontal ) }. models = getData ()","title":"3) \u56db\u5468"},{"location":"divider-grid/#_5","text":"\u8fd9\u91cc\u5efa\u8bae\u4f7f\u7528\u5d4c\u5957\u5217\u8868\u5b8c\u6210, \u907f\u514d\u5206\u5272\u7ebf\u51fa\u73b0\u95ee\u9898. \u8fd9\u79cd\u9700\u6c42\u6bd4\u8f83\u5e38\u89c1\u6240\u4ee5\u6f14\u793a\u5b9e\u73b0\u601d\u8def binding . rv . linear (). setup { onCreate { if ( it == R . layout . item_simple_list ) { // \u6784\u5efa\u5d4c\u5957\u7f51\u683c\u5217\u8868 findView < RecyclerView > ( R . id . rv ). divider { // \u6784\u5efa\u95f4\u8ddd setDivider ( 20 ) includeVisible = true orientation = DividerOrientation . GRID }. grid ( 2 ). setup { addType < Model > ( R . layout . item_multi_type_simple_none_margin ) } } } onBind { if ( itemViewType == R . layout . item_simple_list ) { // \u4e3a\u5d4c\u5957\u7684\u7f51\u683c\u5217\u8868\u8d4b\u503c\u6570\u636e findView < RecyclerView > ( R . id . rv ). models = getModel < NestedGroupModel > (). itemSublist } } addType < NestedGroupModel > ( R . layout . item_simple_list ) addType < HoverHeaderModel > ( R . layout . item_hover_header ) }. models = getData ()","title":"\u7f51\u683c\u60ac\u505c\u5747\u5e03\u95f4\u9694"},{"location":"divider-linear/","text":"\u5982\u679c\u76f4\u63a5\u7ed8\u5236item\u7684xml\u53ef\u4ee5\u5b9e\u73b0\u5206\u5272\u7ebf, \u6bd4\u5982\u4f60\u5728xml\u4e2d\u4f7f\u7528\u7b80\u5355\u7684 layout_margin (\u8bbe\u7f6e\u95f4\u8ddd)\u4e5f\u80fd\u5b8c\u6210\u4f60\u60f3\u8981\u7684\u5206\u5272\u7ebf\u6548\u679c, \u90a3\u4e48\u6211\u66f4\u5efa\u8bae\u4f7f\u7528layout_margin \u7531\u4e8e\u7f51\u683c\u5206\u5272\u7ebf\u662f\u52a8\u6001\u8ba1\u7b97\u7684, \u6240\u4ee5\u5728RecyclerView\u4e2d\u5047\u8bbe\u4f60\u6dfb\u52a0\u65b0\u7684\u6570\u636e\u4f7f\u7528\u5c40\u90e8\u5237\u65b0\u51fd\u6570(notifyItem*\u7b49\u51fd\u6570)\u4ee5\u540e\u53ef\u80fd\u9700\u8981\u4f7f\u7528 rv.invalidateItemDecorations() \u5237\u65b0\u5206\u9694\u7269, \u5426\u5219\u53ef\u80fd\u4f1a\u5206\u5272\u7ebf\u5bbd\u9ad8\u9519\u4e71 \u6c34\u5e73\u5206\u5272\u7ebf \u00b6 \u521b\u5efa\u4e00\u4e2a drawable \u6587\u4ef6\u6765\u63cf\u8ff0\u5206\u9694\u7ebf, \u5176\u5177\u5907\u590d\u7528\u7684\u7279\u70b9 <shape xmlns:android= \"http://schemas.android.com/apk/res/android\" > <solid android:color= \"@color/dividerDecoration\" /> <size android:height= \"5dp\" /> </shape> \u521b\u5efa\u5217\u8868 rv . linear (). divider ( R . drawable . divider_horizontal ). setup { addType < DividerModel > ( R . layout . item_divider ) }. models = getData () \u5782\u76f4\u5206\u5272\u7ebf \u00b6 \u521b\u5efaDrawable\u4f5c\u4e3a\u5206\u9694\u7ebf <shape xmlns:android= \"http://schemas.android.com/apk/res/android\" > <solid android:color= \"@color/dividerDecoration\" /> <size android:width= \"5dp\" /> </shape> \u521b\u5efa\u5217\u8868 rv . linear ( RecyclerView . HORIZONTAL ). divider ( R . drawable . divider_vertical ). setup { addType < DividerModel > ( R . layout . item_divider_vertical ) }. models = getData () \u8fd9\u91cc\u4f7f\u7528 Drawable \u8d44\u6e90\u6765\u5feb\u901f\u8bbe\u7f6e\u5206\u5272\u7ebf, Drawable\u7684\u5bbd\u9ad8\u5c31\u662f\u5206\u5272\u7ebf\u7684\u5bbd\u9ad8 \u5982\u679c\u6c34\u5e73\u5206\u5272\u7ebf, \u5219Drawable\u7684\u5bbd\u5ea6\u503c\u65e0\u6548(\u5b9e\u9645\u5bbd\u5ea6\u503c\u4e3aRecyclerView\u7684\u5bbd) \u5982\u679c\u5782\u76f4\u5206\u5272\u7ebf, \u5219Drawable\u7684\u9ad8\u5ea6\u503c\u65e0\u6548(\u5b9e\u9645\u5206\u5272\u7ebf\u9ad8\u5ea6\u4e3aRecyclerView\u9ad8\u5ea6) \u8fb9\u7f18\u5206\u5272\u7ebf \u00b6 \u5b57\u6bb5 \u63cf\u8ff0 startVisible \u662f\u5426\u663e\u793a\u9996\u90e8\u5206\u5272\u7ebf endVisible \u662f\u5426\u663e\u793a\u5c3e\u90e8\u5206\u5272\u7ebf includeVisible \u662f\u5426\u663e\u793a\u9996\u5c3e\u5206\u5272\u7ebf \u901a\u8fc7\u4e24\u4e2a\u5b57\u6bb5\u53ef\u4ee5\u63a7\u5236\u9996\u5c3e\u662f\u5426\u663e\u793a\u5206\u5272\u7ebf rv . linear (). divider { setDrawable ( R . drawable . divider_horizontal ) startVisible = true endVisible = true }. setup { addType < DividerModel > ( R . layout . item_divider_horizontal ) }. models = getData () \u56db\u5468\u5168\u5305\u88f9 \u00b6 \u8fd9\u79cd\u5206\u5272\u7ebf\u5c5e\u4e8e\u7f51\u683c\u5206\u5272\u7ebf, \u8981\u6c42\u4f7f\u7528 DividerOrientation.GRID , \u4f46LinearLayoutManager\u5e76\u4e0d\u652f\u6301 \u8fd9\u91cc\u6709\u4e24\u79cd\u89e3\u51b3\u529e\u6cd5 \u4f7f\u7528spanCount\u4e3a1\u7684GridLayoutManager\u7b49\u6548 \u5728rv\u4e24\u4fa7\u5355\u72ec\u4f7f\u7528 View \u7ed8\u5236\u4e24\u6761\u5206\u5272\u7ebf \u63a8\u8350\u7b2c\u4e00\u79cd\u529e\u6cd5, \u793a\u4f8b\u4ee3\u7801\u5982\u4e0b: rv . grid (). divider { setDrawable ( R . drawable . divider_horizontal ) orientation = DividerOrientation . GRID includeVisible = true }. setup { addType < DividerModel > ( R . layout . item_divider_vertical ) }. models = getData ()","title":"\u7ebf\u6027\u5217\u8868"},{"location":"divider-linear/#_1","text":"\u521b\u5efa\u4e00\u4e2a drawable \u6587\u4ef6\u6765\u63cf\u8ff0\u5206\u9694\u7ebf, \u5176\u5177\u5907\u590d\u7528\u7684\u7279\u70b9 <shape xmlns:android= \"http://schemas.android.com/apk/res/android\" > <solid android:color= \"@color/dividerDecoration\" /> <size android:height= \"5dp\" /> </shape> \u521b\u5efa\u5217\u8868 rv . linear (). divider ( R . drawable . divider_horizontal ). setup { addType < DividerModel > ( R . layout . item_divider ) }. models = getData ()","title":"\u6c34\u5e73\u5206\u5272\u7ebf"},{"location":"divider-linear/#_2","text":"\u521b\u5efaDrawable\u4f5c\u4e3a\u5206\u9694\u7ebf <shape xmlns:android= \"http://schemas.android.com/apk/res/android\" > <solid android:color= \"@color/dividerDecoration\" /> <size android:width= \"5dp\" /> </shape> \u521b\u5efa\u5217\u8868 rv . linear ( RecyclerView . HORIZONTAL ). divider ( R . drawable . divider_vertical ). setup { addType < DividerModel > ( R . layout . item_divider_vertical ) }. models = getData () \u8fd9\u91cc\u4f7f\u7528 Drawable \u8d44\u6e90\u6765\u5feb\u901f\u8bbe\u7f6e\u5206\u5272\u7ebf, Drawable\u7684\u5bbd\u9ad8\u5c31\u662f\u5206\u5272\u7ebf\u7684\u5bbd\u9ad8 \u5982\u679c\u6c34\u5e73\u5206\u5272\u7ebf, \u5219Drawable\u7684\u5bbd\u5ea6\u503c\u65e0\u6548(\u5b9e\u9645\u5bbd\u5ea6\u503c\u4e3aRecyclerView\u7684\u5bbd) \u5982\u679c\u5782\u76f4\u5206\u5272\u7ebf, \u5219Drawable\u7684\u9ad8\u5ea6\u503c\u65e0\u6548(\u5b9e\u9645\u5206\u5272\u7ebf\u9ad8\u5ea6\u4e3aRecyclerView\u9ad8\u5ea6)","title":"\u5782\u76f4\u5206\u5272\u7ebf"},{"location":"divider-linear/#_3","text":"\u5b57\u6bb5 \u63cf\u8ff0 startVisible \u662f\u5426\u663e\u793a\u9996\u90e8\u5206\u5272\u7ebf endVisible \u662f\u5426\u663e\u793a\u5c3e\u90e8\u5206\u5272\u7ebf includeVisible \u662f\u5426\u663e\u793a\u9996\u5c3e\u5206\u5272\u7ebf \u901a\u8fc7\u4e24\u4e2a\u5b57\u6bb5\u53ef\u4ee5\u63a7\u5236\u9996\u5c3e\u662f\u5426\u663e\u793a\u5206\u5272\u7ebf rv . linear (). divider { setDrawable ( R . drawable . divider_horizontal ) startVisible = true endVisible = true }. setup { addType < DividerModel > ( R . layout . item_divider_horizontal ) }. models = getData ()","title":"\u8fb9\u7f18\u5206\u5272\u7ebf"},{"location":"divider-linear/#_4","text":"\u8fd9\u79cd\u5206\u5272\u7ebf\u5c5e\u4e8e\u7f51\u683c\u5206\u5272\u7ebf, \u8981\u6c42\u4f7f\u7528 DividerOrientation.GRID , \u4f46LinearLayoutManager\u5e76\u4e0d\u652f\u6301 \u8fd9\u91cc\u6709\u4e24\u79cd\u89e3\u51b3\u529e\u6cd5 \u4f7f\u7528spanCount\u4e3a1\u7684GridLayoutManager\u7b49\u6548 \u5728rv\u4e24\u4fa7\u5355\u72ec\u4f7f\u7528 View \u7ed8\u5236\u4e24\u6761\u5206\u5272\u7ebf \u63a8\u8350\u7b2c\u4e00\u79cd\u529e\u6cd5, \u793a\u4f8b\u4ee3\u7801\u5982\u4e0b: rv . grid (). divider { setDrawable ( R . drawable . divider_horizontal ) orientation = DividerOrientation . GRID includeVisible = true }. setup { addType < DividerModel > ( R . layout . item_divider_vertical ) }. models = getData ()","title":"\u56db\u5468\u5168\u5305\u88f9"},{"location":"divider-other/","text":"BRV\u7684\u5206\u5272\u7ebf\u51fd\u6570 divider \u90fd\u662f\u901a\u8fc7\u521b\u5efa DefaultDecoration \u6765\u5b9e\u73b0\u7684. \u5982\u679c\u60f3\u8bbf\u95ee\u66f4\u591a\u529f\u80fd\u8bf7\u67e5\u770b\u8be5\u7c7b\u516c\u5f00\u51fd\u6570 \u5047\u8bbe\u81ea\u5e26\u7684\u5206\u5272\u7ebf\u529f\u80fd\u4e0d\u6ee1\u8db3\u4f60\u7684\u8981\u6c42\u4f60\u53ef\u4ee5\u7ee7\u627f RecyclerView.ItemDecoration \u5b9e\u73b0 \u51fd\u6570 \u63cf\u8ff0 onEnabled \u662f\u5426\u4e3a\u5f53\u524dItem\u542f\u7528\u5206\u5272\u7ebf addType \u5047\u8bbe\u4f7f\u7528\u8be5\u51fd\u6570\u5219\u53ea\u6709\u88ab\u6dfb\u52a0\u7684\u7c7b\u578b\u624d\u4f1a\u7ed8\u5236\u5206\u5272\u7ebf setColor \u8bbe\u7f6e\u5206\u5272\u7ebf\u989c\u8272 setDrawable \u8bbe\u7f6e\u5206\u5272\u7ebf\u56fe\u7247 setBackground \u8bbe\u7f6e\u5206\u5272\u7ebf\u80cc\u666f\u989c\u8272 setMargin \u8bbe\u7f6e\u5206\u5272\u7ebf\u95f4\u8ddd \u5176\u4e2d\u6709\u4e00\u4e2a\u5de5\u5177\u7c7b\u53ef\u4ee5\u8ba1\u7b97\u51faItem\u4f4d\u4e8e\u5217\u8868\u7684\u8fb9\u7f18\u4f4d\u7f6e, \u53ef\u4ee5\u7528\u4e8e\u6765\u8bbe\u7f6e\u95f4\u8ddd, \u5373 Edge.computeEdge() \u8fd4\u56de\u7ed3\u679c\u4e3a Edge data class Edge ( var left : Boolean = false , var top : Boolean = false , var right : Boolean = false , var bottom : Boolean = false ) left\u4e3atrue\u5219\u8868\u793a\u6307\u5b9aposition\u4f4d\u4e8e\u5217\u8868\u5de6\u4fa7, top\u4e3atrue\u5219\u8868\u793a\u6307\u5b9aposition\u4f4d\u4e8e\u5217\u8868\u9876\u90e8, \u5176\u4ed6\u7c7b\u63a8. \u5373\u53ef\u6839\u636e\u5176\u7ed3\u679c\u6765\u8bbe\u7f6eItemView\u7684\u95f4\u8ddd","title":"\u81ea\u5b9a\u4e49"},{"location":"divider-staggerd/","text":"\u7011\u5e03\u6d41\u5206\u5272\u7ebf \u7531\u4e8e\u7f51\u683c\u5206\u5272\u7ebf\u662f\u52a8\u6001\u8ba1\u7b97\u7684, \u6240\u4ee5\u5728RecyclerView\u4e2d\u5047\u8bbe\u4f60\u6dfb\u52a0\u65b0\u7684\u6570\u636e\u4f7f\u7528\u5c40\u90e8\u5237\u65b0\u51fd\u6570(notifyItem*\u7b49\u51fd\u6570)\u4ee5\u540e\u53ef\u80fd\u9700\u8981\u4f7f\u7528 rv.invalidateItemDecorations() \u5237\u65b0\u5206\u9694\u7269, \u5426\u5219\u53ef\u80fd\u4f1a\u5206\u5272\u7ebf\u5bbd\u9ad8\u9519\u4e71 rv . staggered ( 3 ). divider ( R . drawable . divider_horizontal ). setup { addType < DividerModel > ( R . layout . item_divider_horizontal ) onBind { // \u6a21\u62df\u52a8\u6001\u9ad8\u5ea6 val layoutParams = itemView . layoutParams layoutParams . height = getModel < DividerModel > (). height itemView . layoutParams = layoutParams } }. models = getData () \u8fb9\u7f18\u5206\u5272\u7ebf \u00b6 \u901a\u8fc7\u4e24\u4e2a\u5b57\u6bb5\u53ef\u4ee5\u63a7\u5236\u8fb9\u7f18\u5206\u5272\u7ebf\u662f\u5426\u663e\u793a \u5b57\u6bb5 \u63cf\u8ff0 startVisible \u662f\u5426\u663e\u793a\u4e0a\u4e0b\u8fb9\u7f18\u5206\u5272\u7ebf endVisible \u662f\u5426\u663e\u793a\u5de6\u53f3\u8fb9\u7f18\u5206\u5272\u7ebf includeVisible \u662f\u5426\u663e\u793a\u5468\u56f4\u5206\u5272\u7ebf","title":"\u7011\u5e03\u6d41\u5217\u8868"},{"location":"divider-staggerd/#_1","text":"\u901a\u8fc7\u4e24\u4e2a\u5b57\u6bb5\u53ef\u4ee5\u63a7\u5236\u8fb9\u7f18\u5206\u5272\u7ebf\u662f\u5426\u663e\u793a \u5b57\u6bb5 \u63cf\u8ff0 startVisible \u662f\u5426\u663e\u793a\u4e0a\u4e0b\u8fb9\u7f18\u5206\u5272\u7ebf endVisible \u662f\u5426\u663e\u793a\u5de6\u53f3\u8fb9\u7f18\u5206\u5272\u7ebf includeVisible \u662f\u5426\u663e\u793a\u5468\u56f4\u5206\u5272\u7ebf","title":"\u8fb9\u7f18\u5206\u5272\u7ebf"},{"location":"drag/","text":"\u4e3a\u6570\u636e\u6a21\u578b\u5b9e\u73b0\u63a5\u53e3 ItemDrag \u5373\u53ef\u5f00\u542f\u62d6\u62fd\u529f\u80fd data class DragModel ( override var itemOrientationDrag : Int = ItemOrientation . ALL ) : ItemDrag \u6ce8\u610f\u5982\u679c\u4f60\u7684\u6570\u636e\u6a21\u578b\u88abGson\u53cd\u5e8f\u5217\u5316\u540e, \u4f1a\u5220\u9664\u6240\u6709\u7684\u5b57\u6bb5\u521d\u59cb\u5316\u503c \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u91cd\u5199\u8bbf\u95ee\u51fd\u6570\u6765\u89e3\u51b3\u95ee\u9898, \u8ba9\u8be5\u503c\u56fa\u5b9a\u8fd4\u56de class DragModel () : ItemDrag { override var itemOrientationDrag : Int = 0 get () = ItemOrientation . ALL // \u53ea\u4f1a\u8fd4\u56de\u8be5\u503c } ItemOrientation \u00b6 \u8be5\u7c7b\u5305\u542b\u62d6\u62fd\u53ef\u914d\u7f6e\u7684\u65b9\u5411 \u5b57\u6bb5 \u63cf\u8ff0 ALL \u5168\u90e8\u65b9\u5411 VERTICAL \u5782\u76f4\u65b9\u5411 HORIZONTAL \u6c34\u5e73\u65b9\u5411 LEFT \u5411\u5de6 RIGHT \u5411\u53f3 UP \u5411\u4e0a DOWN \u5411\u4e0b NONE \u7981\u7528 \u81ea\u5b9a\u4e49 \u00b6 \u5982\u679c\u60f3\u8981\u6269\u5c55ItemTouchHelper\u6216\u76d1\u542c\u53ef\u4ee5\u7ed9BindingAdapter\u7684\u53d8\u91cf itemTouchHelper \u8d4b\u503c rv . linear (). setup { addType < Model > ( R . layout . item ) itemTouchHelper = ItemTouchHelper ( object : DefaultItemTouchCallback ( this ) { /** * \u5f53\u62d6\u62fd\u52a8\u4f5c\u5b8c\u6210\u4e14\u677e\u5f00\u624b\u6307\u65f6\u89e6\u53d1 */ open fun onDrag ( source : BindingAdapter . BindingViewHolder , target : BindingAdapter . BindingViewHolder ) { // \u8fd9\u662f\u62d6\u62fd\u4ea4\u6362\u540e\u56de\u8c03, \u8fd9\u91cc\u53ef\u4ee5\u540c\u6b65\u670d\u52a1\u5668 } }) }. models = data DefaultItemTouchCallback \u662fBRV\u5185\u90e8\u7684\u89e6\u6478\u4e8b\u4ef6\u5904\u7406, \u4f60\u53ef\u4ee5\u8986\u5199\u4ed6\u6216\u8005\u76f4\u63a5 ItemTouchHelper.Callback \u70b9\u51fb\u62d6\u62fd \u00b6 \u76f4\u63a5\u70b9\u51fbItem\u5f00\u59cb\u62d6\u62fd\u4f1a\u5b58\u5728\u624b\u52bf\u51b2\u7a81\u95ee\u9898, \u56e0\u4e3a\u6ed1\u52a8\u5217\u8868\u548c\u62d6\u62fd\u6392\u5e8f\u90fd\u662f\u79fb\u52a8\u624b\u52bf. \u6240\u4ee5\u5efa\u8bae\u4f60\u62d6\u62fditem\u7684\u67d0\u4e2a\u5c0f\u56fe\u6807\u5f00\u59cb\u62d6\u62fd(\u62d6\u62fditem\u5219\u6ed1\u52a8\u5217\u8868) \u793a\u4f8b\u4ee3\u7801 rv . linear (). setup { addType < DragModel > ( R . layout . item_drag ) onBind { findView < View > ( R . id . btnDrag ). setOnTouchListener { _ , event -> if ( event . action == MotionEvent . ACTION_DOWN ) { // \u5982\u679c\u624b\u6307\u6309\u4e0b\u5219\u5f00\u59cb\u62d6\u62fd itemTouchHelper ?. startDrag ( this ) } true } } }. models = getData ()","title":"\u62d6\u62fd"},{"location":"drag/#itemorientation","text":"\u8be5\u7c7b\u5305\u542b\u62d6\u62fd\u53ef\u914d\u7f6e\u7684\u65b9\u5411 \u5b57\u6bb5 \u63cf\u8ff0 ALL \u5168\u90e8\u65b9\u5411 VERTICAL \u5782\u76f4\u65b9\u5411 HORIZONTAL \u6c34\u5e73\u65b9\u5411 LEFT \u5411\u5de6 RIGHT \u5411\u53f3 UP \u5411\u4e0a DOWN \u5411\u4e0b NONE \u7981\u7528","title":"ItemOrientation"},{"location":"drag/#_1","text":"\u5982\u679c\u60f3\u8981\u6269\u5c55ItemTouchHelper\u6216\u76d1\u542c\u53ef\u4ee5\u7ed9BindingAdapter\u7684\u53d8\u91cf itemTouchHelper \u8d4b\u503c rv . linear (). setup { addType < Model > ( R . layout . item ) itemTouchHelper = ItemTouchHelper ( object : DefaultItemTouchCallback ( this ) { /** * \u5f53\u62d6\u62fd\u52a8\u4f5c\u5b8c\u6210\u4e14\u677e\u5f00\u624b\u6307\u65f6\u89e6\u53d1 */ open fun onDrag ( source : BindingAdapter . BindingViewHolder , target : BindingAdapter . BindingViewHolder ) { // \u8fd9\u662f\u62d6\u62fd\u4ea4\u6362\u540e\u56de\u8c03, \u8fd9\u91cc\u53ef\u4ee5\u540c\u6b65\u670d\u52a1\u5668 } }) }. models = data DefaultItemTouchCallback \u662fBRV\u5185\u90e8\u7684\u89e6\u6478\u4e8b\u4ef6\u5904\u7406, \u4f60\u53ef\u4ee5\u8986\u5199\u4ed6\u6216\u8005\u76f4\u63a5 ItemTouchHelper.Callback","title":"\u81ea\u5b9a\u4e49"},{"location":"drag/#_2","text":"\u76f4\u63a5\u70b9\u51fbItem\u5f00\u59cb\u62d6\u62fd\u4f1a\u5b58\u5728\u624b\u52bf\u51b2\u7a81\u95ee\u9898, \u56e0\u4e3a\u6ed1\u52a8\u5217\u8868\u548c\u62d6\u62fd\u6392\u5e8f\u90fd\u662f\u79fb\u52a8\u624b\u52bf. \u6240\u4ee5\u5efa\u8bae\u4f60\u62d6\u62fditem\u7684\u67d0\u4e2a\u5c0f\u56fe\u6807\u5f00\u59cb\u62d6\u62fd(\u62d6\u62fditem\u5219\u6ed1\u52a8\u5217\u8868) \u793a\u4f8b\u4ee3\u7801 rv . linear (). setup { addType < DragModel > ( R . layout . item_drag ) onBind { findView < View > ( R . id . btnDrag ). setOnTouchListener { _ , event -> if ( event . action == MotionEvent . ACTION_DOWN ) { // \u5982\u679c\u624b\u6307\u6309\u4e0b\u5219\u5f00\u59cb\u62d6\u62fd itemTouchHelper ?. startDrag ( this ) } true } } }. models = getData ()","title":"\u70b9\u51fb\u62d6\u62fd"},{"location":"extension/","text":"RecyclerView \u00b6 \u63d0\u4f9b\u4e00\u4e9b BindingAdapter \u5e38\u7528\u7684\u8c03\u7528 \u51fd\u6570 \u63cf\u8ff0 bindingAdapter \u5982\u679cAdapter\u662f[BindingAdapter]\u5219\u8fd4\u56de\u5bf9\u8c61, \u5426\u5219\u629b\u51fa\u5f02\u5e38 models \u6570\u636e\u6a21\u578b\u96c6\u5408, \u65e0\u9700\u6267\u884c notify* \u51fd\u6570, \u81ea\u52a8\u4f7f\u7528 notifyDataChanged \u5237\u65b0 _data \u548cmodels\u7684\u552f\u4e00\u533a\u522b\u662f\u4e0d\u4f1a\u81ea\u52a8\u4f7f\u7528 notifyDataChanged \u5237\u65b0 mutable \u53ef\u589e\u5220\u7684\u975e\u7a7a[models]\u53ea\u8bfb\u6570\u636e\u6a21\u578b\u96c6\u5408, \u9700\u8981\u6267\u884c notify* \u51fd\u6570\u624b\u52a8\u5237\u65b0\u5217\u8868,\u5982\u679c\u5b9e\u9645\u6ca1\u6709\u8d4b\u503c\u6570\u636e\u8be5\u51fd\u6570\u4f1a\u629b\u51fa\u5f02\u5e38 addModels \u6dfb\u52a0\u6570\u636e, \u81ea\u52a8\u5237\u65b0\u5217\u8868 \u5e03\u5c40\u7ba1\u7406\u5668 \u00b6 \u6846\u67b6\u8fd8\u63d0\u4f9b\u5feb\u901f\u521b\u5efa\u5e03\u5c40\u7ba1\u7406\u5668\u7684\u6269\u5c55\u51fd\u6570, \u4e0a\u9762\u4f7f\u7528\u793a\u4f8b LinearLayoutManager rv . linear (). setup { addType < SimpleModel > ( R . layout . item_simple ) }. models = getData () GridLayoutManager rv . grid ( 3 ). setup { addType < SimpleModel > ( R . layout . item_simple ) }. models = getData () StaggeredLayoutManager rv . staggered ( 3 ). setup { addType < SimpleModel > ( R . layout . item_simple ) }. models = getData () \u76f8\u5173\u51fd\u6570 \u51fd\u6570 \u63cf\u8ff0 linear \u4f7f\u7528 LinearLayoutManager \u521b\u5efa\u7ebf\u6027\u5217\u8868 grid \u4f7f\u7528 GridLayoutManager \u521b\u5efa\u7f51\u683c\u5217\u8868 staggered \u4f7f\u7528 StaggeredLayoutManager \u521b\u5efa\u7011\u5e03\u6d41\u5217\u8868 \u5206\u5272\u7ebf \u00b6 \u6846\u67b6\u63d0\u4f9b\u5feb\u901f\u8bbe\u7f6e\u5206\u9694\u7269\u6269\u5c55\u51fd\u6570 rv . linear (). divider ( R . drawable . divider_horizontal ). setup { addType < DividerModel > ( R . layout . item_divider_horizontal ) }. models = getData () \u6269\u5c55\u51fd\u6570\u5b9e\u9645\u4e0a\u5c31\u662f\u4f7f\u7528\u7684 DefaultDecoration \u6765\u521b\u5efa\u5bf9\u8c61 \u5bf9\u8bdd\u6846 \u00b6 \u901a\u8fc7\u6269\u5c55\u51fd\u6570\u5feb\u901f\u7ed9\u5bf9\u8bdd\u6846\u521b\u5efa\u5217\u8868 Dialog(activity).setAdapter(bindingAdapter).show() \u51fd\u6570 fun Dialog . brv ( block : BindingAdapter .( RecyclerView ) -> Unit ): Dialog","title":"\u6269\u5c55\u51fd\u6570"},{"location":"extension/#recyclerview","text":"\u63d0\u4f9b\u4e00\u4e9b BindingAdapter \u5e38\u7528\u7684\u8c03\u7528 \u51fd\u6570 \u63cf\u8ff0 bindingAdapter \u5982\u679cAdapter\u662f[BindingAdapter]\u5219\u8fd4\u56de\u5bf9\u8c61, \u5426\u5219\u629b\u51fa\u5f02\u5e38 models \u6570\u636e\u6a21\u578b\u96c6\u5408, \u65e0\u9700\u6267\u884c notify* \u51fd\u6570, \u81ea\u52a8\u4f7f\u7528 notifyDataChanged \u5237\u65b0 _data \u548cmodels\u7684\u552f\u4e00\u533a\u522b\u662f\u4e0d\u4f1a\u81ea\u52a8\u4f7f\u7528 notifyDataChanged \u5237\u65b0 mutable \u53ef\u589e\u5220\u7684\u975e\u7a7a[models]\u53ea\u8bfb\u6570\u636e\u6a21\u578b\u96c6\u5408, \u9700\u8981\u6267\u884c notify* \u51fd\u6570\u624b\u52a8\u5237\u65b0\u5217\u8868,\u5982\u679c\u5b9e\u9645\u6ca1\u6709\u8d4b\u503c\u6570\u636e\u8be5\u51fd\u6570\u4f1a\u629b\u51fa\u5f02\u5e38 addModels \u6dfb\u52a0\u6570\u636e, \u81ea\u52a8\u5237\u65b0\u5217\u8868","title":"RecyclerView"},{"location":"extension/#_1","text":"\u6846\u67b6\u8fd8\u63d0\u4f9b\u5feb\u901f\u521b\u5efa\u5e03\u5c40\u7ba1\u7406\u5668\u7684\u6269\u5c55\u51fd\u6570, \u4e0a\u9762\u4f7f\u7528\u793a\u4f8b LinearLayoutManager rv . linear (). setup { addType < SimpleModel > ( R . layout . item_simple ) }. models = getData () GridLayoutManager rv . grid ( 3 ). setup { addType < SimpleModel > ( R . layout . item_simple ) }. models = getData () StaggeredLayoutManager rv . staggered ( 3 ). setup { addType < SimpleModel > ( R . layout . item_simple ) }. models = getData () \u76f8\u5173\u51fd\u6570 \u51fd\u6570 \u63cf\u8ff0 linear \u4f7f\u7528 LinearLayoutManager \u521b\u5efa\u7ebf\u6027\u5217\u8868 grid \u4f7f\u7528 GridLayoutManager \u521b\u5efa\u7f51\u683c\u5217\u8868 staggered \u4f7f\u7528 StaggeredLayoutManager \u521b\u5efa\u7011\u5e03\u6d41\u5217\u8868","title":"\u5e03\u5c40\u7ba1\u7406\u5668"},{"location":"extension/#_2","text":"\u6846\u67b6\u63d0\u4f9b\u5feb\u901f\u8bbe\u7f6e\u5206\u9694\u7269\u6269\u5c55\u51fd\u6570 rv . linear (). divider ( R . drawable . divider_horizontal ). setup { addType < DividerModel > ( R . layout . item_divider_horizontal ) }. models = getData () \u6269\u5c55\u51fd\u6570\u5b9e\u9645\u4e0a\u5c31\u662f\u4f7f\u7528\u7684 DefaultDecoration \u6765\u521b\u5efa\u5bf9\u8c61","title":"\u5206\u5272\u7ebf"},{"location":"extension/#_3","text":"\u901a\u8fc7\u6269\u5c55\u51fd\u6570\u5feb\u901f\u7ed9\u5bf9\u8bdd\u6846\u521b\u5efa\u5217\u8868 Dialog(activity).setAdapter(bindingAdapter).show() \u51fd\u6570 fun Dialog . brv ( block : BindingAdapter .( RecyclerView ) -> Unit ): Dialog","title":"\u5bf9\u8bdd\u6846"},{"location":"flexbox/","text":"BRV\u5bf9\u4e8e\u4f38\u7f29\u5e03\u5c40\u7684\u5b9e\u73b0\u53ef\u4ee5\u81ea\u884c\u6dfb\u52a0Google\u5f00\u6e90\u5e93 flexbox-layout \u6dfb\u52a0\u4f9d\u8d56 dependencies { implementation 'com.google.android:flexbox:3.0.0' } \u7136\u540e\u521b\u5efa\u5217\u8868 rv . layoutManager = FlexboxLayoutManager ( activity ) rv . setup { addType < FlexTagModel > ( R . layout . item_flex_tag ) }. models = getData ()","title":"\u4f38\u7f29\u5e03\u5c40"},{"location":"group/","text":"\u7279\u70b9 \u00b6 \u5c55\u5f00/\u6298\u53e0 \u52a8\u753b \u9012\u5f52\u5c55\u5f00/\u6298\u53e0 \u5c55\u5f00\u540e\u7f6e\u9876 \u5217\u8868\u59cb\u7ec8\u4ec5\u5c55\u5f00\u4e00\u4e2a\u5206\u7ec4 \u67e5\u627e\u4e0a\u5c42\u5206\u7ec4 \u5206\u7ec4\u548c\u591a\u7c7b\u578b\u53ef\u4ee5\u5171\u5b58 \u6240\u8c13\u5c55\u5f00/\u6298\u53e0\u5c31\u662f\u6dfb\u52a0item\u5230\u5217\u8868\u4e2d, \u6240\u4ee5\u6bcf\u6b21\u5c55\u5f00\u5217\u8868\u5c31\u4f1a\u65b0\u589eitem(\u6298\u53e0\u5c31\u4f1a\u51cf\u5c11item). \u8bf7\u6ce8\u610f\u5217\u8868position\u7684\u53d8\u5316\u907f\u514d\u7d22\u5f15\u8d8a\u754c \u4f7f\u7528 \u00b6 \u8981\u6c42Model\u5b9e\u73b0 ItemExpand class GroupModel : ItemExpand { // \u540c\u7ea7\u522b\u5206\u7ec4\u7684\u7d22\u5f15\u4f4d\u7f6e override var itemGroupPosition : Int = 0 // \u5f53\u524d\u6761\u76ee\u662f\u5426\u5c55\u5f00 override var itemExpand : Boolean = false // \u8be5\u53d8\u91cf\u5b58\u50a8\u5b50\u5217\u8868 override var itemSublist : List < Any? >? = listOf ( Model (), Model (), Model (), Model ()) } \u5f53\u4f60\u8981\u4fee\u6539\u5b50\u9879itemSublist\u65f6\u8bf7\u4f7f\u7528\u7c7b\u578b\u5f3a\u8f6c\u5c06\u5176\u8f6c\u6210\u53ef\u53d8\u96c6\u5408\u540e\u4fee\u6539, \u4f8b(itemModel.itemSublist as ArrayList).add\u6216\u8005remove\u7b49\u4fee\u6539\u5206\u7ec4\u96c6\u5408 \u5982\u679c\u8be5\u6570\u636e\u6a21\u578b\u662f\u7531Gson\u751f\u6210\u90a3\u4e48\u5176\u5b57\u6bb5\u9ed8\u8ba4\u503c\u5168\u90e8\u4f1a\u88ab\u7f6e\u4e3anull, \u8fd9\u662f\u7531\u4e8eGson\u4e0d\u652f\u6301Kotlin\u7684\u9ed8\u8ba4\u503c\u95ee\u9898 \u521b\u5efa\u5217\u8868 rv . linear (). setup { // \u4efb\u4f55\u6761\u76ee\u90fd\u9700\u8981\u6dfb\u52a0\u7c7b\u578b\u5230BindingAdapter\u4e2d addType < GroupModel > ( R . layout . item_group_title ) addFastClickable ( R . id . item ) // \u5c55\u5f00\u548c\u6298\u53e0\u70b9\u51fb\u4e8b\u4ef6\u4e0d\u9700\u8981\u9632\u6296\u52a8, \u6240\u4ee5\u4f7f\u7528\u8be5\u51fd\u6570 onClick { expandOrCollapse () // \u5c55\u5f00\u6216\u8005\u6298\u53e0 } }. models = getData () \u5206\u7ec4\u5c42\u7ea7 \u00b6 \u53ef\u4ee5\u4f7f\u7528 ItemDepth \u548c List.refreshItemDepth \u8f85\u52a9\u8ba1\u7b97Item\u7684\u5c42\u7ea7 \u5176\u4e2d ItemDepth.itemDepth \u4e3a\u5f53\u524dModel\u5c42\u7ea7\uff0c\u5c42\u7ea7\u8ba1\u6570\u4ece0\u4f9d\u6b21\u9012\u589e \u793a\u4f8b\u4ee3\u7801 // Model\u5b9e\u73b0ItemDepth class SampleItemDepth ( override var itemDepth : Int ) : ItemDepth // \u5728\u6570\u636e\u8d4b\u503c\u7ed9[BindingAdapter]\u524d\uff0c\u5237\u65b0\u4e00\u6b21item\u5c42\u7ea7\u5373\u53ef fun getData (): List < ItemDepth > = List ( 10 ) { SampleItemDepth ( it ) } RecyclerView ( TODO ()). linear (). setup { // ... }. models = getData (). refreshItemDepth () } \u5206\u7ec4\u591a\u7c7b\u578b \u00b6 \u8fd9\u79cd\u6dfb\u52a0 spanSizeLookup \u5373\u53ef\u5b9e\u73b0. \u8bf7\u67e5\u770b\u793a\u4f8b\u4ee3\u7801 \u5206\u7ec4\u548c\u591a\u7c7b\u578b\u5c5e\u4e8e\u4e92\u4e0d\u5f71\u54cd\u7684\u529f\u80fd, \u5206\u7ec4\u4e0b\u7684\u591a\u7c7b\u578b\u548c\u666e\u901a\u5217\u8868\u7684\u591a\u7c7b\u578b\u6dfb\u52a0\u65b9\u5f0f\u7b49\u540c \u5206\u7ec4\u62d6\u62fd/\u4fa7\u6ed1 \u00b6 \u62d6\u62fd / \u4fa7\u6ed1 \u529f\u80fd\u548c\u5206\u7ec4\u672c\u8eab\u4e92\u4e0d\u5f71\u54cd. \u4f46\u662f\u9488\u5bf9\u5df2\u5c55\u5f00\u7684\u5206\u7ec4\u9700\u8981\u5728\u52a8\u4f5c\u53d1\u751f\u4e4b\u524d\u6298\u53e0\u4ee5\u4fdd\u8bc1\u5217\u8868\u6570\u636e\u4e0d\u9519\u4e71, \u6240\u4ee5\u6211\u4eec\u9700\u8981\u81ea\u5b9a\u4e49\u90e8\u5206\u5b9e\u73b0 binding . rv . linear (). setup { // \u81ea\u5b9a\u4e49\u90e8\u5206\u5b9e\u73b0 itemTouchHelper = ItemTouchHelper ( object : DefaultItemTouchCallback () { override fun onSelectedChanged ( viewHolder : RecyclerView . ViewHolder ? , actionState : Int ) { if ( actionState == ItemTouchHelper . ACTION_STATE_DRAG ) { // \u62d6\u62fd\u79fb\u52a8\u5206\u7ec4\u524d\u5148\u6298\u53e0\u5b50\u5217\u8868 ( viewHolder as BindingAdapter . BindingViewHolder ). collapse () } super . onSelectedChanged ( viewHolder , actionState ) } override fun onSwiped ( viewHolder : RecyclerView . ViewHolder , direction : Int ) { ( viewHolder as BindingAdapter . BindingViewHolder ). collapse () // \u4fa7\u6ed1\u5220\u9664\u5206\u7ec4\u524d\u5148\u6298\u53e0\u5b50\u5217\u8868 super . onSwiped ( viewHolder , direction ) // \u5982\u679c\u4fa7\u6ed1\u5220\u9664\u7684\u662f\u5206\u7ec4\u91cc\u9762\u7684\u5b50\u5217\u8868, \u8981\u5220\u9664\u5bf9\u5e94\u7236\u5206\u7ec4\u7684itemSublist\u6570\u636e, \u5426\u5219\u4f1a\u5bfc\u81f4\u6570\u636e\u5f02\u5e38 // itemSublist\u5fc5\u987b\u4e3a\u53ef\u53d8\u96c6\u5408, \u5426\u5219\u65e0\u6cd5\u88ab\u5220\u9664 ( vh . findParentViewHolder () ?. getModelOrNull < ItemExpand > () ?. itemSublist as? ArrayList ) ?. remove ( vh . getModelOrNull ()) } }) // ... }. models = getData () \u5177\u4f53\u53ef\u4ee5\u770b\u5b8c\u6574\u793a\u4f8b\u4ee3\u7801 \u5206\u7ec4\u5168\u90e8\u5c55\u5f00/\u6298\u53e0 \u00b6 \u904d\u5386\u96c6\u5408\u6570\u636e\u5c06 itemExpand = true \u5373\u53ef\u5c55\u5f00\u5168\u90e8(\u53cd\u4e4b\u6298\u53e0). \u5982\u679c\u8981\u63a7\u5236\u5c55\u5f00\u5c42\u7ea7\u6df1\u5ea6\u8bf7\u81ea\u5df1\u904d\u5386\u65f6\u63a7\u5236 \u5c55\u5f00\u5168\u90e8 binding . rv . bindingAdapter . models = getData (). forEach { it . itemExpand = true } \u6298\u53e0\u5168\u90e8 binding . rv . bindingAdapter . models = getData (). forEach { it . itemExpand = false } \u5206\u7ec4\u76f8\u5173\u51fd\u6570 \u00b6 BindingAdapter\u7684\u51fd\u6570 \u63cf\u8ff0 expandAnimationEnabled \u5c55\u5f00\u662f\u5426\u663e\u793a\u6e10\u9690\u52a8\u753b, \u9ed8\u8ba4true singleExpandMode \u662f\u5426\u53ea\u5141\u8bb8\u4e00\u4e2a\u5206\u7ec4\u5c55\u5f00(\u5373\u5c55\u5f00\u5f53\u524d\u5206\u7ec4\u5c31\u6298\u53e0\u4e0a\u4e2a\u5206\u7ec4), \u9ed8\u8ba4false onExpand \u5c55\u5f00\u56de\u8c03\u76d1\u542c expand \u5c55\u5f00\u6307\u5b9a\u6761\u76ee collapse \u6298\u53e0\u6307\u5b9a\u6761\u76ee expandOrCollapse \u5c55\u5f00\u6216\u8005\u6298\u53e0\u6307\u5b9a\u6761\u76ee(\u6839\u636e\u5f53\u524d\u6761\u76ee\u72b6\u6001\u51b3\u5b9a\u662f\u6298\u53e0/\u5c55\u5f00) isSameGroup \u6307\u5b9a\u4e24\u4e2a\u7d22\u5f15\u662f\u5426\u5904\u4e8e\u76f8\u540c\u5206\u7ec4 BindingViewHolder\u7684\u51fd\u6570 \u63cf\u8ff0 expand \u5c55\u5f00\u6307\u5b9a\u6761\u76ee collapse \u6298\u53e0\u6307\u5b9a\u6761\u76ee expandOrCollapse \u5c55\u5f00\u6216\u8005\u6298\u53e0\u6307\u5b9a\u6761\u76ee(\u6839\u636e\u5f53\u524d\u6761\u76ee\u72b6\u6001\u51b3\u5b9a\u662f\u6298\u53e0/\u5c55\u5f00) findParentPosition \u67e5\u627e\u7236\u9879\u6761\u76ee\u7684\u7d22\u5f15(\u5373\u5f53\u524d\u6761\u76ee\u5c5e\u4e8e\u54ea\u4e2a\u5206\u7ec4\u4e0b), \u5982\u679c\u6ca1\u6709\u8fd4\u56de-1 findParentViewHolder \u67e5\u627e\u7236\u9879\u6761\u76eeViewHolder, \u5982\u679c\u6ca1\u6709\u8fd4\u56denull","title":"\u5206\u7ec4"},{"location":"group/#_1","text":"\u5c55\u5f00/\u6298\u53e0 \u52a8\u753b \u9012\u5f52\u5c55\u5f00/\u6298\u53e0 \u5c55\u5f00\u540e\u7f6e\u9876 \u5217\u8868\u59cb\u7ec8\u4ec5\u5c55\u5f00\u4e00\u4e2a\u5206\u7ec4 \u67e5\u627e\u4e0a\u5c42\u5206\u7ec4 \u5206\u7ec4\u548c\u591a\u7c7b\u578b\u53ef\u4ee5\u5171\u5b58 \u6240\u8c13\u5c55\u5f00/\u6298\u53e0\u5c31\u662f\u6dfb\u52a0item\u5230\u5217\u8868\u4e2d, \u6240\u4ee5\u6bcf\u6b21\u5c55\u5f00\u5217\u8868\u5c31\u4f1a\u65b0\u589eitem(\u6298\u53e0\u5c31\u4f1a\u51cf\u5c11item). \u8bf7\u6ce8\u610f\u5217\u8868position\u7684\u53d8\u5316\u907f\u514d\u7d22\u5f15\u8d8a\u754c","title":"\u7279\u70b9"},{"location":"group/#_2","text":"\u8981\u6c42Model\u5b9e\u73b0 ItemExpand class GroupModel : ItemExpand { // \u540c\u7ea7\u522b\u5206\u7ec4\u7684\u7d22\u5f15\u4f4d\u7f6e override var itemGroupPosition : Int = 0 // \u5f53\u524d\u6761\u76ee\u662f\u5426\u5c55\u5f00 override var itemExpand : Boolean = false // \u8be5\u53d8\u91cf\u5b58\u50a8\u5b50\u5217\u8868 override var itemSublist : List < Any? >? = listOf ( Model (), Model (), Model (), Model ()) } \u5f53\u4f60\u8981\u4fee\u6539\u5b50\u9879itemSublist\u65f6\u8bf7\u4f7f\u7528\u7c7b\u578b\u5f3a\u8f6c\u5c06\u5176\u8f6c\u6210\u53ef\u53d8\u96c6\u5408\u540e\u4fee\u6539, \u4f8b(itemModel.itemSublist as ArrayList).add\u6216\u8005remove\u7b49\u4fee\u6539\u5206\u7ec4\u96c6\u5408 \u5982\u679c\u8be5\u6570\u636e\u6a21\u578b\u662f\u7531Gson\u751f\u6210\u90a3\u4e48\u5176\u5b57\u6bb5\u9ed8\u8ba4\u503c\u5168\u90e8\u4f1a\u88ab\u7f6e\u4e3anull, \u8fd9\u662f\u7531\u4e8eGson\u4e0d\u652f\u6301Kotlin\u7684\u9ed8\u8ba4\u503c\u95ee\u9898 \u521b\u5efa\u5217\u8868 rv . linear (). setup { // \u4efb\u4f55\u6761\u76ee\u90fd\u9700\u8981\u6dfb\u52a0\u7c7b\u578b\u5230BindingAdapter\u4e2d addType < GroupModel > ( R . layout . item_group_title ) addFastClickable ( R . id . item ) // \u5c55\u5f00\u548c\u6298\u53e0\u70b9\u51fb\u4e8b\u4ef6\u4e0d\u9700\u8981\u9632\u6296\u52a8, \u6240\u4ee5\u4f7f\u7528\u8be5\u51fd\u6570 onClick { expandOrCollapse () // \u5c55\u5f00\u6216\u8005\u6298\u53e0 } }. models = getData ()","title":"\u4f7f\u7528"},{"location":"group/#_3","text":"\u53ef\u4ee5\u4f7f\u7528 ItemDepth \u548c List.refreshItemDepth \u8f85\u52a9\u8ba1\u7b97Item\u7684\u5c42\u7ea7 \u5176\u4e2d ItemDepth.itemDepth \u4e3a\u5f53\u524dModel\u5c42\u7ea7\uff0c\u5c42\u7ea7\u8ba1\u6570\u4ece0\u4f9d\u6b21\u9012\u589e \u793a\u4f8b\u4ee3\u7801 // Model\u5b9e\u73b0ItemDepth class SampleItemDepth ( override var itemDepth : Int ) : ItemDepth // \u5728\u6570\u636e\u8d4b\u503c\u7ed9[BindingAdapter]\u524d\uff0c\u5237\u65b0\u4e00\u6b21item\u5c42\u7ea7\u5373\u53ef fun getData (): List < ItemDepth > = List ( 10 ) { SampleItemDepth ( it ) } RecyclerView ( TODO ()). linear (). setup { // ... }. models = getData (). refreshItemDepth () }","title":"\u5206\u7ec4\u5c42\u7ea7"},{"location":"group/#_4","text":"\u8fd9\u79cd\u6dfb\u52a0 spanSizeLookup \u5373\u53ef\u5b9e\u73b0. \u8bf7\u67e5\u770b\u793a\u4f8b\u4ee3\u7801 \u5206\u7ec4\u548c\u591a\u7c7b\u578b\u5c5e\u4e8e\u4e92\u4e0d\u5f71\u54cd\u7684\u529f\u80fd, \u5206\u7ec4\u4e0b\u7684\u591a\u7c7b\u578b\u548c\u666e\u901a\u5217\u8868\u7684\u591a\u7c7b\u578b\u6dfb\u52a0\u65b9\u5f0f\u7b49\u540c","title":"\u5206\u7ec4\u591a\u7c7b\u578b"},{"location":"group/#_5","text":"\u62d6\u62fd / \u4fa7\u6ed1 \u529f\u80fd\u548c\u5206\u7ec4\u672c\u8eab\u4e92\u4e0d\u5f71\u54cd. \u4f46\u662f\u9488\u5bf9\u5df2\u5c55\u5f00\u7684\u5206\u7ec4\u9700\u8981\u5728\u52a8\u4f5c\u53d1\u751f\u4e4b\u524d\u6298\u53e0\u4ee5\u4fdd\u8bc1\u5217\u8868\u6570\u636e\u4e0d\u9519\u4e71, \u6240\u4ee5\u6211\u4eec\u9700\u8981\u81ea\u5b9a\u4e49\u90e8\u5206\u5b9e\u73b0 binding . rv . linear (). setup { // \u81ea\u5b9a\u4e49\u90e8\u5206\u5b9e\u73b0 itemTouchHelper = ItemTouchHelper ( object : DefaultItemTouchCallback () { override fun onSelectedChanged ( viewHolder : RecyclerView . ViewHolder ? , actionState : Int ) { if ( actionState == ItemTouchHelper . ACTION_STATE_DRAG ) { // \u62d6\u62fd\u79fb\u52a8\u5206\u7ec4\u524d\u5148\u6298\u53e0\u5b50\u5217\u8868 ( viewHolder as BindingAdapter . BindingViewHolder ). collapse () } super . onSelectedChanged ( viewHolder , actionState ) } override fun onSwiped ( viewHolder : RecyclerView . ViewHolder , direction : Int ) { ( viewHolder as BindingAdapter . BindingViewHolder ). collapse () // \u4fa7\u6ed1\u5220\u9664\u5206\u7ec4\u524d\u5148\u6298\u53e0\u5b50\u5217\u8868 super . onSwiped ( viewHolder , direction ) // \u5982\u679c\u4fa7\u6ed1\u5220\u9664\u7684\u662f\u5206\u7ec4\u91cc\u9762\u7684\u5b50\u5217\u8868, \u8981\u5220\u9664\u5bf9\u5e94\u7236\u5206\u7ec4\u7684itemSublist\u6570\u636e, \u5426\u5219\u4f1a\u5bfc\u81f4\u6570\u636e\u5f02\u5e38 // itemSublist\u5fc5\u987b\u4e3a\u53ef\u53d8\u96c6\u5408, \u5426\u5219\u65e0\u6cd5\u88ab\u5220\u9664 ( vh . findParentViewHolder () ?. getModelOrNull < ItemExpand > () ?. itemSublist as? ArrayList ) ?. remove ( vh . getModelOrNull ()) } }) // ... }. models = getData () \u5177\u4f53\u53ef\u4ee5\u770b\u5b8c\u6574\u793a\u4f8b\u4ee3\u7801","title":"\u5206\u7ec4\u62d6\u62fd/\u4fa7\u6ed1"},{"location":"group/#_6","text":"\u904d\u5386\u96c6\u5408\u6570\u636e\u5c06 itemExpand = true \u5373\u53ef\u5c55\u5f00\u5168\u90e8(\u53cd\u4e4b\u6298\u53e0). \u5982\u679c\u8981\u63a7\u5236\u5c55\u5f00\u5c42\u7ea7\u6df1\u5ea6\u8bf7\u81ea\u5df1\u904d\u5386\u65f6\u63a7\u5236 \u5c55\u5f00\u5168\u90e8 binding . rv . bindingAdapter . models = getData (). forEach { it . itemExpand = true } \u6298\u53e0\u5168\u90e8 binding . rv . bindingAdapter . models = getData (). forEach { it . itemExpand = false }","title":"\u5206\u7ec4\u5168\u90e8\u5c55\u5f00/\u6298\u53e0"},{"location":"group/#_7","text":"BindingAdapter\u7684\u51fd\u6570 \u63cf\u8ff0 expandAnimationEnabled \u5c55\u5f00\u662f\u5426\u663e\u793a\u6e10\u9690\u52a8\u753b, \u9ed8\u8ba4true singleExpandMode \u662f\u5426\u53ea\u5141\u8bb8\u4e00\u4e2a\u5206\u7ec4\u5c55\u5f00(\u5373\u5c55\u5f00\u5f53\u524d\u5206\u7ec4\u5c31\u6298\u53e0\u4e0a\u4e2a\u5206\u7ec4), \u9ed8\u8ba4false onExpand \u5c55\u5f00\u56de\u8c03\u76d1\u542c expand \u5c55\u5f00\u6307\u5b9a\u6761\u76ee collapse \u6298\u53e0\u6307\u5b9a\u6761\u76ee expandOrCollapse \u5c55\u5f00\u6216\u8005\u6298\u53e0\u6307\u5b9a\u6761\u76ee(\u6839\u636e\u5f53\u524d\u6761\u76ee\u72b6\u6001\u51b3\u5b9a\u662f\u6298\u53e0/\u5c55\u5f00) isSameGroup \u6307\u5b9a\u4e24\u4e2a\u7d22\u5f15\u662f\u5426\u5904\u4e8e\u76f8\u540c\u5206\u7ec4 BindingViewHolder\u7684\u51fd\u6570 \u63cf\u8ff0 expand \u5c55\u5f00\u6307\u5b9a\u6761\u76ee collapse \u6298\u53e0\u6307\u5b9a\u6761\u76ee expandOrCollapse \u5c55\u5f00\u6216\u8005\u6298\u53e0\u6307\u5b9a\u6761\u76ee(\u6839\u636e\u5f53\u524d\u6761\u76ee\u72b6\u6001\u51b3\u5b9a\u662f\u6298\u53e0/\u5c55\u5f00) findParentPosition \u67e5\u627e\u7236\u9879\u6761\u76ee\u7684\u7d22\u5f15(\u5373\u5f53\u524d\u6761\u76ee\u5c5e\u4e8e\u54ea\u4e2a\u5206\u7ec4\u4e0b), \u5982\u679c\u6ca1\u6709\u8fd4\u56de-1 findParentViewHolder \u67e5\u627e\u7236\u9879\u6761\u76eeViewHolder, \u5982\u679c\u6ca1\u6709\u8fd4\u56denull","title":"\u5206\u7ec4\u76f8\u5173\u51fd\u6570"},{"location":"header_footer/","text":"\u5934\u5e03\u5c40\u548c\u811a\u5e03\u5c40\u5728rv\u4e2d\u7b97\u4f5c\u4e00\u4e2aitem, \u6240\u4ee5\u8ba1\u7b97 position \u7684\u65f6\u5019\u5e94\u5f53\u8003\u8651\u5176\u4e2d \u5934\u5e03\u5c40\u548c\u811a\u5e03\u5c40\u4e5f\u9700\u8981\u4f7f\u7528 addType \u51fd\u6570\u6dfb\u52a0\u7c7b\u578b binding . rv . linear (). setup { addType < Model > ( R . layout . item_multi_type_simple ) /** * BRV\u7684\u6570\u636e\u96c6 = Header + Footer + Models * \u6240\u4ee5\u672c\u8d28\u4e0a\u4ed6\u4eec\u90fd\u662f\u4e00\u7ec4\u591a\u7c7b\u578b\u800c\u5df2, \u5206\u51fa\u6765\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u66ff\u6362Models\u800c\u4e0d\u5f71\u54cdHeader\u548cFooter */ addType < Header > ( R . layout . item_multi_type_header ) addType < Footer > ( R . layout . item_multi_type_footer ) }. models = getData () binding . rv . bindingAdapter . addHeader ( Header (), animation = true ) binding . rv . bindingAdapter . addFooter ( Footer (), animation = true ) PageRefreshLayout \u7684\u7f3a\u7701\u9875\u529f\u80fd\u4f1a\u5bfc\u81f4\u6574\u4e2a\u5217\u8868\u53ef\u80fd\u90fd\u4f1a\u88ab\u7f3a\u7701\u9875\u906e\u6321 \u5982\u679c\u4f60\u5e0c\u671b\u5934\u5e03\u5c40\u4e0d\u4f1a\u88ab\u6570\u636e\u95ee\u9898\u5f71\u54cd, \u5e76\u4e14\u548cRV\u8054\u52a8\u5212\u52a8 \u8bf7\u4f7f\u7528 CoordinatorLayout \u5d4c\u5957RV \u800c\u4e0d\u662f ScrollView/NestedScrollView \u5d4c\u5957RV\u6216\u8005\u4f7f\u7528BRV\u7684\u5934\u5e03\u5c40(Header) \u51fd\u6570 \u00b6 \u51fd\u6570 \u63cf\u8ff0 addHeader / addFooter \u6dfb\u52a0\u5934\u5e03\u5c40/\u811a\u5e03\u5c40 removeHeader / removeFooter \u5220\u9664\u5934\u5e03\u5c40/\u811a\u5e03\u5c40 removeHeaderAt / removeFooterAt \u5220\u9664\u6307\u5b9a\u7d22\u5f15\u7684\u5934\u5e03\u5c40/\u811a\u5e03\u5c40 clearHeader / clearFooter \u6e05\u9664\u5168\u90e8\u5934\u5e03\u5c40/\u811a\u5e03\u5c40 isHeader / isFooter \u6307\u5b9a\u7d22\u5f15\u662f\u5426\u662f\u5934\u5e03\u5c40/\u811a\u5e03\u5c40 headerCount / footerCount \u5934\u5e03\u5c40/\u811a\u5e03\u5c40\u6570\u91cf","title":"\u5934\u811a\u5e03\u5c40"},{"location":"header_footer/#_1","text":"\u51fd\u6570 \u63cf\u8ff0 addHeader / addFooter \u6dfb\u52a0\u5934\u5e03\u5c40/\u811a\u5e03\u5c40 removeHeader / removeFooter \u5220\u9664\u5934\u5e03\u5c40/\u811a\u5e03\u5c40 removeHeaderAt / removeFooterAt \u5220\u9664\u6307\u5b9a\u7d22\u5f15\u7684\u5934\u5e03\u5c40/\u811a\u5e03\u5c40 clearHeader / clearFooter \u6e05\u9664\u5168\u90e8\u5934\u5e03\u5c40/\u811a\u5e03\u5c40 isHeader / isFooter \u6307\u5b9a\u7d22\u5f15\u662f\u5426\u662f\u5934\u5e03\u5c40/\u811a\u5e03\u5c40 headerCount / footerCount \u5934\u5e03\u5c40/\u811a\u5e03\u5c40\u6570\u91cf","title":"\u51fd\u6570"},{"location":"hover/","text":"\u901a\u8fc7\u5b9e\u73b0\u63a5\u53e3 ItemHover class HoverHeaderModel : ItemHover { // \u8fd4\u56de\u503c\u51b3\u5b9a\u662f\u5426\u60ac\u505c override var itemHover : Boolean = true } \u7136\u540e\u8fd9\u4e2aItem\u5c31\u4f1a\u60ac\u505c\u5728\u9876\u90e8\u4e86 \u5b8c\u6574\u793a\u4f8b override fun onActivityCreated ( savedInstanceState : Bundle?) { super . onActivityCreated ( savedInstanceState ) rv . linear (). setup { addType < Model > ( R . layout . item_multi_type_simple ) addType < HoverHeaderModel > ( R . layout . item_hover_header ) models = getData () // \u70b9\u51fb\u4e8b\u4ef6 onClick ( R . id . item ) { when ( itemViewType ) { R . layout . item_hover_header -> toast ( \"\u60ac\u505c\u6761\u76ee\" ) else -> toast ( \"\u666e\u901a\u6761\u76ee\" ) } } // \u53ef\u9009\u9879, \u7c98\u6027\u76d1\u542c\u5668 onHoverAttachListener = object : OnHoverAttachListener { // \u9ecf\u4f4f\u9876\u90e8\u7684\u65f6\u5019, v\u8868\u793a\u6307\u5b9a\u60ac\u505c\u7684itemView\u5bf9\u8c61 override fun attachHover ( v : View ) { ViewCompat . setElevation ( v , 10F ) } // \u4ece\u9876\u90e8\u5206\u79bb\u7684\u65f6\u5019 override fun detachHover ( v : View ) { ViewCompat . setElevation ( v , 0F ) } } } } \u4e0d\u540c\u4e8e\u5927\u90e8\u5206\u60ac\u505c\u6846\u67b6, BRV\u65e0\u9700\u7279\u6b8a\u5904\u7406\u652f\u6301\u5168\u90e8\u7684\u70b9\u51fb\u4e8b\u4ef6 [BindingAdapter] \u5224\u65ad\u5f53\u524d\u4f4d\u7f6e\u662f\u5426\u5c5e\u4e8e\u60ac\u505c fun isHover ( position : Int ): Boolean \u7f51\u683c\u60ac\u505c \u00b6 Demo\u622a\u56fe \u53ef\u4ee5\u770b\u5230\u56fe\u7247\u4e2d\u60ac\u505c\u7684item\u6bd4\u666e\u901a\u7684item\u8981\u5bbd\u4e24\u500d, \u8fd9\u91cc\u9700\u8981\u786e\u5b9a\u60ac\u505c\u7684Item\u7684\u52a8\u6001 SpanSize , \u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528 grid(3) \u800c\u662f\u9700\u8981\u624b\u52a8\u521b\u5efa HoverGridLayoutManager val layoutManager = HoverGridLayoutManager ( requireContext (), 2 ) layoutManager . spanSizeLookup = object : GridLayoutManager . SpanSizeLookup () { override fun getSpanSize ( position : Int ): Int { return if ( rv . bindingAdapter . isHover ( position )) 2 else 1 // \u5177\u4f53\u7684\u4e1a\u52a1\u903b\u8f91\u7531\u4f60\u786e\u5b9a } } rv . layoutManager = layoutManager","title":"\u60ac\u505c"},{"location":"hover/#_1","text":"Demo\u622a\u56fe \u53ef\u4ee5\u770b\u5230\u56fe\u7247\u4e2d\u60ac\u505c\u7684item\u6bd4\u666e\u901a\u7684item\u8981\u5bbd\u4e24\u500d, \u8fd9\u91cc\u9700\u8981\u786e\u5b9a\u60ac\u505c\u7684Item\u7684\u52a8\u6001 SpanSize , \u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528 grid(3) \u800c\u662f\u9700\u8981\u624b\u52a8\u521b\u5efa HoverGridLayoutManager val layoutManager = HoverGridLayoutManager ( requireContext (), 2 ) layoutManager . spanSizeLookup = object : GridLayoutManager . SpanSizeLookup () { override fun getSpanSize ( position : Int ): Int { return if ( rv . bindingAdapter . isHover ( position )) 2 else 1 // \u5177\u4f53\u7684\u4e1a\u52a1\u903b\u8f91\u7531\u4f60\u786e\u5b9a } } rv . layoutManager = layoutManager","title":"\u7f51\u683c\u60ac\u505c"},{"location":"issues/","text":"\u95ee\u9898 \u5f15\u7528 \u7531 data class \u5bfc\u81f4\u7684\u5206\u7ec4\u6298\u53e0\u5d29\u6e83 #79 \u9002\u914dViewBinding #71 \u9002\u914dPaging3 #73 \u5220\u9664Item\u5931\u8d25 #68 \u5feb\u901f\u5237\u65b0\u5217\u8868\u70b9\u51fb\u5931\u6548 #67 \u652f\u6301DiffUtil\u66f4\u65b0\u5217\u8868 #64 \u7f16\u8bd1SmartRefreshLayout\u4f9d\u8d56\u5931\u8d25 #85 onViewAttachedToWindow/onViewDetachedFromWindow\u7b49\u56de\u8c03\u5b9e\u73b0 #81 \u5982\u679c\u4f7f\u7528Filter\u8fc7\u6ee4\u6570\u636e #105 \u5982\u4f55\u5faa\u73af\u6ed1\u52a8\u5217\u8868 #109 \u540c\u65f6\u652f\u6301\u5217\u8868\u4e0a\u4e0b\u5206\u9875\u9884\u52a0\u8f7d #114 CoordinatorLayout\u663e\u793a\u7f3a\u7701\u9875\u540e\u65e0\u6cd5\u6b63\u5e38\u6ed1\u52a8 #152","title":"\u5e38\u89c1\u95ee\u9898"},{"location":"lifecycle/","text":"\u51fd\u6570 \u00b6 \u9996\u5148\u4f60\u8981\u77e5\u9053\u7684RecyclerView(\u4ee5\u4e0b\u7b80\u79f0rv)\u7684\u57fa\u7840\u77e5\u8bc6 onCreateViewHolder\u663e\u793a\u7684\u6b21\u6570\u4e3a\u9700\u8981\u521b\u5efaItem\u89c6\u56fe\u7684\u4e2a\u6570. \u5927\u6982\u6bd4\u5c4f\u5e55\u4e00\u6b21\u6700\u591a\u53ef\u5c55\u793a\u7684Item\u6570\u91cf\u591a, \u4f46\u662f\u6bd4\u603bItem\u6570\u91cf\u5c11. onBindViewHolder\u4f1a\u5728\u6bcf\u6b21Item\u88ab\u663e\u793a\u5230\u5c4f\u5e55\u4e0a\u65f6\u56de\u8c03 \u800c\u5728BRV\u4e2d\u7b80\u5316\u4e86\u8fd9\u4e24\u4e2a\u51fd\u6570 \u51fd\u6570 \u63cf\u8ff0 onCreate \u5bf9\u5e94Adapter\u7684 onCreateViewHolder \u51fd\u6570\u56de\u8c03, \u7528\u4e8e\u521b\u5efaItem\u7684\u89c6\u56fe onBind \u5bf9\u5e94Adapter\u7684 onBindViewHolder \u51fd\u6570\u56de\u8c03, \u6bcf\u6b21\u663e\u793aItem\u90fd\u4f1a\u89e6\u53d1\u56de\u8c03, \u7528\u4e8e\u5904\u7406\u6570\u636e\u7ed1\u5b9a onBindViewHolders \u4e00\u4e2a onBindViewHolder \u76d1\u542c\u5668\u7684\u96c6\u5408, \u4e00\u822c\u7528\u4e8e\u5176\u4ed6\u6846\u67b6\u6765\u76d1\u542c\u6269\u5c55, \u4f7f\u7528\u8005\u4e00\u822c\u4e0d\u9700\u8981\u4f7f\u7528 BindingAdapter\u662f open class \u53ef\u4ee5\u88ab\u7ee7\u627f\u91cd\u5199, \u4efb\u4f55\u6ca1\u6709\u63d0\u4f9b\u7684\u51fd\u6570\u56de\u8c03\u53ef\u4ee5\u901a\u8fc7\u7ee7\u627f\u6216\u8005\u533f\u540d\u7c7b\u5b9e\u73b0 onBind\u6216onCreate\u53ea\u6709\u6700\u540e\u8bbe\u7f6e\u7684\u6709\u6548. \u5b58\u5728\u8986\u76d6\u5173\u7cfb rv . linear (). setup { addType < SimpleModel > ( R . layout . item_simple ) onCreate { when ( it ){ R . layout . item_simple -> { // \u7279\u6b8a\u5904\u7406 } } } }. models = getData () \u5728onCreate\u4e2d\u83b7\u53d6\u60f3\u8981itemViewType, \u9700\u8981\u5728\u4f5c\u7528\u57df\u4e2d\u4f7f\u7528 it , \u800c\u4e0d\u662f\u5176 itemViewType \u5b57\u6bb5. \u8fd9\u662f\u56e0\u4e3a\u5728onCreateViewHolder\u671f\u95f4\u7684ViewHolder\u7684itemViewType\u5b9e\u9645\u4e0a\u662f\u6ca1\u6709\u503c\u7684. \u800conCreate\u5c31\u662f\u5bf9\u5e94\u7684 onCreateViewHolder \u5d4c\u5957RecyclerView \u00b6 \u5728\u4f7f\u7528rv\u5d4c\u5957rv\u65f6\u5e94\u5f53\u5728onCreate\u56de\u8c03\u4e2d\u4e3a\u5185\u5d4c\u7684rv\u8bbe\u7f6e\u89c6\u56fe(\u4f7f\u7528 rv.setup ), \u8fd9\u662f\u4e3a\u4e86\u907f\u514d\u540c\u4e00\u7c7b\u578b\u53cd\u590d\u521b\u5efarv\u5bfc\u81f4\u5185\u5b58\u6d88\u8017. \u800c\u5d4c\u5957\u7684rv\u6570\u636e\u53ef\u4ee5\u5728onBind\u4e2d\u7ed1\u5b9a\u6570\u636e, \u4f7f\u7528 rv.models rv . linear (). setup { addType < SimpleModel > ( R . layout . item_simple ) onCreate { val rv = findView < RecyclerView > ( R . id . rv_check_mode ) rv . linear (). setup { addType < NestedModel > ( R . layout . item_simple_nested ) } } onBind { val rv = findView < RecyclerView > ( R . id . rv_check_mode ) rv . models = getModel < Model > (). listNested } }","title":"\u751f\u547d\u5468\u671f"},{"location":"lifecycle/#_1","text":"\u9996\u5148\u4f60\u8981\u77e5\u9053\u7684RecyclerView(\u4ee5\u4e0b\u7b80\u79f0rv)\u7684\u57fa\u7840\u77e5\u8bc6 onCreateViewHolder\u663e\u793a\u7684\u6b21\u6570\u4e3a\u9700\u8981\u521b\u5efaItem\u89c6\u56fe\u7684\u4e2a\u6570. \u5927\u6982\u6bd4\u5c4f\u5e55\u4e00\u6b21\u6700\u591a\u53ef\u5c55\u793a\u7684Item\u6570\u91cf\u591a, \u4f46\u662f\u6bd4\u603bItem\u6570\u91cf\u5c11. onBindViewHolder\u4f1a\u5728\u6bcf\u6b21Item\u88ab\u663e\u793a\u5230\u5c4f\u5e55\u4e0a\u65f6\u56de\u8c03 \u800c\u5728BRV\u4e2d\u7b80\u5316\u4e86\u8fd9\u4e24\u4e2a\u51fd\u6570 \u51fd\u6570 \u63cf\u8ff0 onCreate \u5bf9\u5e94Adapter\u7684 onCreateViewHolder \u51fd\u6570\u56de\u8c03, \u7528\u4e8e\u521b\u5efaItem\u7684\u89c6\u56fe onBind \u5bf9\u5e94Adapter\u7684 onBindViewHolder \u51fd\u6570\u56de\u8c03, \u6bcf\u6b21\u663e\u793aItem\u90fd\u4f1a\u89e6\u53d1\u56de\u8c03, \u7528\u4e8e\u5904\u7406\u6570\u636e\u7ed1\u5b9a onBindViewHolders \u4e00\u4e2a onBindViewHolder \u76d1\u542c\u5668\u7684\u96c6\u5408, \u4e00\u822c\u7528\u4e8e\u5176\u4ed6\u6846\u67b6\u6765\u76d1\u542c\u6269\u5c55, \u4f7f\u7528\u8005\u4e00\u822c\u4e0d\u9700\u8981\u4f7f\u7528 BindingAdapter\u662f open class \u53ef\u4ee5\u88ab\u7ee7\u627f\u91cd\u5199, \u4efb\u4f55\u6ca1\u6709\u63d0\u4f9b\u7684\u51fd\u6570\u56de\u8c03\u53ef\u4ee5\u901a\u8fc7\u7ee7\u627f\u6216\u8005\u533f\u540d\u7c7b\u5b9e\u73b0 onBind\u6216onCreate\u53ea\u6709\u6700\u540e\u8bbe\u7f6e\u7684\u6709\u6548. \u5b58\u5728\u8986\u76d6\u5173\u7cfb rv . linear (). setup { addType < SimpleModel > ( R . layout . item_simple ) onCreate { when ( it ){ R . layout . item_simple -> { // \u7279\u6b8a\u5904\u7406 } } } }. models = getData () \u5728onCreate\u4e2d\u83b7\u53d6\u60f3\u8981itemViewType, \u9700\u8981\u5728\u4f5c\u7528\u57df\u4e2d\u4f7f\u7528 it , \u800c\u4e0d\u662f\u5176 itemViewType \u5b57\u6bb5. \u8fd9\u662f\u56e0\u4e3a\u5728onCreateViewHolder\u671f\u95f4\u7684ViewHolder\u7684itemViewType\u5b9e\u9645\u4e0a\u662f\u6ca1\u6709\u503c\u7684. \u800conCreate\u5c31\u662f\u5bf9\u5e94\u7684 onCreateViewHolder","title":"\u51fd\u6570"},{"location":"lifecycle/#recyclerview","text":"\u5728\u4f7f\u7528rv\u5d4c\u5957rv\u65f6\u5e94\u5f53\u5728onCreate\u56de\u8c03\u4e2d\u4e3a\u5185\u5d4c\u7684rv\u8bbe\u7f6e\u89c6\u56fe(\u4f7f\u7528 rv.setup ), \u8fd9\u662f\u4e3a\u4e86\u907f\u514d\u540c\u4e00\u7c7b\u578b\u53cd\u590d\u521b\u5efarv\u5bfc\u81f4\u5185\u5b58\u6d88\u8017. \u800c\u5d4c\u5957\u7684rv\u6570\u636e\u53ef\u4ee5\u5728onBind\u4e2d\u7ed1\u5b9a\u6570\u636e, \u4f7f\u7528 rv.models rv . linear (). setup { addType < SimpleModel > ( R . layout . item_simple ) onCreate { val rv = findView < RecyclerView > ( R . id . rv_check_mode ) rv . linear (). setup { addType < NestedModel > ( R . layout . item_simple_nested ) } } onBind { val rv = findView < RecyclerView > ( R . id . rv_check_mode ) rv . models = getModel < Model > (). listNested } }","title":"\u5d4c\u5957RecyclerView"},{"location":"multi-type/","text":"\u4e0d\u540c\u6570\u636e\u7684\u591a\u7c7b\u578b \u00b6 rv . linear (). setup { addType < Model > ( R . layout . item_1 ) addType < Store > ( R . layout . item_2 ) }. models = data \u4e0d\u540c\u5b57\u6bb5\u7684\u591a\u7c7b\u578b \u00b6 rv . linear (). setup { addType < Model > { // \u4f7f\u7528\u5e74\u9f84\u6765\u4f5c\u4e3a\u5224\u65ad\u8fd4\u56de\u4e0d\u540c\u7684\u5e03\u5c40 when ( age ) { 23 -> { R . layout . item_1 } else -> { R . layout . item_2 } } } }. models = data \u5f53\u524d addType \u7684\u5927\u62ec\u53f7\u5185\u7684 this \u5c31\u662f\u4f60\u6307\u5b9a\u7684\u6cdb\u578b, \u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u901a\u8fc7 Model.age \u6765\u5224\u65ad\u8fd4\u56de\u4e0d\u540c\u7684\u591a\u7c7b\u578b \u533a\u5206\u7c7b\u578b \u00b6 itemViewType \u5c5e\u4e8eonBind\u51fd\u6570\u63a5\u53d7\u8005 BindingViewHolder \u7684\u5b57\u6bb5 rv . linear (). setup { addType < Model > ( R . layout . item_1 ) addType < Store > ( R . layout . item_2 ) onBind { // when ( itemViewType ) { R . layout . item_1 -> { // \u7c7b\u578b 1 } R . layout . item_2 -> { // \u7c7b\u578b 1 } } } }. models = data \u63a5\u53e3\u7c7b\u578b \u00b6 \u63a5\u53e3\u7c7b\u578b\u662f\u53ef\u4ee5addType\u4e00\u4e2a\u7c7b\u578b, \u7136\u540e\u7531\u53ef\u4ee5\u6dfb\u52a0N\u4e2a\u5176\u5b50\u7c7b\u4f5c\u4e3amodels\u7684\u6570\u636e. \u63a5\u53e3\u5177\u4f53\u5b9e\u73b0\u7531\u4e0d\u540c\u7684\u5b50\u7c7b\u4e0d\u540c\u5b9e\u73b0 \u793a\u4f8b interface BaseInterfaceModel { var text : String } data class InterfaceModel1 ( override var text : String ) : BaseInterfaceModel data class InterfaceModel2 ( val otherData : Int , override var text : String ) : BaseInterfaceModel data class InterfaceModel3 ( val otherText : String ) : BaseInterfaceModel { override var text : String = otherText } \u6784\u5efa\u793a\u4f8b\u6570\u636e private fun getData (): List < Any > { // \u5728Model\u4e2d\u4e5f\u53ef\u4ee5\u7ed1\u5b9a\u6570\u636e return List ( 3 ) { InterfaceModel1 ( \"item $ it \" ) } + List ( 3 ) { InterfaceModel2 ( it , \"item ${ 3 + it } \" ) } + List ( 3 ) { InterfaceModel3 ( \"item ${ 6 + it } \" ) } } \u58f0\u660e\u5217\u8868 binding . rv . linear (). setup { addType < BaseInterfaceModel > ( R . layout . item_interface_type ) R . id . item . onClick { toast ( \"\u70b9\u51fb\u6587\u672c\" ) } }. models = getData () \u8fd9\u91cc\u53ea\u662f\u6f14\u793a\u7b80\u5355\u7684\u6587\u672c, \u5177\u4f53\u53ef\u4ee5\u7f16\u5199\u66f4\u52a0\u590d\u6742\u7684\u4e1a\u52a1\u903b\u8f91","title":"\u591a\u7c7b\u578b"},{"location":"multi-type/#_1","text":"rv . linear (). setup { addType < Model > ( R . layout . item_1 ) addType < Store > ( R . layout . item_2 ) }. models = data","title":"\u4e0d\u540c\u6570\u636e\u7684\u591a\u7c7b\u578b"},{"location":"multi-type/#_2","text":"rv . linear (). setup { addType < Model > { // \u4f7f\u7528\u5e74\u9f84\u6765\u4f5c\u4e3a\u5224\u65ad\u8fd4\u56de\u4e0d\u540c\u7684\u5e03\u5c40 when ( age ) { 23 -> { R . layout . item_1 } else -> { R . layout . item_2 } } } }. models = data \u5f53\u524d addType \u7684\u5927\u62ec\u53f7\u5185\u7684 this \u5c31\u662f\u4f60\u6307\u5b9a\u7684\u6cdb\u578b, \u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u901a\u8fc7 Model.age \u6765\u5224\u65ad\u8fd4\u56de\u4e0d\u540c\u7684\u591a\u7c7b\u578b","title":"\u4e0d\u540c\u5b57\u6bb5\u7684\u591a\u7c7b\u578b"},{"location":"multi-type/#_3","text":"itemViewType \u5c5e\u4e8eonBind\u51fd\u6570\u63a5\u53d7\u8005 BindingViewHolder \u7684\u5b57\u6bb5 rv . linear (). setup { addType < Model > ( R . layout . item_1 ) addType < Store > ( R . layout . item_2 ) onBind { // when ( itemViewType ) { R . layout . item_1 -> { // \u7c7b\u578b 1 } R . layout . item_2 -> { // \u7c7b\u578b 1 } } } }. models = data","title":"\u533a\u5206\u7c7b\u578b"},{"location":"multi-type/#_4","text":"\u63a5\u53e3\u7c7b\u578b\u662f\u53ef\u4ee5addType\u4e00\u4e2a\u7c7b\u578b, \u7136\u540e\u7531\u53ef\u4ee5\u6dfb\u52a0N\u4e2a\u5176\u5b50\u7c7b\u4f5c\u4e3amodels\u7684\u6570\u636e. \u63a5\u53e3\u5177\u4f53\u5b9e\u73b0\u7531\u4e0d\u540c\u7684\u5b50\u7c7b\u4e0d\u540c\u5b9e\u73b0 \u793a\u4f8b interface BaseInterfaceModel { var text : String } data class InterfaceModel1 ( override var text : String ) : BaseInterfaceModel data class InterfaceModel2 ( val otherData : Int , override var text : String ) : BaseInterfaceModel data class InterfaceModel3 ( val otherText : String ) : BaseInterfaceModel { override var text : String = otherText } \u6784\u5efa\u793a\u4f8b\u6570\u636e private fun getData (): List < Any > { // \u5728Model\u4e2d\u4e5f\u53ef\u4ee5\u7ed1\u5b9a\u6570\u636e return List ( 3 ) { InterfaceModel1 ( \"item $ it \" ) } + List ( 3 ) { InterfaceModel2 ( it , \"item ${ 3 + it } \" ) } + List ( 3 ) { InterfaceModel3 ( \"item ${ 6 + it } \" ) } } \u58f0\u660e\u5217\u8868 binding . rv . linear (). setup { addType < BaseInterfaceModel > ( R . layout . item_interface_type ) R . id . item . onClick { toast ( \"\u70b9\u51fb\u6587\u672c\" ) } }. models = getData () \u8fd9\u91cc\u53ea\u662f\u6f14\u793a\u7b80\u5355\u7684\u6587\u672c, \u5177\u4f53\u53ef\u4ee5\u7f16\u5199\u66f4\u52a0\u590d\u6742\u7684\u4e1a\u52a1\u903b\u8f91","title":"\u63a5\u53e3\u7c7b\u578b"},{"location":"net/","text":"Net\u662f\u4e00\u4e2a\u7b2c\u4e09\u65b9\u7684\u5f3a\u5927\u7684\u7f51\u7edc\u8bf7\u6c42/\u5f02\u6b65\u4efb\u52a1\u6846\u67b6, \u975e\u5e38\u4f18\u79c0\u7684\u8bbe\u8ba1, BRV\u53ef\u4ee5\u548cNet\u8054\u52a8\u6269\u5c55\u529f\u80fd \u9996\u5148\u5f15\u7528 Net \u4f9d\u8d56\u5e93 dependencies { implementation 'com.github.liangjingkanji:Net:+' } \u63a8\u8350\u4f7f\u7528\u6307\u5b9a\u7684\u7248\u672c\u53f7\u66ff\u6362 + \u914d\u5408 Net \u6846\u67b6\u53ef\u4ee5\u5b9e\u73b0\u4ee5\u4e0b\u529f\u80fd \u81ea\u52a8\u4e0b\u62c9\u5237\u65b0 \u81ea\u52a8\u5206\u9875\u52a0\u8f7d \u81ea\u52a8\u7f3a\u7701\u9875","title":"\u7f51\u7edc\u8bf7\u6c42"},{"location":"preload/","text":"\u9884\u52a0\u8f7d \u5c31\u662f\u8fd8\u6ca1\u663e\u793a\u5230\u5217\u8868\u672b\u5c3e\u5c31\u4f1a\u5f00\u59cb\u52a0\u8f7d\u4e0b\u4e00\u9875, \u6267\u884c\u4e0a\u62c9\u52a0\u8f7d\u7684\u903b\u8f91, \u524d\u63d0\u662f\u5f53\u524d\u5217\u8868\u6709\u4e0b\u4e00\u9875 \u9884\u62c9\u53d6 \u5c31\u662f\u63d0\u524d\u62c9\u53d6. \u548c\u4e0a\u9762\u9884\u52a0\u8f7d\u5dee\u4e0d\u591a\u7406\u89e3. \u4e0d\u77e5\u9053\u62c9\u53d6\u662f\u4ec0\u4e48\u8bf7\u9605\u8bfb \u62c9\u53d6\u66f4\u591a \u5f53\u524d\u5217\u8868\u9884\u52a0\u8f7d\u7d22\u5f15 \u00b6 BRV\u9ed8\u8ba4\u5f00\u542f\u9884\u52a0\u8f7d/\u9884\u62c9\u53d6. \u901a\u8fc7\u51fd\u6570\u53ef\u4ee5\u6307\u5b9a\u6210\u5458\u5c5e\u6027 preloadIndex \u53ef\u4ee5\u63a7\u5236\u663e\u793a\u5230\u5012\u6570\u7b2c\u51e0\u4e2a\u6761\u76ee\u65f6\u5c31\u5f00\u59cb\u9884\u52a0\u8f7d \u9884\u62c9\u53d6\u548c\u9884\u52a0\u8f7d\u6761\u4ef6\u90fd\u662f\u4f7f\u7528\u7684\u540c\u4e00\u4e2a\u5b57\u6bb5. \u8bbe\u7f6epreloadIndex\u540e\u4e24\u8005\u90fd\u4f1a\u751f\u6548 \u9ed8\u8ba4\u503c\u662f: 3 var preloadIndex = 3 \u5168\u5c40\u9884\u52a0\u8f7d\u7d22\u5f15 \u00b6 \u901a\u8fc7 PageRefreshLayout.preloadIndex \u53ef\u4ee5\u8bbe\u7f6e\u5168\u5c40\u9ed8\u8ba4\u503c. \u8fd9\u6837\u6240\u6709\u5217\u8868\u90fd\u9ed8\u8ba4\u5c31\u662f\u4f60\u6307\u5b9a\u7684\u7d22\u5f15\u5f00\u59cb\u9884\u52a0\u8f7d","title":"\u9884\u52a0\u8f7d/\u9884\u62c9\u53d6"},{"location":"preload/#_1","text":"BRV\u9ed8\u8ba4\u5f00\u542f\u9884\u52a0\u8f7d/\u9884\u62c9\u53d6. \u901a\u8fc7\u51fd\u6570\u53ef\u4ee5\u6307\u5b9a\u6210\u5458\u5c5e\u6027 preloadIndex \u53ef\u4ee5\u63a7\u5236\u663e\u793a\u5230\u5012\u6570\u7b2c\u51e0\u4e2a\u6761\u76ee\u65f6\u5c31\u5f00\u59cb\u9884\u52a0\u8f7d \u9884\u62c9\u53d6\u548c\u9884\u52a0\u8f7d\u6761\u4ef6\u90fd\u662f\u4f7f\u7528\u7684\u540c\u4e00\u4e2a\u5b57\u6bb5. \u8bbe\u7f6epreloadIndex\u540e\u4e24\u8005\u90fd\u4f1a\u751f\u6548 \u9ed8\u8ba4\u503c\u662f: 3 var preloadIndex = 3","title":"\u5f53\u524d\u5217\u8868\u9884\u52a0\u8f7d\u7d22\u5f15"},{"location":"preload/#_2","text":"\u901a\u8fc7 PageRefreshLayout.preloadIndex \u53ef\u4ee5\u8bbe\u7f6e\u5168\u5c40\u9ed8\u8ba4\u503c. \u8fd9\u6837\u6240\u6709\u5217\u8868\u90fd\u9ed8\u8ba4\u5c31\u662f\u4f60\u6307\u5b9a\u7684\u7d22\u5f15\u5f00\u59cb\u9884\u52a0\u8f7d","title":"\u5168\u5c40\u9884\u52a0\u8f7d\u7d22\u5f15"},{"location":"recycle/","text":"\u56e0\u4e3aBRV\u5e76\u4e0d\u9700\u8981\u521b\u5efaAdapter, \u6240\u4ee5\u5f88\u591a\u4eba\u53ef\u80fd\u4e0d\u77e5\u9053\u5982\u4f55\u590d\u7528\u76f8\u4f3c\u5217\u8868. \u5b9e\u9645\u4e0a\u66f4\u52a0\u7b80\u5355 \u9996\u5148\u6839\u636e\u8bf7\u4f60\u4e86\u89e3BRV \u4e09\u79cd\u7ed1\u5b9a\u6570\u636e\u7684\u65b9\u5f0f \u4f7f\u7528DataBinding \u00b6 \u5982\u679c\u4f60\u4f7f\u7528DataBinding\u90a3\u4e48\u5c31\u66f4\u597d\u5b9e\u73b0\u4e86. DataBinding\u7684\u4e1a\u52a1\u903b\u8f91\u90fd\u5728Model\u4e2d, \u89c6\u56fe\u90fd\u5728XML\u6587\u4ef6\u4e2d. \u5982\u679cUI\u6216\u8005\u4e1a\u52a1\u76f8\u540c\u4f60\u6ce8\u518c\u540c\u6837\u7684\u7c7b\u548cXML\u6587\u4ef6\u5373\u53ef // \u5217\u8868 1 rv . linear (). setup { addType < Model > ( R . layout . item_simple ) }. models = getData () // \u5217\u88682 rv2 . linear (). setup { addType < Model > ( R . layout . item_simple ) }. models = getData () \u6570\u636e\u6a21\u578b\u5dee\u5f02 \u00b6 \u5982\u679c\u6570\u636e\u6a21\u578b\u4e0d\u4e00\u6837, \u4f46\u662fXML\u4e00\u6837. \u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f \u5c06\u591a\u4e2a\u7c7b\u5305\u88c5\u5230\u4e00\u4e2a\u7c7b\u5bf9\u8c61\u4e2d\u4f5c\u4e3a\u5217\u8868\u6570\u636e(\u4e07\u7269\u7686\u5bf9\u8c61) class ComposeModel ( var model : Model , var model2 : Model2 ) rv . linear (). setup { addType < ComposeModel > ( R . layout . item_simple ) }. models = getData () \u591a\u4e2a\u7c7b\u5b9e\u73b0\u6307\u5b9a\u63a5\u53e3: \u63a5\u53e3\u7c7b\u578b interface ModelImpl { var text : String = defaultText // \u66b4\u9732\u4f7f\u7528\u51fd\u6570 } class Model (): ModelImpl { override var text : String = otherText } class Model2 (): ModelImpl { override var text : String = otherText } rv . linear (). setup { addType < ModelImpl > ( R . layout . item_simple ) }. models = getData () \u5b9e\u73b0ItemBind\u63a5\u53e3 \u00b6 \u8fd9\u79cd\u6570\u636e\u7ed1\u5b9a\u5f62\u5f0f\u4e1a\u52a1\u548cUI\u90fd\u5728\u4e00\u4e2a\u51fd\u6570\u4e2d\u5b9e\u73b0, \u6240\u4ee5\u4f60\u91cd\u590d\u4f7f\u7528\u8fd9\u4e2a\u6570\u636e\u6a21\u578b\u96c6\u5408, \u5982\u679cUI\u76f8\u540c\u4f46\u662f\u6570\u636e\u6709\u5dee\u5f02\u53c2\u8003\u4e0a\u9762\u5305\u88c5\u6570\u636e\u6a21\u578b class SimpleModel ( var name : String = \"BRV\" ) : ItemBind { override fun onBind ( holder : BindingAdapter . BindingViewHolder ) { val appName = holder . context . getString ( R . string . app_name ) holder . findView < TextView > ( R . id . tv_simple ). text = appName + itemPosition } } // \u5217\u8868 1 rv . linear (). setup { addType < SimpleModel > ( R . layout . item_simple ) }. models = getData () // \u5217\u88682 rv2 . linear (). setup { addType < SimpleModel > ( R . layout . item_simple2 ) }. models = getData () \u4f7f\u7528onBind \u00b6 \u4ee5\u4e0b\u8fd9\u79cd\u5f62\u5f0f\u4e0d\u592a\u65b9\u4fbf\u590d\u7528. \u672c\u8eab\u4e5f\u53ea\u662f\u56fe\u65b9\u4fbf\u5e76\u4e0d\u662f\u5f88\u63a8\u8350\u5927\u91cf\u903b\u8f91\u573a\u666f\u4e0b\u4f7f\u7528. \u8fd9\u4e2a\u4f60\u8981\u590d\u5236\u5c31\u4f7f\u7528\u590d\u5236\u7c98\u8d34\u5427.... rv . linear (). setup { addType < SimpleModel > ( R . layout . item_simple ) onBind { findView < TextView > ( R . id . tv_simple ). text = getModel < SimpleModel > (). name } }. models = getData () \u6269\u5c55\u51fd\u6570 \u00b6 \u5b8c\u6574\u590d\u7528\u6784\u5efa\u5217\u8868\u4ee3\u7801\u53ef\u4ee5\u76f4\u63a5\u5c01\u88c5\u4e3aKt\u6269\u5c55\u51fd\u6570 /** * \u4f7f\u7528 */ viewBinding . rv1 . setupNews { }. models = listOf < News1Module > () val adapter = viewBinding . rv2 . setupNews { } adapter . models = listOf < News1Module > () /** * adapter ? */ fun < T : INews > RecyclerView . setupNews ( onItemContainerClick : ( T ) -> Unit = {}): BindingAdapter = linear () . divider ( R . drawable . item_news_rv_divider ) . setup { addType < INews > ( R . layout . item_standard_news ) onBind { } R . id . v_container . onClick { onItemContainerClick . invoke ( getModel < T > ()) } } /** * \u5b9a\u4e49\u63a5\u53e3 */ interface INews { val title : String val image : String val content : String val url : String val date : String val time : String } /** * \u5b9e\u4f53\u7c7b 1 */ data class News1Module ( val news1Field : String , override val title : String , override val image : String , override val content : String , override val url : String , override val date : String , override val time : String ) : INews /** * \u5b9e\u4f53\u7c7b 2 */ data class News2Module ( val news2Field : String , val news2Field1 : String , val news2Field2 : String , val news2Field3 : String , val news2Field4 : String , val news2Field5 : String , ) : INews { override val title : String get () = news2Field override val image : String get () = news2Field1 override val content : String get () = news2Field2 override val url : String get () = news2Field3 override val date : String get () = news2Field4 override val time : String get () = news2Field5 }","title":"\u590d\u7528\u5217\u8868"},{"location":"recycle/#databinding","text":"\u5982\u679c\u4f60\u4f7f\u7528DataBinding\u90a3\u4e48\u5c31\u66f4\u597d\u5b9e\u73b0\u4e86. DataBinding\u7684\u4e1a\u52a1\u903b\u8f91\u90fd\u5728Model\u4e2d, \u89c6\u56fe\u90fd\u5728XML\u6587\u4ef6\u4e2d. \u5982\u679cUI\u6216\u8005\u4e1a\u52a1\u76f8\u540c\u4f60\u6ce8\u518c\u540c\u6837\u7684\u7c7b\u548cXML\u6587\u4ef6\u5373\u53ef // \u5217\u8868 1 rv . linear (). setup { addType < Model > ( R . layout . item_simple ) }. models = getData () // \u5217\u88682 rv2 . linear (). setup { addType < Model > ( R . layout . item_simple ) }. models = getData ()","title":"\u4f7f\u7528DataBinding"},{"location":"recycle/#_1","text":"\u5982\u679c\u6570\u636e\u6a21\u578b\u4e0d\u4e00\u6837, \u4f46\u662fXML\u4e00\u6837. \u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f \u5c06\u591a\u4e2a\u7c7b\u5305\u88c5\u5230\u4e00\u4e2a\u7c7b\u5bf9\u8c61\u4e2d\u4f5c\u4e3a\u5217\u8868\u6570\u636e(\u4e07\u7269\u7686\u5bf9\u8c61) class ComposeModel ( var model : Model , var model2 : Model2 ) rv . linear (). setup { addType < ComposeModel > ( R . layout . item_simple ) }. models = getData () \u591a\u4e2a\u7c7b\u5b9e\u73b0\u6307\u5b9a\u63a5\u53e3: \u63a5\u53e3\u7c7b\u578b interface ModelImpl { var text : String = defaultText // \u66b4\u9732\u4f7f\u7528\u51fd\u6570 } class Model (): ModelImpl { override var text : String = otherText } class Model2 (): ModelImpl { override var text : String = otherText } rv . linear (). setup { addType < ModelImpl > ( R . layout . item_simple ) }. models = getData ()","title":"\u6570\u636e\u6a21\u578b\u5dee\u5f02"},{"location":"recycle/#itembind","text":"\u8fd9\u79cd\u6570\u636e\u7ed1\u5b9a\u5f62\u5f0f\u4e1a\u52a1\u548cUI\u90fd\u5728\u4e00\u4e2a\u51fd\u6570\u4e2d\u5b9e\u73b0, \u6240\u4ee5\u4f60\u91cd\u590d\u4f7f\u7528\u8fd9\u4e2a\u6570\u636e\u6a21\u578b\u96c6\u5408, \u5982\u679cUI\u76f8\u540c\u4f46\u662f\u6570\u636e\u6709\u5dee\u5f02\u53c2\u8003\u4e0a\u9762\u5305\u88c5\u6570\u636e\u6a21\u578b class SimpleModel ( var name : String = \"BRV\" ) : ItemBind { override fun onBind ( holder : BindingAdapter . BindingViewHolder ) { val appName = holder . context . getString ( R . string . app_name ) holder . findView < TextView > ( R . id . tv_simple ). text = appName + itemPosition } } // \u5217\u8868 1 rv . linear (). setup { addType < SimpleModel > ( R . layout . item_simple ) }. models = getData () // \u5217\u88682 rv2 . linear (). setup { addType < SimpleModel > ( R . layout . item_simple2 ) }. models = getData ()","title":"\u5b9e\u73b0ItemBind\u63a5\u53e3"},{"location":"recycle/#onbind","text":"\u4ee5\u4e0b\u8fd9\u79cd\u5f62\u5f0f\u4e0d\u592a\u65b9\u4fbf\u590d\u7528. \u672c\u8eab\u4e5f\u53ea\u662f\u56fe\u65b9\u4fbf\u5e76\u4e0d\u662f\u5f88\u63a8\u8350\u5927\u91cf\u903b\u8f91\u573a\u666f\u4e0b\u4f7f\u7528. \u8fd9\u4e2a\u4f60\u8981\u590d\u5236\u5c31\u4f7f\u7528\u590d\u5236\u7c98\u8d34\u5427.... rv . linear (). setup { addType < SimpleModel > ( R . layout . item_simple ) onBind { findView < TextView > ( R . id . tv_simple ). text = getModel < SimpleModel > (). name } }. models = getData ()","title":"\u4f7f\u7528onBind"},{"location":"recycle/#_2","text":"\u5b8c\u6574\u590d\u7528\u6784\u5efa\u5217\u8868\u4ee3\u7801\u53ef\u4ee5\u76f4\u63a5\u5c01\u88c5\u4e3aKt\u6269\u5c55\u51fd\u6570 /** * \u4f7f\u7528 */ viewBinding . rv1 . setupNews { }. models = listOf < News1Module > () val adapter = viewBinding . rv2 . setupNews { } adapter . models = listOf < News1Module > () /** * adapter ? */ fun < T : INews > RecyclerView . setupNews ( onItemContainerClick : ( T ) -> Unit = {}): BindingAdapter = linear () . divider ( R . drawable . item_news_rv_divider ) . setup { addType < INews > ( R . layout . item_standard_news ) onBind { } R . id . v_container . onClick { onItemContainerClick . invoke ( getModel < T > ()) } } /** * \u5b9a\u4e49\u63a5\u53e3 */ interface INews { val title : String val image : String val content : String val url : String val date : String val time : String } /** * \u5b9e\u4f53\u7c7b 1 */ data class News1Module ( val news1Field : String , override val title : String , override val image : String , override val content : String , override val url : String , override val date : String , override val time : String ) : INews /** * \u5b9e\u4f53\u7c7b 2 */ data class News2Module ( val news2Field : String , val news2Field1 : String , val news2Field2 : String , val news2Field3 : String , val news2Field4 : String , val news2Field5 : String , ) : INews { override val title : String get () = news2Field override val image : String get () = news2Field1 override val content : String get () = news2Field2 override val url : String get () = news2Field3 override val date : String get () = news2Field4 override val time : String get () = news2Field5 }","title":"\u6269\u5c55\u51fd\u6570"},{"location":"refresh-data/","text":"BRV\u7684\u6570\u636e\u96c6\u5408\u65e0\u8bba\u662f models \u6216 addData() \u90fd\u662f\u6dfb\u52a0\u7684 List<Any?>(\u4efb\u610f\u5bf9\u8c61\u6570\u636e\u96c6\u5408) . \u6240\u4ee5\u53ea\u8981\u662f\u4e00\u4e2a\u96c6\u5408\u5373\u53ef\u6620\u5c04\u51fa\u4e00\u4e2a\u5217\u8868 \u5982\u679c\u6570\u636e\u4e0d\u6ee1\u8db3\u4e00\u4e2a\u96c6\u5408\u6761\u4ef6(\u6216\u4efb\u4f55\u6570\u636e\u4e0a\u7684\u95ee\u9898), \u8bf7\u81ea\u5df1\u5904\u7406\u4e0b\u6570\u636e \u6dfb\u52a0\u6570\u636e \u00b6 \u4f7f\u7528BRV\u81ea\u5e26\u7684\u4e24\u4e2a\u65b9\u6cd5\u6dfb\u52a0\u6570\u636e\u4f1a\u81ea\u52a8\u5237\u65b0UI rv . models = dataList // \u81ea\u52a8\u4f7f\u7528 notifyDataSetChanged rv . addModels ( newDataList ) // \u81ea\u52a8\u4f7f\u7528 notifyItemRangeInserted, \u5f53\u7136\u4e5f\u53ef\u4ee5\u7981\u6b62\u52a8\u753b \u4ee3\u7801\u793a\u4f8b binding . rv . linear (). setup { addType < SimpleModel > ( R . layout . item_simple ) onBind { findView < TextView > ( R . id . tv_simple ). text = getModel < SimpleModel > (). name } }. models = getData () \u5207\u8bb0Java/Kotlin\u7684\u5f15\u7528\u7c7b\u578b\u662f\u4f20\u5740, \u5982\u679c\u8fd9\u4e24\u4e2a\u51fd\u6570\u64cd\u4f5c\u7684\u6570\u636e\u96c6\u90fd\u662f\u540c\u4e00\u4e2a\u4f1a\u5bfc\u81f4\u95ee\u9898 - \u81ea\u5df1\u6dfb\u52a0\u81ea\u5df1. \u8fd9\u79cd\u5c5e\u4e8e\u57fa\u672c\u7684\u8bed\u6cd5\u95ee\u9898 \u5bf9\u6bd4\u6570\u636e\u5237\u65b0 \u00b6 BRV\u53ef\u4ee5\u6839\u636e\u65b0\u7684\u6570\u636e\u96c6\u5408\u548c\u65e7\u7684\u6570\u636e\u96c6\u5408\u5bf9\u6bd4\u5224\u65ad\u6765\u81ea\u52a8\u4f7f\u7528\u5237\u65b0\u52a8\u753b rv . setDifferModels ( getRandomData ()) \u8be5\u51fd\u6570\u5185\u90e8\u4f7f\u7528Android\u81ea\u5e26\u5de5\u5177 DiffUtil \u8fdb\u884c\u6570\u636e\u5bf9\u6bd4\u5237\u65b0, \u4f46\u662f\u652f\u6301\u5f02\u6b65/\u540c\u6b65\u7ebf\u7a0b\u5bf9\u6bd4 fun setDifferModels ( newModels : List < Any? >? , detectMoves : Boolean = true , commitCallback : Runnable? = null ) \u6570\u636e\u5bf9\u6bd4\u9ed8\u8ba4\u4f7f\u7528 equals \u51fd\u6570\u5bf9\u6bd4, \u4f60\u53ef\u4ee5\u4e3a\u6570\u636e\u624b\u52a8\u5b9e\u73b0equals\u51fd\u6570\u6765\u4fee\u6539\u5bf9\u6bd4\u903b\u8f91. \u63a8\u8350\u5b9a\u4e49\u6570\u636e\u4e3a data class, \u56e0\u5176\u4f1a\u6839\u636e\u6784\u9020\u53c2\u6570\u81ea\u52a8\u751f\u6210equals \u5982\u679c\u9700\u8981\u5b8c\u5168\u81ea\u5b9a\u4e49\u5bf9\u6bd4\u6570\u636e\u7684\u5224\u65ad\u903b\u8f91\u5c31\u5b9e\u73b0 ItemDifferCallback \u63a5\u53e3 rv . linear (). setup { addType < SimpleModel > ( R . layout . item_simple ) itemDifferCallback = object : ItemDifferCallback { override fun areContentsTheSame ( oldItem : Any , newItem : Any ): Boolean { return if ( oldItem is SimpleModel && newItem is SimpleModel ) { oldItem . name == newItem . name } else super . areContentsTheSame ( oldItem , newItem ) } } // ... }. models = getRandomData ( true ) \u4f7f\u7528 setDifferModels \u5bf9\u6bd4\u5237\u65b0\u65f6, \u76f8\u540citem\u5237\u65b0\u6709\u767d\u5c4f\u52a8\u753b\u8fd9\u662f\u56e0\u4e3a getChangePayload \u8fd4\u56denull, \u968f\u4fbf\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u5373\u53ef\u5173\u95ed rv . linear (). setup { // ... itemDifferCallback = object : ItemDifferCallback { override fun getChangePayload ( oldItem : Any , newItem : Any ): Any? { return true } } }. models = getRandomData ( true ) \u5c40\u90e8\u5237\u65b0 \u00b6 \u5c40\u90e8\u5237\u65b0\u67d0\u4e2a\u6216\u8005\u6279\u91cfItem\u7684\u5185\u5bb9, \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5230\u4e24\u79cd\u65b9\u5f0f notifyItemChanged \u7b49\u51fd\u6570, \u8fd9\u4e2a\u4e0a\u9762\u63d0\u8fc7 DataBinding\u672c\u8eab\u5c31\u652f\u6301\u8fd9\u4e2a\u7279\u6027 (\u63a8\u8350\u6b64\u65b9\u6cd5), \u6027\u80fd\u6700\u9ad8/\u65b9\u4fbf. Demo\u4e2d\u7684 \u9009\u62e9\u6a21\u5f0f \u5c31\u662f\u5982\u6b64\u5b9e\u73b0 BRV\u652f\u6301DataBinding\u7ed1\u5b9a\u6570\u636e, DataBinding\u7684\u6570\u636e\u6a21\u578b\u5982\u679c\u7ee7\u627fObservable\u5c31\u53ef\u4ee5\u81ea\u52a8\u66f4\u65b0UI data class CheckModel ( var checked : Boolean = false , var visibility : Boolean = false ) : BaseObservable () \u53ef\u4ee5\u81ea\u52a8\u66f4\u65b0UI\u7684\u5b57\u6bb5\u7c7b\u578b, \u8fd9\u6837\u53ef\u4ee5\u4e0d\u7528\u6574\u4e2a\u6570\u636e\u6a21\u578b\u7ee7\u627fBaseObservable LiveData ObservableField \u4ee5\u4e0a\u5c5e\u4e8eDataBinding\u4f7f\u7528\u57fa\u7840, \u5177\u4f53\u8bf7\u9605\u8bfb: DataBinding\u6700\u5168\u4f7f\u7528\u8bf4\u660e \u5237\u65b0\u51fd\u6570 \u00b6 \u8fd9\u91cc\u4ecb\u7ecd\u7684\u5c5e\u4e8eRecyclerView\u5b98\u65b9\u51fd\u6570, BRV\u7684 BindingAdapter \u7ee7\u627f RecyclerView.Adapter , \u81ea\u7136\u62e5\u6709\u7236\u7c7b\u7684\u6570\u636e\u5237\u65b0\u65b9\u6cd5. \u7531\u4e8e\u5f88\u591a\u5f00\u53d1\u8005\u5e38\u95ee\u6b64\u9700\u6c42, \u6545\u7edf\u4e00\u4ecb\u7ecd\u4e0b class BindingAdapter : RecyclerView . Adapter < BindingAdapter . BindingViewHolder > () \u5237\u65b0\u51fd\u6570 \u63cf\u8ff0 notifyDataSetChanged \u5168\u90e8\u6570\u636e\u5237\u65b0(\u4e0d\u5e26\u52a8\u753b) notifyItemChanged \u5c40\u90e8\u6570\u636e\u53d8\u66f4 notifyItemInserted Item\u63d2\u5165 notifyItemMoved Item\u79fb\u52a8\u4f4d\u7f6e notifyItemRemoved Item\u5220\u9664 notifyItemRangeChanged \u6307\u5b9a\u8303\u56f4\u5185Item\u6570\u636e\u53d8\u66f4 notifyItemRangeInserted \u6307\u5b9a\u8303\u56f4\u5185Item\u63d2\u5165 notifyItemRangeRemoved \u6307\u5b9a\u8303\u56f4\u5185\u5220\u9664 \u5177\u4f53\u533a\u522b\u53ef\u4ee5\u641c\u7d22: RecycleView\u5c40\u90e8\u5237\u65b0 \u8981\u6ce8\u610f\u7684\u662f\u8fd9\u4e9b\u65b9\u6cd5\u90fd\u662f\u5237\u65b0UI, \u5982\u679c\u4f60\u5217\u8868\u6570\u636e\u5e76\u6ca1\u6709\u53d1\u751f\u6539\u53d8\u90a3\u4e48\u5237\u65b0\u662f\u65e0\u6548\u7684 rv . linear (). setup { addType < SimpleModel > ( R . layout . item_simple ) }. models = dataList dataList . add ( SimpleModel ()) rv . bindingAdapter . notifyItemInserted ( dataList . size ) // \u6700\u540e\u7684\u4f4d\u7f6e\u6709\u63d2\u5165\u4e00\u4e2a\u65b0\u7684Item","title":"\u66f4\u65b0\u6570\u636e"},{"location":"refresh-data/#_1","text":"\u4f7f\u7528BRV\u81ea\u5e26\u7684\u4e24\u4e2a\u65b9\u6cd5\u6dfb\u52a0\u6570\u636e\u4f1a\u81ea\u52a8\u5237\u65b0UI rv . models = dataList // \u81ea\u52a8\u4f7f\u7528 notifyDataSetChanged rv . addModels ( newDataList ) // \u81ea\u52a8\u4f7f\u7528 notifyItemRangeInserted, \u5f53\u7136\u4e5f\u53ef\u4ee5\u7981\u6b62\u52a8\u753b \u4ee3\u7801\u793a\u4f8b binding . rv . linear (). setup { addType < SimpleModel > ( R . layout . item_simple ) onBind { findView < TextView > ( R . id . tv_simple ). text = getModel < SimpleModel > (). name } }. models = getData () \u5207\u8bb0Java/Kotlin\u7684\u5f15\u7528\u7c7b\u578b\u662f\u4f20\u5740, \u5982\u679c\u8fd9\u4e24\u4e2a\u51fd\u6570\u64cd\u4f5c\u7684\u6570\u636e\u96c6\u90fd\u662f\u540c\u4e00\u4e2a\u4f1a\u5bfc\u81f4\u95ee\u9898 - \u81ea\u5df1\u6dfb\u52a0\u81ea\u5df1. \u8fd9\u79cd\u5c5e\u4e8e\u57fa\u672c\u7684\u8bed\u6cd5\u95ee\u9898","title":"\u6dfb\u52a0\u6570\u636e"},{"location":"refresh-data/#_2","text":"BRV\u53ef\u4ee5\u6839\u636e\u65b0\u7684\u6570\u636e\u96c6\u5408\u548c\u65e7\u7684\u6570\u636e\u96c6\u5408\u5bf9\u6bd4\u5224\u65ad\u6765\u81ea\u52a8\u4f7f\u7528\u5237\u65b0\u52a8\u753b rv . setDifferModels ( getRandomData ()) \u8be5\u51fd\u6570\u5185\u90e8\u4f7f\u7528Android\u81ea\u5e26\u5de5\u5177 DiffUtil \u8fdb\u884c\u6570\u636e\u5bf9\u6bd4\u5237\u65b0, \u4f46\u662f\u652f\u6301\u5f02\u6b65/\u540c\u6b65\u7ebf\u7a0b\u5bf9\u6bd4 fun setDifferModels ( newModels : List < Any? >? , detectMoves : Boolean = true , commitCallback : Runnable? = null ) \u6570\u636e\u5bf9\u6bd4\u9ed8\u8ba4\u4f7f\u7528 equals \u51fd\u6570\u5bf9\u6bd4, \u4f60\u53ef\u4ee5\u4e3a\u6570\u636e\u624b\u52a8\u5b9e\u73b0equals\u51fd\u6570\u6765\u4fee\u6539\u5bf9\u6bd4\u903b\u8f91. \u63a8\u8350\u5b9a\u4e49\u6570\u636e\u4e3a data class, \u56e0\u5176\u4f1a\u6839\u636e\u6784\u9020\u53c2\u6570\u81ea\u52a8\u751f\u6210equals \u5982\u679c\u9700\u8981\u5b8c\u5168\u81ea\u5b9a\u4e49\u5bf9\u6bd4\u6570\u636e\u7684\u5224\u65ad\u903b\u8f91\u5c31\u5b9e\u73b0 ItemDifferCallback \u63a5\u53e3 rv . linear (). setup { addType < SimpleModel > ( R . layout . item_simple ) itemDifferCallback = object : ItemDifferCallback { override fun areContentsTheSame ( oldItem : Any , newItem : Any ): Boolean { return if ( oldItem is SimpleModel && newItem is SimpleModel ) { oldItem . name == newItem . name } else super . areContentsTheSame ( oldItem , newItem ) } } // ... }. models = getRandomData ( true ) \u4f7f\u7528 setDifferModels \u5bf9\u6bd4\u5237\u65b0\u65f6, \u76f8\u540citem\u5237\u65b0\u6709\u767d\u5c4f\u52a8\u753b\u8fd9\u662f\u56e0\u4e3a getChangePayload \u8fd4\u56denull, \u968f\u4fbf\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u5373\u53ef\u5173\u95ed rv . linear (). setup { // ... itemDifferCallback = object : ItemDifferCallback { override fun getChangePayload ( oldItem : Any , newItem : Any ): Any? { return true } } }. models = getRandomData ( true )","title":"\u5bf9\u6bd4\u6570\u636e\u5237\u65b0"},{"location":"refresh-data/#_3","text":"\u5c40\u90e8\u5237\u65b0\u67d0\u4e2a\u6216\u8005\u6279\u91cfItem\u7684\u5185\u5bb9, \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5230\u4e24\u79cd\u65b9\u5f0f notifyItemChanged \u7b49\u51fd\u6570, \u8fd9\u4e2a\u4e0a\u9762\u63d0\u8fc7 DataBinding\u672c\u8eab\u5c31\u652f\u6301\u8fd9\u4e2a\u7279\u6027 (\u63a8\u8350\u6b64\u65b9\u6cd5), \u6027\u80fd\u6700\u9ad8/\u65b9\u4fbf. Demo\u4e2d\u7684 \u9009\u62e9\u6a21\u5f0f \u5c31\u662f\u5982\u6b64\u5b9e\u73b0 BRV\u652f\u6301DataBinding\u7ed1\u5b9a\u6570\u636e, DataBinding\u7684\u6570\u636e\u6a21\u578b\u5982\u679c\u7ee7\u627fObservable\u5c31\u53ef\u4ee5\u81ea\u52a8\u66f4\u65b0UI data class CheckModel ( var checked : Boolean = false , var visibility : Boolean = false ) : BaseObservable () \u53ef\u4ee5\u81ea\u52a8\u66f4\u65b0UI\u7684\u5b57\u6bb5\u7c7b\u578b, \u8fd9\u6837\u53ef\u4ee5\u4e0d\u7528\u6574\u4e2a\u6570\u636e\u6a21\u578b\u7ee7\u627fBaseObservable LiveData ObservableField \u4ee5\u4e0a\u5c5e\u4e8eDataBinding\u4f7f\u7528\u57fa\u7840, \u5177\u4f53\u8bf7\u9605\u8bfb: DataBinding\u6700\u5168\u4f7f\u7528\u8bf4\u660e","title":"\u5c40\u90e8\u5237\u65b0"},{"location":"refresh-data/#_4","text":"\u8fd9\u91cc\u4ecb\u7ecd\u7684\u5c5e\u4e8eRecyclerView\u5b98\u65b9\u51fd\u6570, BRV\u7684 BindingAdapter \u7ee7\u627f RecyclerView.Adapter , \u81ea\u7136\u62e5\u6709\u7236\u7c7b\u7684\u6570\u636e\u5237\u65b0\u65b9\u6cd5. \u7531\u4e8e\u5f88\u591a\u5f00\u53d1\u8005\u5e38\u95ee\u6b64\u9700\u6c42, \u6545\u7edf\u4e00\u4ecb\u7ecd\u4e0b class BindingAdapter : RecyclerView . Adapter < BindingAdapter . BindingViewHolder > () \u5237\u65b0\u51fd\u6570 \u63cf\u8ff0 notifyDataSetChanged \u5168\u90e8\u6570\u636e\u5237\u65b0(\u4e0d\u5e26\u52a8\u753b) notifyItemChanged \u5c40\u90e8\u6570\u636e\u53d8\u66f4 notifyItemInserted Item\u63d2\u5165 notifyItemMoved Item\u79fb\u52a8\u4f4d\u7f6e notifyItemRemoved Item\u5220\u9664 notifyItemRangeChanged \u6307\u5b9a\u8303\u56f4\u5185Item\u6570\u636e\u53d8\u66f4 notifyItemRangeInserted \u6307\u5b9a\u8303\u56f4\u5185Item\u63d2\u5165 notifyItemRangeRemoved \u6307\u5b9a\u8303\u56f4\u5185\u5220\u9664 \u5177\u4f53\u533a\u522b\u53ef\u4ee5\u641c\u7d22: RecycleView\u5c40\u90e8\u5237\u65b0 \u8981\u6ce8\u610f\u7684\u662f\u8fd9\u4e9b\u65b9\u6cd5\u90fd\u662f\u5237\u65b0UI, \u5982\u679c\u4f60\u5217\u8868\u6570\u636e\u5e76\u6ca1\u6709\u53d1\u751f\u6539\u53d8\u90a3\u4e48\u5237\u65b0\u662f\u65e0\u6548\u7684 rv . linear (). setup { addType < SimpleModel > ( R . layout . item_simple ) }. models = dataList dataList . add ( SimpleModel ()) rv . bindingAdapter . notifyItemInserted ( dataList . size ) // \u6700\u540e\u7684\u4f4d\u7f6e\u6709\u63d2\u5165\u4e00\u4e2a\u65b0\u7684Item","title":"\u5237\u65b0\u51fd\u6570"},{"location":"refresh/","text":"\u672c\u7ae0\u5185\u5bb9\u770b\u4f3c\u591a\u5b9e\u5219\u4ee3\u7801\u5f88\u7b80\u7ec3, \u53ea\u662f\u4e3a\u907f\u514d\u4ecb\u7ecd\u4e0d\u591f\u8be6\u7ec6 SmartRefreshLayout \u5e94\u8be5\u662f\u76ee\u524dAndroid\u4e0a\u6269\u5c55\u6027\u6700\u5f3a\u7684\u5237\u65b0\u6846\u67b6, \u800cBRV\u7684\u4e0b\u62c9\u5237\u65b0\u548c\u4e0a\u62c9\u52a0\u8f7d\u6b63\u662f\u6269\u5c55\u7684SmartRefreshLayout , \u652f\u6301\u5176\u6240\u6709\u7279\u6027\u5e76\u4e14\u8fd8\u589e\u52a0\u4e86\u65b0\u7684\u529f\u80fd. \u5982\u679c\u9700\u8981\u66f4\u591a\u7684\u4e0b\u62c9\u5237\u65b0\u6216\u8005\u4e0a\u62c9\u52a0\u8f7d\u7684\u81ea\u5b9a\u4e49\u9700\u6c42\u8bf7\u67e5\u770b SmartRefreshLayout \u7684\u4f7f\u7528\u6587\u6863 \u672c\u6846\u67b6\u4e2d\u7684 PageRefreshLayout \u7ee7\u627f\u81ea SmartRefreshLayout , \u6545\u62e5\u6709\u5176\u6240\u6709\u7279\u6027 \u672c\u5e93\u5185\u7f6eSmartRefreshLayout\u4ee5\u4e0b\u57fa\u7840\u4f9d\u8d56, \u65e0\u9700\u518d\u6b21\u5f15\u5165 api 'io.github.scwang90:refresh-layout-kernel:2.0.5' api 'io.github.scwang90:refresh-header-material:2.0.5' api 'io.github.scwang90:refresh-footer-classics:2.0.5' SmartRefreshLayout\u7684\u6307\u5b9a\u7684\u5237\u65b0\u5934\u548c\u5237\u65b0\u811a\u5e03\u5c40\u8bf7\u5206\u522b\u4f9d\u8d56(\u5176\u5e93\u5982\u6b64\u8bbe\u8ba1) \u53ef\u9009\u914d\u7f6e\u7684\u5237\u65b0\u5934\u5e03\u5c40\u548c\u811a\u5e03\u5c40 implementation 'io.github.scwang90:refresh-layout-kernel:2.0.5' //\u6838\u5fc3\u5fc5\u987b\u4f9d\u8d56 implementation 'io.github.scwang90:refresh-header-classics:2.0.5' //\u7ecf\u5178\u5237\u65b0\u5934 implementation 'io.github.scwang90:refresh-header-radar:2.0.5' //\u96f7\u8fbe\u5237\u65b0\u5934 implementation 'io.github.scwang90:refresh-header-falsify:2.0.5' //\u865a\u62df\u5237\u65b0\u5934 implementation 'io.github.scwang90:refresh-header-material:2.0.5' //\u8c37\u6b4c\u5237\u65b0\u5934 implementation 'io.github.scwang90:refresh-header-two-level:2.0.5' //\u4e8c\u7ea7\u5237\u65b0\u5934 implementation 'io.github.scwang90:refresh-footer-ball:2.0.5' //\u7403\u8109\u51b2\u52a0\u8f7d implementation 'io.github.scwang90:refresh-footer-classics:2.0.5' //\u7ecf\u5178\u52a0\u8f7d \u521d\u59cb\u5316 \u00b6 \u5237\u65b0\u5e03\u5c40\u8981\u6c42\u5fc5\u987b\u5148\u521d\u59cb\u5316, \u63a8\u8350\u5728Application\u4e2d SmartRefreshLayout.setDefaultRefreshHeaderCreator { context, layout -> MaterialHeader(this) } SmartRefreshLayout.setDefaultRefreshFooterCreator { context, layout -> ClassicsFooter(this) } PageRefreshLayout \u00b6 \u8be5\u63a7\u4ef6\u7ee7\u627f\u81ea SmartRefreshLayout , \u589e\u52a0\u4ee5\u4e0b\u7279\u6027 \u7b80\u5316\u51fd\u6570 \u7ec6\u8282\u4f18\u5316 \u7f3a\u7701\u9875 \u5206\u9875\u52a0\u8f7d \u62c9\u53d6\u52a0\u8f7d\u66f4\u591a \u9884\u52a0\u8f7d / \u9884\u62c9\u53d6 \u58f0\u660e \u00b6 \u652f\u6301\u4e24\u79cd\u65b9\u5f0f\u521b\u5efa, \u63a8\u8350\u5e03\u5c40\u5305\u88f9, \u5e03\u5c40\u5305\u88f9 <com.drake.brv.PageRefreshLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:tools= \"http://schemas.android.com/tools\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:layout_width= \"match_parent\" android:id= \"@+id/page\" app:stateEnabled= \"true\" android:layout_height= \"match_parent\" tools:context= \"com.drake.brv.sample.fragment.RefreshFragment\" > <androidx.recyclerview.widget.RecyclerView android:id= \"@+id/rv\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> </com.drake.brv.PageRefreshLayout> \u4ee3\u7801\u5305\u88f9 val page = rv.page() \u521b\u5efa\u5217\u8868 \u00b6 rv . linear (). setup { addType < Model > ( R . layout . item_multi_type_simple ) addType < DoubleItemModel > ( R . layout . item_multi_type_two ) } page . onRefresh { postDelayed ({ // \u6a21\u62df\u7f51\u7edc\u8bf7\u6c422\u79d2\u540e\u6210\u529f, \u521b\u5efa\u5047\u7684\u6570\u636e\u96c6 val data = getData () addData ( data ) { index < total // \u5224\u65ad\u662f\u5426\u6709\u66f4\u591a\u9875 } }, 2000 ) }. autoRefresh () onRefresh \u5373\u6bcf\u6b21\u5237\u65b0/\u4e0a\u62c9\u52a0\u8f7d\u90fd\u4f1a\u6267\u884c\u7684\u51fd\u6570 \u76d1\u542c\u72b6\u6001 \u00b6 // \u4e0b\u62c9\u5237\u65b0 page . onRefresh { // \u8fd9\u91cc\u53ef\u4ee5\u8fdb\u884c\u7f51\u7edc\u8bf7\u6c42\u7b49\u5f02\u6b65\u64cd\u4f5c } // \u4e0a\u62c9\u52a0\u8f7d page . onLoadMore { // \u8fd9\u91cc\u53ef\u4ee5\u8fdb\u884c\u7f51\u7edc\u8bf7\u6c42\u7b49\u5f02\u6b65\u64cd\u4f5c } \u5982\u679c\u4e0d\u8c03\u7528 onLoadMore \u5219\u4e0a\u62c9\u52a0\u8f7d\u540c\u6837\u4e5f\u4f1a\u6267\u884c onRefresh \u51fd\u6570, \u56e0\u4e3a\u4e0b\u62c9\u5237\u65b0\u548c\u4e0a\u62c9\u52a0\u8f7d\u5728\u9879\u76ee\u4e2d\u4e00\u822c\u662f\u540c\u4e00\u4e2a\u63a5\u53e3\u53ea\u662f\u5206\u9875\u5b57\u6bb5\u503c\u4e0d\u540c\u800c\u5df2 \u7f3a\u7701\u9875 \u00b6 PageRefreshLayout\u5185\u5d4c StateLayout \u540c\u65f6\u5177\u5907\u663e\u793a\u7f3a\u7701\u9875\u7684\u80fd\u529b \u62e5\u6709\u4e09\u4e2a\u51fd\u6570\u53ef\u4ee5\u89e6\u53d1\u5237\u65b0\u72b6\u6001(\u90fd\u4f1a\u56de\u8c03\u51fd\u6570onRefresh) \u51fd\u6570 \u63cf\u8ff0 autoRefresh \u663e\u793a\u4e0b\u62c9\u5237\u65b0\u52a8\u753b showLoading \u663e\u793a\u52a0\u8f7d\u4e2d\u7f3a\u7701\u9875, \u5f53\u7136\u5f97\u5148\u8bbe\u7f6e loadingLayout (\u6216\u8005\u8bfb\u53d6 StateConfig \u5168\u5c40\u7f3a\u7701\u9875\u914d\u7f6e) refresh \u9759\u9ed8\u5237\u65b0(\u65e0\u52a8\u753b) refreshing \u521d\u6b21\u8c03\u7528\u7b49\u6548\u4e8e showLoading . \u5f53\u52a0\u8f7d\u5b8c\u6bd5\u4ee5\u540e, \u518d\u6b21\u8c03\u7528\u7b49\u6548 refresh \u8fd93\u79cd\u89e6\u53d1\u5237\u65b0\u65b9\u5f0f\u90fd\u4f1a\u5bfc\u81f4\u91cd\u7f6e\u7d22\u5f15 index=startIndex , index\u5c31\u662f\u9ed8\u8ba4\u6839\u636e\u5206\u9875\u9ed8\u8ba4\u9012\u589e\u7684\u5b57\u6bb5, \u540e\u9762\u4f1a\u6f14\u793a\u5982\u4f55\u4f7f\u7528\u8be5\u5b57\u6bb5 \u7f3a\u7701\u9875\u72b6\u6001\u63a7\u5236(\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u662f\u6846\u67b6\u5185\u90e8\u81ea\u52a8\u63a7\u5236) \u51fd\u6570 \u63cf\u8ff0 showLoading \u663e\u793a\u52a0\u8f7d\u4e2d\u7f3a\u7701\u9875 showEmpty \u663e\u793a\u7a7a\u7f3a\u7701\u9875 showError \u663e\u793a\u9519\u8bef\u7f3a\u7701\u9875 showContent \u663e\u793a\u5185\u5bb9\u9875 \u5168\u5c40\u7f3a\u7701\u9875\u914d\u7f6e \u00b6 \u5168\u5c40\u7f3a\u7701\u9875\u914d\u7f6e\u548cStateLayout\u5171\u4eab, \u56e0\u4e3aPageRefreshLayout\u5c31\u662f\u5185\u5d4cStateLayout /** * \u63a8\u8350\u5728Application\u4e2d\u8fdb\u884c\u5168\u5c40\u914d\u7f6e\u7f3a\u7701\u9875, \u5f53\u7136\u540c\u6837\u6bcf\u4e2a\u9875\u9762\u53ef\u4ee5\u5355\u72ec\u6307\u5b9a\u7f3a\u7701\u9875. * \u5177\u4f53\u67e5\u770b https://github.com/liangjingkanji/StateLayout */ StateConfig . apply { emptyLayout = R . layout . layout_empty errorLayout = R . layout . layout_error loadingLayout = R . layout . layout_loading onLoading { // \u6b64\u751f\u547d\u5468\u671f\u53ef\u4ee5\u62ff\u5230LoadingLayout\u521b\u5efa\u7684\u89c6\u56fe\u5bf9\u8c61, \u53ef\u4ee5\u8fdb\u884c\u52a8\u753b\u8bbe\u7f6e\u6216\u70b9\u51fb\u4e8b\u4ef6. } } \u5355\u4f8b\u7f3a\u7701\u9875\u914d\u7f6e \u00b6 \u5355\u4f8b\u5c31\u662f\u67d0\u4e2a\u5e03\u5c40\u67d0\u4e2a\u7f3a\u7701\u72b6\u6001\u9875\u9762\u4e0d\u60f3\u4f7f\u7528\u5168\u5c40\u914d\u7f6e\u7684\u7f3a\u7701\u9875. \u90a3\u4e48\u5c31\u4e3a\u8fd9\u4e2a\u5e03\u5c40\u5355\u72ec\u6307\u5b9a\u7279\u6b8a\u7684\u7f3a\u7701\u9875 \u65e0\u9700\u5168\u90e8\u5355\u72ec\u6307\u5b9a, \u53ef\u53ea\u6307\u5b9a\u52a0\u8f7d\u4e2d\u5355\u4f8b\u6216\u8005\u9519\u8bef\u9875\u9762\u5355\u4f8b \u5e03\u5c40\u58f0\u660e <com.drake.brv.PageRefreshLayout ..... app:error_layout= \"@layout/layout_error\" app:empty_layout= \"@layout/layout_empty\" app:loading_layout= \"@layout/layout_loading\" > <!--RecyclerView\u4ee3\u7801--> </com.drake.brv.PageRefreshLayout> \u4ee3\u7801\u58f0\u660e page . apply { loadingLayout = R . layout . layout_loading emptyLayout = R . layout . layout_empty // errorLayout = R.layout.layout_error } \u9ed8\u8ba4\u4f1a\u4f7f\u7528\u7f3a\u7701\u9875, \u5982\u679c\u4f60\u5df2\u7ecf\u8bbe\u7f6e\u4e86\u5168\u5c40\u7f3a\u7701\u9875\u4f46\u662f\u6b64\u523b\u4e0d\u60f3\u4f7f\u7528. \u53ef\u4ee5\u4f7f\u7528\u5c5e\u6027|\u51fd\u6570: stateEnabled \u56e0\u4e3a\u5934\u5e03\u5c40\u5c5e\u4e8e\u5217\u8868\u7684\u4e00\u90e8\u5206, \u800c\u7f3a\u7701\u9875\u4f1a\u8986\u76d6\u6574\u4e2a\u5217\u8868. \u90a3\u4e48\u60f3\u8981\u4f7f\u7528\u7f3a\u7701\u9875\u53c8\u4e0d\u60f3\u5f71\u54cd\u5217\u8868\u7684\u5934\u5e03\u5c40, \u90a3\u5934\u5e03\u5c40\u8bf7\u4f7f\u7528 CoordinatorLayout \u5b9e\u73b0. \u6ce8\u610f\u5982\u679c\u4f7f\u7528 NestedScrollView \u5d4c\u5957Rv\u5b9e\u73b0\u4f1a\u5bfc\u81f4RV\u4e00\u6b21\u6027\u52a0\u8f7d\u5b8citem\u5185\u5b58\u6d88\u8017\u5927. \u800cCoordinatorLayout\u5d4c\u5957RV\u4e0d\u4f1a \u5237\u65b0\u6570\u636e \u00b6 \u524d\u9762\u63d0\u5230 PageRefreshLayout \u652f\u6301\u81ea\u52a8\u5206\u9875\u52a0\u8f7d, \u81ea\u52a8\u5206\u9875\u4e0d\u9700\u8981\u4f60\u8c03\u7528 rv.models \u51fd\u6570\u53bb\u8bbe\u7f6e\u6570\u636e, \u4f7f\u7528 addData \u5373\u53ef // // // \u4e0b\u62c9\u5237\u65b0\u548c\u4e0a\u62c9\u52a0\u8f7d\u90fd\u4f1a\u6267\u884conRefresh, \u9664\u975e\u53e6\u5916\u8bbe\u7f6eonLoadMore pageLayout . onRefresh { scope { val data = Get < String > ( \"/path\" ). await () addData ( data . list ){ // \u8be5\u56de\u8c03\u51fd\u6570\u53c2\u6570\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u7c7b\u578b\u7528\u4e8e\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e0b\u4e00\u9875, \u51b3\u5b9a\u4e0a\u62c9\u52a0\u8f7d\u662f\u5426\u5173\u95ed adapter . itemCount < data . count // \u8fd9\u91cc\u662f\u5224\u65ad\u662f\u5426\u7531\u66f4\u591a\u9875, \u5177\u4f53\u903b\u8f91\u6839\u636e\u63a5\u53e3\u5b9a\u4e49 } } } \u5927\u90e8\u5206\u60c5\u51b5\u540e\u7aef\u5b9a\u4e49\u5206\u9875\u5b57\u6bb5\u7b2c\u4e00\u9875\u4e3a1, \u4f46\u662f\u53ef\u80fd\u5b58\u5728\u90e8\u5206\u540e\u7aef\u5b9a\u4e49\u4e3a0, \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u5728Application\u4e2d\u8bbe\u7f6e index \u7684\u521d\u59cb\u503c\u5373\u7b2c\u4e00\u9875\u7684\u5b57\u6bb5 class App : Application () { override fun onCreate () { super . onCreate () PageRefreshLayout . startIndex = 1 // startIndex\u5373index\u53d8\u91cf\u7684\u521d\u59cb\u503c } \u8fd9\u91cc\u7684\u7f51\u7edc\u8bf7\u6c42\u4f7f\u7528\u7684\u662f\u6211\u5f00\u6e90\u7684\u53e6\u4e00\u4e2a\u9879\u76eeNet, \u652f\u6301\u6269\u5c55BRV. GitHub: Net . \u5047\u8bbe PageRefreshLayout \u6ca1\u6709\u76f4\u63a5\u5305\u88f9RecyclerView, \u8fd9\u4e2a\u65f6\u5019\u9700\u8981 addData \u51fd\u6570\u6307\u5b9a\u53c2\u6570adapter\u6765\u4f7f\u7528\u81ea\u52a8\u5206\u9875, \u5426\u5219\u5c06\u629b\u51fa\u5f02\u5e38","title":"\u4e0b\u62c9\u5237\u65b0/\u4e0a\u62c9\u52a0\u8f7d"},{"location":"refresh/#_1","text":"\u5237\u65b0\u5e03\u5c40\u8981\u6c42\u5fc5\u987b\u5148\u521d\u59cb\u5316, \u63a8\u8350\u5728Application\u4e2d SmartRefreshLayout.setDefaultRefreshHeaderCreator { context, layout -> MaterialHeader(this) } SmartRefreshLayout.setDefaultRefreshFooterCreator { context, layout -> ClassicsFooter(this) }","title":"\u521d\u59cb\u5316"},{"location":"refresh/#pagerefreshlayout","text":"\u8be5\u63a7\u4ef6\u7ee7\u627f\u81ea SmartRefreshLayout , \u589e\u52a0\u4ee5\u4e0b\u7279\u6027 \u7b80\u5316\u51fd\u6570 \u7ec6\u8282\u4f18\u5316 \u7f3a\u7701\u9875 \u5206\u9875\u52a0\u8f7d \u62c9\u53d6\u52a0\u8f7d\u66f4\u591a \u9884\u52a0\u8f7d / \u9884\u62c9\u53d6","title":"PageRefreshLayout"},{"location":"refresh/#_2","text":"\u652f\u6301\u4e24\u79cd\u65b9\u5f0f\u521b\u5efa, \u63a8\u8350\u5e03\u5c40\u5305\u88f9, \u5e03\u5c40\u5305\u88f9 <com.drake.brv.PageRefreshLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:tools= \"http://schemas.android.com/tools\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:layout_width= \"match_parent\" android:id= \"@+id/page\" app:stateEnabled= \"true\" android:layout_height= \"match_parent\" tools:context= \"com.drake.brv.sample.fragment.RefreshFragment\" > <androidx.recyclerview.widget.RecyclerView android:id= \"@+id/rv\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> </com.drake.brv.PageRefreshLayout> \u4ee3\u7801\u5305\u88f9 val page = rv.page()","title":"\u58f0\u660e"},{"location":"refresh/#_3","text":"rv . linear (). setup { addType < Model > ( R . layout . item_multi_type_simple ) addType < DoubleItemModel > ( R . layout . item_multi_type_two ) } page . onRefresh { postDelayed ({ // \u6a21\u62df\u7f51\u7edc\u8bf7\u6c422\u79d2\u540e\u6210\u529f, \u521b\u5efa\u5047\u7684\u6570\u636e\u96c6 val data = getData () addData ( data ) { index < total // \u5224\u65ad\u662f\u5426\u6709\u66f4\u591a\u9875 } }, 2000 ) }. autoRefresh () onRefresh \u5373\u6bcf\u6b21\u5237\u65b0/\u4e0a\u62c9\u52a0\u8f7d\u90fd\u4f1a\u6267\u884c\u7684\u51fd\u6570","title":"\u521b\u5efa\u5217\u8868"},{"location":"refresh/#_4","text":"// \u4e0b\u62c9\u5237\u65b0 page . onRefresh { // \u8fd9\u91cc\u53ef\u4ee5\u8fdb\u884c\u7f51\u7edc\u8bf7\u6c42\u7b49\u5f02\u6b65\u64cd\u4f5c } // \u4e0a\u62c9\u52a0\u8f7d page . onLoadMore { // \u8fd9\u91cc\u53ef\u4ee5\u8fdb\u884c\u7f51\u7edc\u8bf7\u6c42\u7b49\u5f02\u6b65\u64cd\u4f5c } \u5982\u679c\u4e0d\u8c03\u7528 onLoadMore \u5219\u4e0a\u62c9\u52a0\u8f7d\u540c\u6837\u4e5f\u4f1a\u6267\u884c onRefresh \u51fd\u6570, \u56e0\u4e3a\u4e0b\u62c9\u5237\u65b0\u548c\u4e0a\u62c9\u52a0\u8f7d\u5728\u9879\u76ee\u4e2d\u4e00\u822c\u662f\u540c\u4e00\u4e2a\u63a5\u53e3\u53ea\u662f\u5206\u9875\u5b57\u6bb5\u503c\u4e0d\u540c\u800c\u5df2","title":"\u76d1\u542c\u72b6\u6001"},{"location":"refresh/#_5","text":"PageRefreshLayout\u5185\u5d4c StateLayout \u540c\u65f6\u5177\u5907\u663e\u793a\u7f3a\u7701\u9875\u7684\u80fd\u529b \u62e5\u6709\u4e09\u4e2a\u51fd\u6570\u53ef\u4ee5\u89e6\u53d1\u5237\u65b0\u72b6\u6001(\u90fd\u4f1a\u56de\u8c03\u51fd\u6570onRefresh) \u51fd\u6570 \u63cf\u8ff0 autoRefresh \u663e\u793a\u4e0b\u62c9\u5237\u65b0\u52a8\u753b showLoading \u663e\u793a\u52a0\u8f7d\u4e2d\u7f3a\u7701\u9875, \u5f53\u7136\u5f97\u5148\u8bbe\u7f6e loadingLayout (\u6216\u8005\u8bfb\u53d6 StateConfig \u5168\u5c40\u7f3a\u7701\u9875\u914d\u7f6e) refresh \u9759\u9ed8\u5237\u65b0(\u65e0\u52a8\u753b) refreshing \u521d\u6b21\u8c03\u7528\u7b49\u6548\u4e8e showLoading . \u5f53\u52a0\u8f7d\u5b8c\u6bd5\u4ee5\u540e, \u518d\u6b21\u8c03\u7528\u7b49\u6548 refresh \u8fd93\u79cd\u89e6\u53d1\u5237\u65b0\u65b9\u5f0f\u90fd\u4f1a\u5bfc\u81f4\u91cd\u7f6e\u7d22\u5f15 index=startIndex , index\u5c31\u662f\u9ed8\u8ba4\u6839\u636e\u5206\u9875\u9ed8\u8ba4\u9012\u589e\u7684\u5b57\u6bb5, \u540e\u9762\u4f1a\u6f14\u793a\u5982\u4f55\u4f7f\u7528\u8be5\u5b57\u6bb5 \u7f3a\u7701\u9875\u72b6\u6001\u63a7\u5236(\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u662f\u6846\u67b6\u5185\u90e8\u81ea\u52a8\u63a7\u5236) \u51fd\u6570 \u63cf\u8ff0 showLoading \u663e\u793a\u52a0\u8f7d\u4e2d\u7f3a\u7701\u9875 showEmpty \u663e\u793a\u7a7a\u7f3a\u7701\u9875 showError \u663e\u793a\u9519\u8bef\u7f3a\u7701\u9875 showContent \u663e\u793a\u5185\u5bb9\u9875","title":"\u7f3a\u7701\u9875"},{"location":"refresh/#_6","text":"\u5168\u5c40\u7f3a\u7701\u9875\u914d\u7f6e\u548cStateLayout\u5171\u4eab, \u56e0\u4e3aPageRefreshLayout\u5c31\u662f\u5185\u5d4cStateLayout /** * \u63a8\u8350\u5728Application\u4e2d\u8fdb\u884c\u5168\u5c40\u914d\u7f6e\u7f3a\u7701\u9875, \u5f53\u7136\u540c\u6837\u6bcf\u4e2a\u9875\u9762\u53ef\u4ee5\u5355\u72ec\u6307\u5b9a\u7f3a\u7701\u9875. * \u5177\u4f53\u67e5\u770b https://github.com/liangjingkanji/StateLayout */ StateConfig . apply { emptyLayout = R . layout . layout_empty errorLayout = R . layout . layout_error loadingLayout = R . layout . layout_loading onLoading { // \u6b64\u751f\u547d\u5468\u671f\u53ef\u4ee5\u62ff\u5230LoadingLayout\u521b\u5efa\u7684\u89c6\u56fe\u5bf9\u8c61, \u53ef\u4ee5\u8fdb\u884c\u52a8\u753b\u8bbe\u7f6e\u6216\u70b9\u51fb\u4e8b\u4ef6. } }","title":"\u5168\u5c40\u7f3a\u7701\u9875\u914d\u7f6e"},{"location":"refresh/#_7","text":"\u5355\u4f8b\u5c31\u662f\u67d0\u4e2a\u5e03\u5c40\u67d0\u4e2a\u7f3a\u7701\u72b6\u6001\u9875\u9762\u4e0d\u60f3\u4f7f\u7528\u5168\u5c40\u914d\u7f6e\u7684\u7f3a\u7701\u9875. \u90a3\u4e48\u5c31\u4e3a\u8fd9\u4e2a\u5e03\u5c40\u5355\u72ec\u6307\u5b9a\u7279\u6b8a\u7684\u7f3a\u7701\u9875 \u65e0\u9700\u5168\u90e8\u5355\u72ec\u6307\u5b9a, \u53ef\u53ea\u6307\u5b9a\u52a0\u8f7d\u4e2d\u5355\u4f8b\u6216\u8005\u9519\u8bef\u9875\u9762\u5355\u4f8b \u5e03\u5c40\u58f0\u660e <com.drake.brv.PageRefreshLayout ..... app:error_layout= \"@layout/layout_error\" app:empty_layout= \"@layout/layout_empty\" app:loading_layout= \"@layout/layout_loading\" > <!--RecyclerView\u4ee3\u7801--> </com.drake.brv.PageRefreshLayout> \u4ee3\u7801\u58f0\u660e page . apply { loadingLayout = R . layout . layout_loading emptyLayout = R . layout . layout_empty // errorLayout = R.layout.layout_error } \u9ed8\u8ba4\u4f1a\u4f7f\u7528\u7f3a\u7701\u9875, \u5982\u679c\u4f60\u5df2\u7ecf\u8bbe\u7f6e\u4e86\u5168\u5c40\u7f3a\u7701\u9875\u4f46\u662f\u6b64\u523b\u4e0d\u60f3\u4f7f\u7528. \u53ef\u4ee5\u4f7f\u7528\u5c5e\u6027|\u51fd\u6570: stateEnabled \u56e0\u4e3a\u5934\u5e03\u5c40\u5c5e\u4e8e\u5217\u8868\u7684\u4e00\u90e8\u5206, \u800c\u7f3a\u7701\u9875\u4f1a\u8986\u76d6\u6574\u4e2a\u5217\u8868. \u90a3\u4e48\u60f3\u8981\u4f7f\u7528\u7f3a\u7701\u9875\u53c8\u4e0d\u60f3\u5f71\u54cd\u5217\u8868\u7684\u5934\u5e03\u5c40, \u90a3\u5934\u5e03\u5c40\u8bf7\u4f7f\u7528 CoordinatorLayout \u5b9e\u73b0. \u6ce8\u610f\u5982\u679c\u4f7f\u7528 NestedScrollView \u5d4c\u5957Rv\u5b9e\u73b0\u4f1a\u5bfc\u81f4RV\u4e00\u6b21\u6027\u52a0\u8f7d\u5b8citem\u5185\u5b58\u6d88\u8017\u5927. \u800cCoordinatorLayout\u5d4c\u5957RV\u4e0d\u4f1a","title":"\u5355\u4f8b\u7f3a\u7701\u9875\u914d\u7f6e"},{"location":"refresh/#_8","text":"\u524d\u9762\u63d0\u5230 PageRefreshLayout \u652f\u6301\u81ea\u52a8\u5206\u9875\u52a0\u8f7d, \u81ea\u52a8\u5206\u9875\u4e0d\u9700\u8981\u4f60\u8c03\u7528 rv.models \u51fd\u6570\u53bb\u8bbe\u7f6e\u6570\u636e, \u4f7f\u7528 addData \u5373\u53ef // // // \u4e0b\u62c9\u5237\u65b0\u548c\u4e0a\u62c9\u52a0\u8f7d\u90fd\u4f1a\u6267\u884conRefresh, \u9664\u975e\u53e6\u5916\u8bbe\u7f6eonLoadMore pageLayout . onRefresh { scope { val data = Get < String > ( \"/path\" ). await () addData ( data . list ){ // \u8be5\u56de\u8c03\u51fd\u6570\u53c2\u6570\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u7c7b\u578b\u7528\u4e8e\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e0b\u4e00\u9875, \u51b3\u5b9a\u4e0a\u62c9\u52a0\u8f7d\u662f\u5426\u5173\u95ed adapter . itemCount < data . count // \u8fd9\u91cc\u662f\u5224\u65ad\u662f\u5426\u7531\u66f4\u591a\u9875, \u5177\u4f53\u903b\u8f91\u6839\u636e\u63a5\u53e3\u5b9a\u4e49 } } } \u5927\u90e8\u5206\u60c5\u51b5\u540e\u7aef\u5b9a\u4e49\u5206\u9875\u5b57\u6bb5\u7b2c\u4e00\u9875\u4e3a1, \u4f46\u662f\u53ef\u80fd\u5b58\u5728\u90e8\u5206\u540e\u7aef\u5b9a\u4e49\u4e3a0, \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u5728Application\u4e2d\u8bbe\u7f6e index \u7684\u521d\u59cb\u503c\u5373\u7b2c\u4e00\u9875\u7684\u5b57\u6bb5 class App : Application () { override fun onCreate () { super . onCreate () PageRefreshLayout . startIndex = 1 // startIndex\u5373index\u53d8\u91cf\u7684\u521d\u59cb\u503c } \u8fd9\u91cc\u7684\u7f51\u7edc\u8bf7\u6c42\u4f7f\u7528\u7684\u662f\u6211\u5f00\u6e90\u7684\u53e6\u4e00\u4e2a\u9879\u76eeNet, \u652f\u6301\u6269\u5c55BRV. GitHub: Net . \u5047\u8bbe PageRefreshLayout \u6ca1\u6709\u76f4\u63a5\u5305\u88f9RecyclerView, \u8fd9\u4e2a\u65f6\u5019\u9700\u8981 addData \u51fd\u6570\u6307\u5b9a\u53c2\u6570adapter\u6765\u4f7f\u7528\u81ea\u52a8\u5206\u9875, \u5426\u5219\u5c06\u629b\u51fa\u5f02\u5e38","title":"\u5237\u65b0\u6570\u636e"},{"location":"state/","text":"\u7f3a\u7701\u9875\u5bf9\u4e8e\u4e00\u4e2a\u7528\u6237\u4f53\u9a8c\u826f\u597d\u7684\u5e94\u7528\u975e\u5e38\u91cd\u8981 BRV\u91c7\u7528\u96c6\u6210\u4e00\u4e2a\u975e\u5e38\u4f18\u79c0\u7f3a\u7701\u9875\u5e93 StateLayout \u6765\u5b9e\u73b0\u5217\u8868\u7f3a\u7701\u9875 \u5df2\u7ecf\u5185\u5d4c\u5728BRV\u5e93\u4e2d, \u65e0\u9700\u518d\u6b21\u4f9d\u8d56StateLayout. \u5982\u679c\u4f60\u7684\u5217\u8868\u540c\u65f6\u5305\u542b\u4e0b\u62c9\u5237\u65b0/\u4e0a\u62c9\u52a0\u8f7d\u6211\u5efa\u8bae\u4f7f\u7528 PageRefreshLayout \u66ff\u4ee3StateLayout \u4e3b\u8981\u7279\u70b9 \u4f18\u96c5\u7684\u51fd\u6570\u8bbe\u8ba1 \u5c40\u90e8\u7f3a\u7701\u9875 \u5e03\u5c40\u6216\u4ee3\u7801\u58f0\u660e\u7686\u53ef \u5168\u5c40/\u5355\u4f8b\u914d\u7f6e \u76d1\u542c\u7f3a\u7701\u9875\u663e\u793a \u81ea\u5b9a\u4e49\u52a8\u753b \u591a\u79cd\u72b6\u6001\u7f3a\u7701\u9875 \u7f51\u7edc\u8bf7\u6c42\u56de\u8c03 \u4f20\u9012\u4efb\u610f\u5bf9\u8c61\u4f5c\u4e3a\u6807\u7b7e \u5feb\u901f\u914d\u7f6e\u70b9\u51fb\u91cd\u8bd5 \u5f02\u6b65\u7ebf\u7a0b \u65e0\u7f51\u7edc\u7acb\u5373\u663e\u793a\u9519\u8bef\u7f3a\u7701\u9875 \u914d\u5408\u5217\u8868\u4f7f\u7528\u81ea\u52a8\u5316\u663e\u793a\u5217\u8868\u7f3a\u7701\u9875 \u914d\u5408\u7f51\u7edc\u8bf7\u6c42\u81ea\u52a8\u5316\u663e\u793a\u7f3a\u7701\u9875 \u4f7f\u7528 \u00b6 \u7b2c\u4e00\u6b65, \u521b\u5efa\u7f3a\u7701\u9875 \u5e03\u5c40\u521b\u5efa <com.drake.statelayout.StateLayout android:id= \"@+id/state\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <androidx.recyclerview.widget.RecyclerView android:id= \"@+id/rv\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> </com.drake.statelayout.StateLayout> \u4ee3\u7801\u521b\u5efa val state = state () // \u5728Activity/Fragment\u76f4\u63a5\u51fd\u6570\u521b\u5efa\u7f3a\u7701\u9875, `rv.state()`\u4e5f\u53ef\u4ee5, \u63a8\u8350\u4f7f\u7528\u7b2c\u4e00\u79cd\u65b9\u5f0f CoordinatorLayout+ViewPager \u8981\u6c42\u7f3a\u7701\u9875\u7684XML\u6839\u5e03\u5c40\u4e3a NestedScrollView`, \u5426\u5219\u663e\u793a\u7f3a\u7701\u9875\u540e\u65e0\u6cd5\u6b63\u5e38\u6ed1\u52a8 \u7b2c\u4e8c\u6b65, \u521b\u5efa\u5217\u8868 rv . linear (). setup { addType < Model > ( R . layout . item_multi_type_simple ) addType < DoubleItemModel > ( R . layout . item_multi_type_two ) }. models = getData () \u7b2c\u4e09\u6b65, \u663e\u793a\u7f3a\u7701\u9875 state . showLoading () // \u52a0\u8f7d\u4e2d state . showContent () // \u52a0\u8f7d\u6210\u529f state . showError () // \u52a0\u8f7d\u9519\u8bef state . showEmpty () // \u52a0\u8f7d\u5931\u8d25 StateLayout \u00b6 StateLayout\u7f3a\u7701\u9875\u5e93\u975e\u5e38\u63a8\u8350\u4f7f\u7528, BRV\u5185\u90e8\u96c6\u6210\u5b9e\u73b0\u5217\u8868\u7f3a\u7701\u9875\u7ed9\u5f00\u53d1\u8005\u4f7f\u7528 \u5982\u679c\u4f60\u60f3\u8981\u81ea\u5b9a\u4e49\u7f3a\u7701\u9875\u52a8\u753b\u4ee5\u53ca\u7f3a\u7701\u9875\u7684\u751f\u547d\u5468\u671f\u76d1\u542c\u5efa\u8bae\u4f60\u9605\u8bfb\u4ee5\u4e0b\u6587\u6863 GitHub \u4f7f\u7528\u6587\u6863","title":"\u7f3a\u7701\u9875"},{"location":"state/#_1","text":"\u7b2c\u4e00\u6b65, \u521b\u5efa\u7f3a\u7701\u9875 \u5e03\u5c40\u521b\u5efa <com.drake.statelayout.StateLayout android:id= \"@+id/state\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <androidx.recyclerview.widget.RecyclerView android:id= \"@+id/rv\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> </com.drake.statelayout.StateLayout> \u4ee3\u7801\u521b\u5efa val state = state () // \u5728Activity/Fragment\u76f4\u63a5\u51fd\u6570\u521b\u5efa\u7f3a\u7701\u9875, `rv.state()`\u4e5f\u53ef\u4ee5, \u63a8\u8350\u4f7f\u7528\u7b2c\u4e00\u79cd\u65b9\u5f0f CoordinatorLayout+ViewPager \u8981\u6c42\u7f3a\u7701\u9875\u7684XML\u6839\u5e03\u5c40\u4e3a NestedScrollView`, \u5426\u5219\u663e\u793a\u7f3a\u7701\u9875\u540e\u65e0\u6cd5\u6b63\u5e38\u6ed1\u52a8 \u7b2c\u4e8c\u6b65, \u521b\u5efa\u5217\u8868 rv . linear (). setup { addType < Model > ( R . layout . item_multi_type_simple ) addType < DoubleItemModel > ( R . layout . item_multi_type_two ) }. models = getData () \u7b2c\u4e09\u6b65, \u663e\u793a\u7f3a\u7701\u9875 state . showLoading () // \u52a0\u8f7d\u4e2d state . showContent () // \u52a0\u8f7d\u6210\u529f state . showError () // \u52a0\u8f7d\u9519\u8bef state . showEmpty () // \u52a0\u8f7d\u5931\u8d25","title":"\u4f7f\u7528"},{"location":"state/#statelayout","text":"StateLayout\u7f3a\u7701\u9875\u5e93\u975e\u5e38\u63a8\u8350\u4f7f\u7528, BRV\u5185\u90e8\u96c6\u6210\u5b9e\u73b0\u5217\u8868\u7f3a\u7701\u9875\u7ed9\u5f00\u53d1\u8005\u4f7f\u7528 \u5982\u679c\u4f60\u60f3\u8981\u81ea\u5b9a\u4e49\u7f3a\u7701\u9875\u52a8\u753b\u4ee5\u53ca\u7f3a\u7701\u9875\u7684\u751f\u547d\u5468\u671f\u76d1\u542c\u5efa\u8bae\u4f60\u9605\u8bfb\u4ee5\u4e0b\u6587\u6863 GitHub \u4f7f\u7528\u6587\u6863","title":"StateLayout"},{"location":"swipe/","text":"\u4e3a\u6570\u636e\u6a21\u578b\u5b9e\u73b0\u63a5\u53e3 ItemSwipe \u5373\u53ef\u5f00\u542f\u62d6\u62fd\u529f\u80fd data class SwipeModel ( override var itemOrientationSwipe : Int = ItemOrientation . ALL ) : ItemSwipe \u6ce8\u610f\u5982\u679c\u4f60\u7684\u6570\u636e\u6a21\u578b\u88abGson\u53cd\u5e8f\u5217\u5316\u540e, \u4f1a\u5220\u9664\u6240\u6709\u7684\u5b57\u6bb5\u521d\u59cb\u5316\u503c \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u91cd\u5199\u8bbf\u95ee\u51fd\u6570\u6765\u89e3\u51b3\u95ee\u9898, \u8ba9\u8be5\u503c\u56fa\u5b9a\u8fd4\u56de class SwipeModel () : ItemDrag { override var itemOrientationSwipe : Int = 0 get () = ItemOrientation . ALL // \u53ea\u4f1a\u8fd4\u56de\u8be5\u503c } ItemOrientation \u00b6 \u8be5\u7c7b\u5305\u542b\u62d6\u62fd\u53ef\u914d\u7f6e\u7684\u65b9\u5411 \u5b57\u6bb5 \u63cf\u8ff0 ALL \u5168\u90e8\u65b9\u5411 VERTICAL \u5782\u76f4\u65b9\u5411 HORIZONTAL \u6c34\u5e73\u65b9\u5411 LEFT \u5411\u5de6 RIGHT \u5411\u53f3 UP \u5411\u4e0a DOWN \u5411\u4e0b NONE \u7981\u7528 \u81ea\u5b9a\u4e49\u4fa7\u6ed1 \u00b6 \u5982\u679c\u60f3\u8981\u6269\u5c55ItemTouchHelper\u53ef\u4ee5\u7ed9BindingAdapter\u7684\u53d8\u91cf itemTouchHelper \u8d4b\u503c rv . linear (). setup { addType < SwipeModel > ( R . layout . item ) itemTouchHelper = ItemTouchHelper ( object : DefaultItemTouchCallback ( this ) { // \u8fd9\u91cc\u53ef\u4ee5\u91cd\u5199\u51fd\u6570 override fun onSwiped ( viewHolder : RecyclerView . ViewHolder , direction : Int ) { super . onSwiped ( viewHolder , direction ) // \u8fd9\u662f\u4fa7\u6ed1\u5220\u9664\u540e\u56de\u8c03, \u8fd9\u91cc\u53ef\u4ee5\u540c\u6b65\u670d\u52a1\u5668 Log . d ( \"\u4f4d\u7f6e\" , \"layoutPosition = ${ viewHolder . layoutPosition } \" ) Log . d ( \"\u6570\u636e\" , \"SwipeModel = ${ ( viewHolder as BindingAdapter . BindingViewHolder ). getModel < SwipeModel > () } \" ) } }) }. models = data \u901a\u8fc7\u7ed9view\u6253\u4e0atag\u6807\u7b7e swipe \u53ef\u4ee5\u81ea\u5b9a\u4e49\u4fa7\u6ed1\u5c06\u4f1a\u79fb\u52a8\u7684\u89c6\u56fe. \u8fd9\u6837\u5c31\u53ef\u4ee5\u5c55\u793a\u80cc\u666f\u540e\u7684\u89c6\u56fe <RelativeLayout android:layout_width= \"wrap_content\" android:layout_height= \"80dp\" android:orientation= \"horizontal\" android:tag= \"swipe\" /> \u4fa7\u6ed1\u6309\u94ae \u00b6 \u5f88\u591a\u4eba\u4f1a\u95ee\u5982\u4f55\u5b9e\u73b0\u7c7b\u4f3cQQ\u90a3\u6837\u7684\u4fa7\u6ed1\u5c55\u793a\u6309\u94ae. \u8fd9\u79cd\u63a8\u8350\u4f7f\u7528\u81ea\u5b9a\u4e49Item\u7684\u89c6\u56fe\u5bf9\u8c61, \u800c\u4e0d\u662f\u8ba9\u5217\u8868\u53bb\u5b9e\u73b0.0 \u8fd9\u91cc\u63a8\u8350\u7b2c\u4e09\u65b9\u5e93: SwipeToActionLayout \u8fd9\u79cd\u4ea4\u4e92\u6548\u679c\u5c5e\u4e8eiOS\u7684\u5b98\u65b9\u6548\u679c, \u4e0d\u63a8\u8350Android\u6284\u88ad","title":"\u4fa7\u6ed1"},{"location":"swipe/#itemorientation","text":"\u8be5\u7c7b\u5305\u542b\u62d6\u62fd\u53ef\u914d\u7f6e\u7684\u65b9\u5411 \u5b57\u6bb5 \u63cf\u8ff0 ALL \u5168\u90e8\u65b9\u5411 VERTICAL \u5782\u76f4\u65b9\u5411 HORIZONTAL \u6c34\u5e73\u65b9\u5411 LEFT \u5411\u5de6 RIGHT \u5411\u53f3 UP \u5411\u4e0a DOWN \u5411\u4e0b NONE \u7981\u7528","title":"ItemOrientation"},{"location":"swipe/#_1","text":"\u5982\u679c\u60f3\u8981\u6269\u5c55ItemTouchHelper\u53ef\u4ee5\u7ed9BindingAdapter\u7684\u53d8\u91cf itemTouchHelper \u8d4b\u503c rv . linear (). setup { addType < SwipeModel > ( R . layout . item ) itemTouchHelper = ItemTouchHelper ( object : DefaultItemTouchCallback ( this ) { // \u8fd9\u91cc\u53ef\u4ee5\u91cd\u5199\u51fd\u6570 override fun onSwiped ( viewHolder : RecyclerView . ViewHolder , direction : Int ) { super . onSwiped ( viewHolder , direction ) // \u8fd9\u662f\u4fa7\u6ed1\u5220\u9664\u540e\u56de\u8c03, \u8fd9\u91cc\u53ef\u4ee5\u540c\u6b65\u670d\u52a1\u5668 Log . d ( \"\u4f4d\u7f6e\" , \"layoutPosition = ${ viewHolder . layoutPosition } \" ) Log . d ( \"\u6570\u636e\" , \"SwipeModel = ${ ( viewHolder as BindingAdapter . BindingViewHolder ). getModel < SwipeModel > () } \" ) } }) }. models = data \u901a\u8fc7\u7ed9view\u6253\u4e0atag\u6807\u7b7e swipe \u53ef\u4ee5\u81ea\u5b9a\u4e49\u4fa7\u6ed1\u5c06\u4f1a\u79fb\u52a8\u7684\u89c6\u56fe. \u8fd9\u6837\u5c31\u53ef\u4ee5\u5c55\u793a\u80cc\u666f\u540e\u7684\u89c6\u56fe <RelativeLayout android:layout_width= \"wrap_content\" android:layout_height= \"80dp\" android:orientation= \"horizontal\" android:tag= \"swipe\" />","title":"\u81ea\u5b9a\u4e49\u4fa7\u6ed1"},{"location":"swipe/#_2","text":"\u5f88\u591a\u4eba\u4f1a\u95ee\u5982\u4f55\u5b9e\u73b0\u7c7b\u4f3cQQ\u90a3\u6837\u7684\u4fa7\u6ed1\u5c55\u793a\u6309\u94ae. \u8fd9\u79cd\u63a8\u8350\u4f7f\u7528\u81ea\u5b9a\u4e49Item\u7684\u89c6\u56fe\u5bf9\u8c61, \u800c\u4e0d\u662f\u8ba9\u5217\u8868\u53bb\u5b9e\u73b0.0 \u8fd9\u91cc\u63a8\u8350\u7b2c\u4e09\u65b9\u5e93: SwipeToActionLayout \u8fd9\u79cd\u4ea4\u4e92\u6548\u679c\u5c5e\u4e8eiOS\u7684\u5b98\u65b9\u6548\u679c, \u4e0d\u63a8\u8350Android\u6284\u88ad","title":"\u4fa7\u6ed1\u6309\u94ae"},{"location":"toggle/","text":"BRV\u63d0\u4f9b\u4e00\u4e2a\u5207\u6362\u4e8b\u4ef6\u7684\u89e6\u53d1\u548c\u76d1\u542c, \u76f8\u5f53\u4e8e\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\u904d\u5386\u6240\u6709\u7684\u5217\u8868\u6761\u76ee, \u4f60\u53ef\u4ee5\u5728\u8fd9\u4e2a\u56de\u8c03\u91cc\u9762\u4f9d\u6b21\u66f4\u65b0\u6570\u636e\u6216\u8005\u89c6\u56fe. \u8fd9\u4e2a \u5207\u6362 \u53ef\u4ee5\u7406\u89e3\u4e3a \u904d\u5386 \u5217\u8868\u6761\u76ee \u4e00\u822c\u7528\u4e8e\u5207\u6362\u5217\u8868\u7684\u7f16\u8f91\u6a21\u5f0f \u793a\u4f8b \u00b6 override fun onActivityCreated ( savedInstanceState : Bundle?) { super . onActivityCreated ( savedInstanceState ) rv . linear (). setup { addType < CheckModel > ( R . layout . item_check_mode ) // \u76d1\u542c\u5207\u6362\u4e8b\u4ef6 onToggle { position , toggleMode , end -> if ( end ) { // \u663e\u793a\u548c\u9690\u85cf\u7f16\u8f91\u83dc\u5355 ll_menu . visibility = if ( toggleMode ) View . VISIBLE else View . GONE } } }. models = getData () } fun onClick ( v : View ){ rv . bindingAdapter . toggle () // \u70b9\u51fb\u4e8b\u4ef6\u89e6\u53d1\u5207\u6362\u4e8b\u4ef6 } \u51fd\u6570 \u00b6 fun toggle () // \u89e6\u53d1\u5207\u6362\u6a21\u5f0f(\u6839\u636e\u5f53\u524d\u72b6\u6001\u53d6\u53cd) fun getToggleMode (): Boolean // \u8303\u56f4\u5f53\u524d\u51fa\u4f55\u79cd\u5207\u6362\u6a21\u5f0f fun setToggleMode ( toggleMode : Boolean ) // \u8bbe\u7f6e\u5207\u6362\u6a21\u5f0f, \u5982\u679c\u8bbe\u7f6e\u7684\u662f\u5f53\u524d\u6b63\u5904\u4e8e\u7684\u6a21\u5f0f\u4e0d\u4f1a\u89e6\u53d1\u56de\u8c03 fun onToggle ( block : ( position : Int , toggleModel : Boolean , end : Boolean ) -> Unit ) // \u76d1\u542c\u5207\u6362\u4e8b\u4ef6, \u5728\u4e8b\u4ef6\u4e2d\u4f60\u53ef\u4ee5\u5904\u7406\u4efb\u4f55\u89c6\u56fe\u7684\u6570\u636e\u6216\u8005\u89c6\u56fe\u4fee\u6539 // position: \u904d\u5386\u8fc7\u7a0b\u4e2d\u7684\u5217\u8868\u6761\u76ee\u7d22\u5f15 // toggleModel: \u5207\u6362\u6a21\u5f0f(\u5e03\u5c14\u503c) // end: \u662f\u5426\u5168\u90e8\u904d\u5386\u5b8c\u6210","title":"\u5207\u6362\u6a21\u5f0f"},{"location":"toggle/#_1","text":"override fun onActivityCreated ( savedInstanceState : Bundle?) { super . onActivityCreated ( savedInstanceState ) rv . linear (). setup { addType < CheckModel > ( R . layout . item_check_mode ) // \u76d1\u542c\u5207\u6362\u4e8b\u4ef6 onToggle { position , toggleMode , end -> if ( end ) { // \u663e\u793a\u548c\u9690\u85cf\u7f16\u8f91\u83dc\u5355 ll_menu . visibility = if ( toggleMode ) View . VISIBLE else View . GONE } } }. models = getData () } fun onClick ( v : View ){ rv . bindingAdapter . toggle () // \u70b9\u51fb\u4e8b\u4ef6\u89e6\u53d1\u5207\u6362\u4e8b\u4ef6 }","title":"\u793a\u4f8b"},{"location":"toggle/#_2","text":"fun toggle () // \u89e6\u53d1\u5207\u6362\u6a21\u5f0f(\u6839\u636e\u5f53\u524d\u72b6\u6001\u53d6\u53cd) fun getToggleMode (): Boolean // \u8303\u56f4\u5f53\u524d\u51fa\u4f55\u79cd\u5207\u6362\u6a21\u5f0f fun setToggleMode ( toggleMode : Boolean ) // \u8bbe\u7f6e\u5207\u6362\u6a21\u5f0f, \u5982\u679c\u8bbe\u7f6e\u7684\u662f\u5f53\u524d\u6b63\u5904\u4e8e\u7684\u6a21\u5f0f\u4e0d\u4f1a\u89e6\u53d1\u56de\u8c03 fun onToggle ( block : ( position : Int , toggleModel : Boolean , end : Boolean ) -> Unit ) // \u76d1\u542c\u5207\u6362\u4e8b\u4ef6, \u5728\u4e8b\u4ef6\u4e2d\u4f60\u53ef\u4ee5\u5904\u7406\u4efb\u4f55\u89c6\u56fe\u7684\u6570\u636e\u6216\u8005\u89c6\u56fe\u4fee\u6539 // position: \u904d\u5386\u8fc7\u7a0b\u4e2d\u7684\u5217\u8868\u6761\u76ee\u7d22\u5f15 // toggleModel: \u5207\u6362\u6a21\u5f0f(\u5e03\u5c14\u503c) // end: \u662f\u5426\u5168\u90e8\u904d\u5386\u5b8c\u6210","title":"\u51fd\u6570"},{"location":"updates/","text":"1.3.58 \u00b6 fixed #141 1.3.57 \u00b6 PageRefreshLayout.showContent \u53c2\u6570 hasMore \u9ed8\u8ba4\u503c\u6539\u4e3atrue, \u907f\u514d\u8d85\u51fa\u5f00\u53d1\u8005\u9884\u671f\u5173\u95ed\u52a0\u8f7d\u66f4\u591a\u884c\u4e3a 1.3.56 \u00b6 \u4fee\u590d\u5237\u65b0\u5d29\u6e83 1.3.55 \u00b6 \u89e3\u51b3\u4e0d\u8c03\u7528 PageRefreshLayout.finish \u65b9\u6cd5\u800c\u662f\u53bb\u8c03\u7528 SmartRefreshLayout.finishRefresh \u5bfc\u81f4\u7684\u4e0a\u62c9\u52a0\u8f7d\u5931\u6548\u95ee\u9898 1.3.54 \u00b6 Fixed #119 \u5206\u7ec4\u907f\u514d\u91cd\u590d\u5c55\u5f00/\u6298\u53e0 \u4fee\u590d\u5355\u4e00\u5c55\u5f00\u6a21\u5f0f 1.3.53 \u00b6 Fixed #107 Fixed #108 1.3.52 \u00b6 \u907f\u514d\u591a\u6b21\u663e\u793a\u52a0\u8f7d\u9875\u9762\u5bfc\u81f4\u7f3a\u7701\u9875showError\u65e0\u6548 1.3.51 \u00b6 fix: \u4fee\u590d\u62d6\u62fd\u529f\u80fd\u5bfc\u81f4\u5217\u8868\u663e\u793a\u4e0e\u6570\u636e\u6e90\u4e0d\u5bf9\u5e94\u7684\u95ee\u9898 1.3.50 \u00b6 \u5347\u7ea7\u5185\u7f6e\u4f9d\u8d56SmartRefreshLayout\u81f3\u6700\u65b0\u7248\u672c 2.0.5 api 'io.github.scwang90:refresh-layout-kernel:2.0.5' api 'io.github.scwang90:refresh-header-material:2.0.5' api 'io.github.scwang90:refresh-footer-classics:2.0.5' \u6ce8\u610f\u5982\u679c\u4f60\u6709\u6dfb\u52a0\u9644\u5c5e\u7684SmartRefreshLayout\u5237\u65b0\u5934, \u9700\u8981\u4e00\u5e76\u66f4\u65b0\u81f3\u6700\u65b0\u7684 mavenCentral() \u7248\u672c \u8be6\u60c5\u67e5\u770b #85 1.3.40 \u00b6 \u4fee\u590d\u4e0b\u62c9\u5237\u65b0\u5931\u6548 \u6dfb\u52a0\u7f51\u683c\u5206\u7ec4/\u62d6\u62fd\u5206\u7ec4\u793a\u4f8b \u4f18\u5316\u5217\u8868\u8d1f\u8f7d\u66f4\u65b0 \u4fee\u6539addModels\u4e0eaddData\u7684\u6dfb\u52a0\u6570\u636e\u903b\u8f91\uff0c\u4f7f\u5f97models\u7ef4\u6301\u540c\u4e00\u4e2a\u5bf9\u8c61 \u66f4\u65b0\u793a\u4f8b\u4ee3\u7801 1.3.39 \u00b6 \u66b4\u9732\u5bf9\u6bd4\u6570\u636e\u53d8\u5316\u7684\u56de\u8c03\u63a5\u53e3 1.3.38 \u00b6 \u65b0\u589e\u5bf9\u6bd4\u6570\u636e\u5237\u65b0\u51fd\u6570 setDifferModels , \u672c\u8eabBRV\u5c31\u652f\u6301\u5b98\u65b9\u5bf9\u6bd4\u5237\u65b0\u65b9\u6848, \u8fd9\u6b21\u53ea\u662f\u4f18\u5316\u65b9\u6848 \u65b0\u589e PageRefreshLayout.refreshing \u4ec5\u5728\u7b2c\u4e00\u6b21\u52a0\u8f7d\u6570\u636e\u65f6\u65f6\u5019\u52a0\u8f7d\u7f3a\u7701\u9875\u540e\u7eed\u4f7f\u7528\u9759\u9ed8\u52a0\u8f7d 1.3.37 \u00b6 \u4fee\u590dUpFetch\u6a21\u5f0f\u4e0b\u7f3a\u7701\u9875\u98a0\u5012\u95ee\u9898 \u4fee\u590dreverseLayout\u4e0b\u5206\u5272\u7ebf\u95ee\u9898 \u65b0\u589eItemDepthUtils\u6765\u7b80\u5316\u83b7\u53d6\u5206\u7ec4\u5c42\u7ea7\u6df1\u5ea6 1.3.36 \u00b6 \u4fee\u590dUpFetch\u6a21\u5f0f\u4e0b\u5206\u5272\u7ebf\u663e\u793a\u9519\u8bef\u95ee\u9898 1.3.35 \u00b6 \u6dfb\u52a0\u591a\u7c7b\u578b\u5217\u8868\u51fd\u6570 addType \u652f\u6301\u63a5\u53e3\u591a\u6001 \u4fee\u590dUpFetch\u62c9\u53d6\u52a0\u8f7d\u66f4\u591a\u5728Activity\u4e0a\u5185\u5bb9\u98a0\u5012\u95ee\u9898 1.3.34 \u00b6 \u4fee\u590d\u5206\u7ec4\u5d4c\u5957\u5c55\u5f00\u65f6\u4ea7\u751f\u91cd\u590d\u6570\u636e\u95ee\u9898(\u5b50\u5217\u8868\u4e3a\u53ef\u53d8\u96c6\u5408\u65f6\u5f15\u53d1\u6b64\u95ee\u9898) 1.3.33 \u00b6 \u4fee\u590d\u65e0\u6cd5\u4ec5\u542f\u7528\u4e0a\u62c9\u52a0\u8f7d\u95ee\u9898 1.3.32 \u00b6 \u5141\u8bb8BindingAdapter\u88ab\u91cd\u5199 \u4fee\u590d\u52a0\u8f7d\u66f4\u591a\u65f6\u53d1\u751f\u9519\u8bef\u5224\u65ad\u4e3a\u6ca1\u6709\u66f4\u591a\u9875\u95ee\u9898 1.3.31 \u00b6 \u4fee\u590dPageRefreshLayout\u7f3a\u7701\u9875\u5d29\u6e83\u95ee\u9898 1.3.30 \u00b6 \u66f4\u65b0\u4f9d\u8d56SmartRefreshLayout\u81f32.0.3 \u66f4\u65b0\u4f9d\u8d56StateLayout\u81f31.2.0 \u6dfb\u52a0\u7f3a\u7701\u9875onContent\u76d1\u542c 1.3.29 \u00b6 \u9690\u85cf\u5185\u90e8\u51fd\u6570 throttleClick 1.3.28 \u00b6 \u4fee\u590donClick\u70b9\u51fb\u9632\u6296\u52a8\u5931\u6548\u95ee\u9898 1.3.27 \u00b6 \u5168\u5c40\u914d\u7f6e \u70b9\u51fb\u9632\u6296\u52a8 \u95f4\u9694\u65f6\u95f4 1.3.26 \u00b6 fixed #20 \u4fee\u590dshoLoading\u7f3a\u7701\u9875\u53c2\u6570\u9519\u8bef 1.3.25 \u00b6 \u65b0\u589e\u51fd\u6570isSampleGroup\u6765\u5224\u65ad\u4e24\u4e2a\u4f4d\u7f6e\u7684item\u662f\u5426\u5904\u4e8e\u540c\u4e00\u5206\u7ec4\u4e0b \u7ec4\u67e5\u8be2\u7236\u9879findParentPosition\u7684\u6027\u80fd 1.3.24 \u00b6 \u4fee\u590d\u5c40\u90e8\u5237\u65b0\u6dfb\u52a0\u6570\u636e\u65f6\u52a8\u6001\u5206\u5272\u7ebf\u53ef\u80fd\u53d1\u751f\u9519\u8bef 1.3.22 \u00b6 \u4e3a\u51cf\u5c11\u6dfb\u52a0\u70b9\u51fb\u4e8b\u4ef6Id\u540e\u8fd8\u5f97\u5224\u65adId. \u70b9\u51fb\u4e8b\u4ef6\u73b0\u5728\u548cId\u5bf9\u5e94\u914d\u7f6e, \u4e0d\u505a\u7edf\u4e00\u5904\u7406. \u5e9f\u5f03\u90e8\u5206\u51fd\u6570 \u5e9f\u5f03\u51fd\u6570 \u66ff\u6362 addFastClickable \u66ff\u6362\u4e3aonFastClick addClickable \u66ff\u6362\u4e3aonClick addLongClickable \u66ff\u6362\u4e3aonLongClick 1.3.21 \u00b6 \u65b0\u589e\u53ef\u4ee5\u4f7f\u7528Id\u76f4\u63a5\u8c03\u7528onClick/onFastClick/onLongClick rv . linear (). setup { addType < SimpleModel > ( R . layout . item_simple ) R . id . tv_simple . onClick { toast ( \"\u70b9\u51fbText\" ) } }. models = getData () 1.3.20 \u00b6 \u4fee\u590d\u5355\u4f8b\u7f3a\u7701\u9875\u65e0\u6cd5\u8986\u76d6\u5168\u5c40\u7f3a\u7701\u9875\u95ee\u9898","title":"\u66f4\u65b0\u65e5\u5fd7"},{"location":"updates/#1358","text":"fixed #141","title":"1.3.58"},{"location":"updates/#1357","text":"PageRefreshLayout.showContent \u53c2\u6570 hasMore \u9ed8\u8ba4\u503c\u6539\u4e3atrue, \u907f\u514d\u8d85\u51fa\u5f00\u53d1\u8005\u9884\u671f\u5173\u95ed\u52a0\u8f7d\u66f4\u591a\u884c\u4e3a","title":"1.3.57"},{"location":"updates/#1356","text":"\u4fee\u590d\u5237\u65b0\u5d29\u6e83","title":"1.3.56"},{"location":"updates/#1355","text":"\u89e3\u51b3\u4e0d\u8c03\u7528 PageRefreshLayout.finish \u65b9\u6cd5\u800c\u662f\u53bb\u8c03\u7528 SmartRefreshLayout.finishRefresh \u5bfc\u81f4\u7684\u4e0a\u62c9\u52a0\u8f7d\u5931\u6548\u95ee\u9898","title":"1.3.55"},{"location":"updates/#1354","text":"Fixed #119 \u5206\u7ec4\u907f\u514d\u91cd\u590d\u5c55\u5f00/\u6298\u53e0 \u4fee\u590d\u5355\u4e00\u5c55\u5f00\u6a21\u5f0f","title":"1.3.54"},{"location":"updates/#1353","text":"Fixed #107 Fixed #108","title":"1.3.53"},{"location":"updates/#1352","text":"\u907f\u514d\u591a\u6b21\u663e\u793a\u52a0\u8f7d\u9875\u9762\u5bfc\u81f4\u7f3a\u7701\u9875showError\u65e0\u6548","title":"1.3.52"},{"location":"updates/#1351","text":"fix: \u4fee\u590d\u62d6\u62fd\u529f\u80fd\u5bfc\u81f4\u5217\u8868\u663e\u793a\u4e0e\u6570\u636e\u6e90\u4e0d\u5bf9\u5e94\u7684\u95ee\u9898","title":"1.3.51"},{"location":"updates/#1350","text":"\u5347\u7ea7\u5185\u7f6e\u4f9d\u8d56SmartRefreshLayout\u81f3\u6700\u65b0\u7248\u672c 2.0.5 api 'io.github.scwang90:refresh-layout-kernel:2.0.5' api 'io.github.scwang90:refresh-header-material:2.0.5' api 'io.github.scwang90:refresh-footer-classics:2.0.5' \u6ce8\u610f\u5982\u679c\u4f60\u6709\u6dfb\u52a0\u9644\u5c5e\u7684SmartRefreshLayout\u5237\u65b0\u5934, \u9700\u8981\u4e00\u5e76\u66f4\u65b0\u81f3\u6700\u65b0\u7684 mavenCentral() \u7248\u672c \u8be6\u60c5\u67e5\u770b #85","title":"1.3.50"},{"location":"updates/#1340","text":"\u4fee\u590d\u4e0b\u62c9\u5237\u65b0\u5931\u6548 \u6dfb\u52a0\u7f51\u683c\u5206\u7ec4/\u62d6\u62fd\u5206\u7ec4\u793a\u4f8b \u4f18\u5316\u5217\u8868\u8d1f\u8f7d\u66f4\u65b0 \u4fee\u6539addModels\u4e0eaddData\u7684\u6dfb\u52a0\u6570\u636e\u903b\u8f91\uff0c\u4f7f\u5f97models\u7ef4\u6301\u540c\u4e00\u4e2a\u5bf9\u8c61 \u66f4\u65b0\u793a\u4f8b\u4ee3\u7801","title":"1.3.40"},{"location":"updates/#1339","text":"\u66b4\u9732\u5bf9\u6bd4\u6570\u636e\u53d8\u5316\u7684\u56de\u8c03\u63a5\u53e3","title":"1.3.39"},{"location":"updates/#1338","text":"\u65b0\u589e\u5bf9\u6bd4\u6570\u636e\u5237\u65b0\u51fd\u6570 setDifferModels , \u672c\u8eabBRV\u5c31\u652f\u6301\u5b98\u65b9\u5bf9\u6bd4\u5237\u65b0\u65b9\u6848, \u8fd9\u6b21\u53ea\u662f\u4f18\u5316\u65b9\u6848 \u65b0\u589e PageRefreshLayout.refreshing \u4ec5\u5728\u7b2c\u4e00\u6b21\u52a0\u8f7d\u6570\u636e\u65f6\u65f6\u5019\u52a0\u8f7d\u7f3a\u7701\u9875\u540e\u7eed\u4f7f\u7528\u9759\u9ed8\u52a0\u8f7d","title":"1.3.38"},{"location":"updates/#1337","text":"\u4fee\u590dUpFetch\u6a21\u5f0f\u4e0b\u7f3a\u7701\u9875\u98a0\u5012\u95ee\u9898 \u4fee\u590dreverseLayout\u4e0b\u5206\u5272\u7ebf\u95ee\u9898 \u65b0\u589eItemDepthUtils\u6765\u7b80\u5316\u83b7\u53d6\u5206\u7ec4\u5c42\u7ea7\u6df1\u5ea6","title":"1.3.37"},{"location":"updates/#1336","text":"\u4fee\u590dUpFetch\u6a21\u5f0f\u4e0b\u5206\u5272\u7ebf\u663e\u793a\u9519\u8bef\u95ee\u9898","title":"1.3.36"},{"location":"updates/#1335","text":"\u6dfb\u52a0\u591a\u7c7b\u578b\u5217\u8868\u51fd\u6570 addType \u652f\u6301\u63a5\u53e3\u591a\u6001 \u4fee\u590dUpFetch\u62c9\u53d6\u52a0\u8f7d\u66f4\u591a\u5728Activity\u4e0a\u5185\u5bb9\u98a0\u5012\u95ee\u9898","title":"1.3.35"},{"location":"updates/#1334","text":"\u4fee\u590d\u5206\u7ec4\u5d4c\u5957\u5c55\u5f00\u65f6\u4ea7\u751f\u91cd\u590d\u6570\u636e\u95ee\u9898(\u5b50\u5217\u8868\u4e3a\u53ef\u53d8\u96c6\u5408\u65f6\u5f15\u53d1\u6b64\u95ee\u9898)","title":"1.3.34"},{"location":"updates/#1333","text":"\u4fee\u590d\u65e0\u6cd5\u4ec5\u542f\u7528\u4e0a\u62c9\u52a0\u8f7d\u95ee\u9898","title":"1.3.33"},{"location":"updates/#1332","text":"\u5141\u8bb8BindingAdapter\u88ab\u91cd\u5199 \u4fee\u590d\u52a0\u8f7d\u66f4\u591a\u65f6\u53d1\u751f\u9519\u8bef\u5224\u65ad\u4e3a\u6ca1\u6709\u66f4\u591a\u9875\u95ee\u9898","title":"1.3.32"},{"location":"updates/#1331","text":"\u4fee\u590dPageRefreshLayout\u7f3a\u7701\u9875\u5d29\u6e83\u95ee\u9898","title":"1.3.31"},{"location":"updates/#1330","text":"\u66f4\u65b0\u4f9d\u8d56SmartRefreshLayout\u81f32.0.3 \u66f4\u65b0\u4f9d\u8d56StateLayout\u81f31.2.0 \u6dfb\u52a0\u7f3a\u7701\u9875onContent\u76d1\u542c","title":"1.3.30"},{"location":"updates/#1329","text":"\u9690\u85cf\u5185\u90e8\u51fd\u6570 throttleClick","title":"1.3.29"},{"location":"updates/#1328","text":"\u4fee\u590donClick\u70b9\u51fb\u9632\u6296\u52a8\u5931\u6548\u95ee\u9898","title":"1.3.28"},{"location":"updates/#1327","text":"\u5168\u5c40\u914d\u7f6e \u70b9\u51fb\u9632\u6296\u52a8 \u95f4\u9694\u65f6\u95f4","title":"1.3.27"},{"location":"updates/#1326","text":"fixed #20 \u4fee\u590dshoLoading\u7f3a\u7701\u9875\u53c2\u6570\u9519\u8bef","title":"1.3.26"},{"location":"updates/#1325","text":"\u65b0\u589e\u51fd\u6570isSampleGroup\u6765\u5224\u65ad\u4e24\u4e2a\u4f4d\u7f6e\u7684item\u662f\u5426\u5904\u4e8e\u540c\u4e00\u5206\u7ec4\u4e0b \u7ec4\u67e5\u8be2\u7236\u9879findParentPosition\u7684\u6027\u80fd","title":"1.3.25"},{"location":"updates/#1324","text":"\u4fee\u590d\u5c40\u90e8\u5237\u65b0\u6dfb\u52a0\u6570\u636e\u65f6\u52a8\u6001\u5206\u5272\u7ebf\u53ef\u80fd\u53d1\u751f\u9519\u8bef","title":"1.3.24"},{"location":"updates/#1322","text":"\u4e3a\u51cf\u5c11\u6dfb\u52a0\u70b9\u51fb\u4e8b\u4ef6Id\u540e\u8fd8\u5f97\u5224\u65adId. \u70b9\u51fb\u4e8b\u4ef6\u73b0\u5728\u548cId\u5bf9\u5e94\u914d\u7f6e, \u4e0d\u505a\u7edf\u4e00\u5904\u7406. \u5e9f\u5f03\u90e8\u5206\u51fd\u6570 \u5e9f\u5f03\u51fd\u6570 \u66ff\u6362 addFastClickable \u66ff\u6362\u4e3aonFastClick addClickable \u66ff\u6362\u4e3aonClick addLongClickable \u66ff\u6362\u4e3aonLongClick","title":"1.3.22"},{"location":"updates/#1321","text":"\u65b0\u589e\u53ef\u4ee5\u4f7f\u7528Id\u76f4\u63a5\u8c03\u7528onClick/onFastClick/onLongClick rv . linear (). setup { addType < SimpleModel > ( R . layout . item_simple ) R . id . tv_simple . onClick { toast ( \"\u70b9\u51fbText\" ) } }. models = getData ()","title":"1.3.21"},{"location":"updates/#1320","text":"\u4fee\u590d\u5355\u4f8b\u7f3a\u7701\u9875\u65e0\u6cd5\u8986\u76d6\u5168\u5c40\u7f3a\u7701\u9875\u95ee\u9898","title":"1.3.20"},{"location":"upfetch/","text":"\u672c\u7ae0\u8282\u8bf4\u7684\u62c9\u53d6\u66f4\u591a\u4e0d\u662f\u4e0a\u62c9\u52a0\u8f7d\u66f4\u591a, \u800c\u662f\u4e0b\u62c9\u52a0\u8f7d\u66f4\u591a. \u5e38\u89c1\u7684\u5e94\u7528\u573a\u666f\u5c31\u662f\u804a\u5929\u754c\u9762\u4e0b\u62c9\u53d6\u52a0\u8f7d\u5386\u53f2\u8bb0\u5f55 \u4f8b\u5982\u804a\u5929\u8bb0\u5f55\u754c\u9762, \u6700\u65b0\u7684\u6d88\u606f\u5728\u5e95\u90e8, \u4e0b\u62c9\u5217\u8868\u4f1a\u89e6\u53d1\u52a0\u8f7d\u4e0b\u4e00\u9875. \u8fd9\u79cd\u9700\u6c42\u5728BRV\u4e2d\u53ea\u9700\u8981\u4e00\u884c\u4ee3\u7801(\u6269\u5c55\u81ea SmartRefreshLayout ) \u5411\u4e0b\u62c9\u53d6\u52a0\u8f7d\u66f4\u591a\u5176\u5b9e\u672c\u8d28\u4e0a\u662f\u5c06rv\u53cd\u8f6c, \u518d\u5c06\u5185\u5bb9\u5e03\u5c40\u53cd\u8f6c(\u6b64\u65f6\u5185\u5bb9\u5e03\u5c40\u5c31\u662f\u6b63\u5e38\u663e\u793a\u7684). override fun onActivityCreated ( savedInstanceState : Bundle?) { super . onActivityCreated ( savedInstanceState ) rv . setup { addType < Model > ( R . layout . item_multi_type_simple ) } page . upFetchEnabled = true page . onRefresh { // \u6a21\u62df\u7f51\u7edc\u8bf7\u6c422\u79d2\u540e\u6210\u529f postDelayed ({ val data = getData () addData ( data ) { index <= 2 } }, 1000 ) }. showLoading () // \u52a0\u8f7d\u4e2d(\u7f3a\u7701\u9875) } \u9664\u4e86\u9ad8\u4eae\u7684\u4e00\u4e2a\u5c5e\u6027\u8bbe\u7f6e, \u5176\u4ed6\u4ee3\u7801\u548c\u6b63\u5e38\u4e00\u6837 \u5e03\u5c40\u4ee3\u7801 <com.drake.brv.PageRefreshLayout android:id= \"@+id/page\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <androidx.recyclerview.widget.RecyclerView android:id= \"@+id/rv\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" app:layoutManager= \"androidx.recyclerview.widget.LinearLayoutManager\" app:reverseLayout= \"true\" app:stackFromEnd= \"true\" /> <!--stackFromEnd=true \u9632\u6b62UpFetch\u65f6\u6570\u636e\u4e0d\u6ee1\u4e00\u5c4f\u5e55\u7684\u65f6\u5019, \u5bf9\u9f50\u5e95\u90e8\u800c\u4e0d\u662f\u9876\u90e8--> <!--reverseLayout=true rv\u6570\u636e\u6392\u5217\u987a\u5e8f\u53cd\u8f6c--> </com.drake.brv.PageRefreshLayout>","title":"\u62c9\u53d6\u66f4\u591a"},{"location":"view-binding/","text":"\u5047\u8bbe\u4f60\u4e0d\u60f3\u4f7f\u7528DataBinding\u53ea\u60f3\u7528ViewBinding\u53ef\u4ee5\u9605\u8bfb\u4ee5\u4e0b\u5185\u5bb9 \u4e0d\u63a8\u8350 \u00b6 \u9996\u5148MVVM\u662f\u76ee\u524d\u6700\u4f18\u79c0\u7684\u67b6\u6784\u8bbe\u8ba1, \u800cDataBinding\u662f\u5b9e\u73b0MVVM\u7684\u6700\u4f18\u89e3 DataBinding\u672c\u8eab\u53ef\u4ee5\u770b\u505aViewBinding, \u4e14\u4e0d\u4f1a\u9ed8\u8ba4\u4e3a\u6240\u6709\u5e03\u5c40\u81ea\u52a8\u751f\u6210\u7c7b\u4ee3\u7801\u91cf\u66f4\u5c11 \u5176\u6b21ViewBinding\u65e0\u6cd5\u88ab\u5c01\u88c5, \u4ee3\u7801\u91cf\u66f4\u591a \u4f7f\u7528 \u00b6 \u5982\u679c\u4f60\u4f9d\u7136\u60f3\u7528ViewBinding\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u4ee3\u7801 rv . linear (). setup { // \u5728onCreateViewHolder\u751f\u547d\u5468\u671f\u4f7f\u7528 onCreate { val binding = ItemSimpleBinding . bind ( itemView ) binding . tvName . text = \"\u6587\u672c\u5185\u5bb9\" } // \u6216\u8005\u5728onBindViewHolder\u751f\u547d\u5468\u671f\u4e2d\u4f7f\u7528 onBind { val binding = ItemSimpleBinding . bind ( itemView ) } addType < SimpleModel > ( R . layout . item_simple ) }. models = getData ()","title":"ViewBinding"},{"location":"view-binding/#_1","text":"\u9996\u5148MVVM\u662f\u76ee\u524d\u6700\u4f18\u79c0\u7684\u67b6\u6784\u8bbe\u8ba1, \u800cDataBinding\u662f\u5b9e\u73b0MVVM\u7684\u6700\u4f18\u89e3 DataBinding\u672c\u8eab\u53ef\u4ee5\u770b\u505aViewBinding, \u4e14\u4e0d\u4f1a\u9ed8\u8ba4\u4e3a\u6240\u6709\u5e03\u5c40\u81ea\u52a8\u751f\u6210\u7c7b\u4ee3\u7801\u91cf\u66f4\u5c11 \u5176\u6b21ViewBinding\u65e0\u6cd5\u88ab\u5c01\u88c5, \u4ee3\u7801\u91cf\u66f4\u591a","title":"\u4e0d\u63a8\u8350"},{"location":"view-binding/#_2","text":"\u5982\u679c\u4f60\u4f9d\u7136\u60f3\u7528ViewBinding\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u4ee3\u7801 rv . linear (). setup { // \u5728onCreateViewHolder\u751f\u547d\u5468\u671f\u4f7f\u7528 onCreate { val binding = ItemSimpleBinding . bind ( itemView ) binding . tvName . text = \"\u6587\u672c\u5185\u5bb9\" } // \u6216\u8005\u5728onBindViewHolder\u751f\u547d\u5468\u671f\u4e2d\u4f7f\u7528 onBind { val binding = ItemSimpleBinding . bind ( itemView ) } addType < SimpleModel > ( R . layout . item_simple ) }. models = getData ()","title":"\u4f7f\u7528"}]}